# Cursor Rules for CreamPie Project with AI Documentation System

## üéØ Core Principles

### Priority System (Always Apply)
1. **Critical**: Security vulnerabilities, data integrity issues, breaking changes
2. **High**: Style violations, performance issues, maintainability problems
3. **Medium**: Code organization, documentation, minor optimizations
4. **Low**: Personal preferences, cosmetic changes, future-proofing

### Decision Frameworks
- **Refactor vs New Code**: Refactor existing code with issues, create new code for features that don't exist
- **Strict vs Flexible**: Be strict about security, data integrity, critical business logic; flexible about style preferences
- **Context Awareness**: Consider file context, task context, project context, and user experience level

## üìÅ AI Documentation System Integration

### Core Documentation Structure
- **AI Config**: `ai/ai_config.json` - Central configuration and settings
- **Quick Reference**: `ai/ai_quick_reference.json` - Essential patterns for immediate use
- **Search Index**: `ai/search_index.json` - Comprehensive navigation guide
- **Usage Guide**: `ai/ai_usage_guide.json` - Detailed AI tool instructions

### Documentation Types
- **Feature Plans**: High-level strategy (WHAT/WHY) - use `ai/guide_docs/feature_template.json`
- **Implementation Guides**: Detailed execution (HOW) - use `ai/guide_docs/implementation_guide_template.json`
- **Technical Summaries**: Module-specific details - located in `ai/features/summaries/`
- **Style Guides**: Language/domain-specific standards - in `ai/guide_docs/language_specific/` and `ai/guide_docs/domain_specific/`

### Essential Navigation
- **Decision Framework**: `ai/guide_docs/core_principles.json`
- **Architecture**: `ai/project_context/architecture_overview.json`
- **Patterns**: `ai/project_context/common_patterns.json`
- **Workflow**: `ai/project_context/development_workflow.json`

## üîß Technology-Specific Guidelines

### Python Development
- **Style Guide**: `ai/guide_docs/language_specific/python_style_guide.json`
- **Testing**: `ai/guide_docs/language_specific/python_testing_style_guide.json`
- **Patterns**: FastAPI with Pydantic, SQLAlchemy, Celery, Alembic

### Frontend Development
- **Style Guide**: `ai/guide_docs/language_specific/react_style_guide.json`
- **Patterns**: React with TypeScript, Tailwind CSS, React Router, Axios

### Database Operations
- **Management Guide**: `ai/guide_docs/domain_specific/database_management_guide.json`
- **Patterns**: Async SQLAlchemy, migration strategies, relationship management

### Shell Scripts
- **Style Guide**: `ai/guide_docs/domain_specific/shell_style_guide.json`
- **Patterns**: Automation, error handling, logging

## üèóÔ∏è Architecture Patterns

### Backend Architecture
- **FastAPI**: Use Pydantic models, dependency injection, async/await
- **Database**: SQLAlchemy ORM with async sessions, proper indexing
- **Background Tasks**: Celery for long-running operations
- **Error Handling**: Consistent try/except patterns with proper logging

### Frontend Architecture
- **Components**: Function components with hooks, TypeScript interfaces
- **State Management**: React Context for shared state, local state for component-specific
- **Styling**: Tailwind CSS with utility-first approach
- **Testing**: Jest + React Testing Library for component testing

### Code Organization
- **Modular Structure**: Clear separation of concerns
- **File Naming**: PascalCase for components, camelCase for utilities, kebab-case for files
- **Imports**: Organized imports with clear dependencies
- **Documentation**: JSON-optimized for AI consumption

## üìã Quality Standards

### Before Providing Code
- [ ] Check core principles for decision framework
- [ ] Reference appropriate language/domain guides
- [ ] Include proper error handling
- [ ] Follow project naming conventions
- [ ] Add validation and testing considerations
- [ ] Consider performance implications
- [ ] Apply security best practices

### Before Making Suggestions
- [ ] Understand user's current context
- [ ] Identify appropriate priority level
- [ ] Reference existing patterns
- [ ] Explain reasoning clearly
- [ ] Provide actionable guidance
- [ ] Consider user's experience level

## üö® Emergency Patterns

### When User is Stuck
1. **Acknowledge the issue** - Show understanding
2. **Ask clarifying questions** - Get more context
3. **Provide step-by-step guidance** - Break down the problem
4. **Reference relevant documentation** - Point to specific guides
5. **Offer alternatives** - Suggest different approaches

### When Guides Conflict
1. **Identify the conflict** - State what's different
2. **Apply priority system** - Security ‚Üí Project Consistency ‚Üí Performance ‚Üí Style
3. **Explain trade-offs** - Help user understand implications
4. **Recommend approach** - Suggest best path forward

### When Code Doesn't Work
1. **Check error messages** - Look for specific issues
2. **Verify dependencies** - Ensure all imports and setup
3. **Test assumptions** - Validate expected behavior
4. **Provide debugging steps** - Help user troubleshoot
5. **Suggest alternatives** - Offer different approaches

### When System is Down
1. **Assess severity** - Is it blocking development or just a warning?
2. **Check basic connectivity** - Database, services, dependencies
3. **Look for recent changes** - What might have caused this?
4. **Provide immediate workarounds** - Alternative approaches if possible
5. **Escalate if needed** - Point to appropriate resources or people

### When Data is Corrupted
1. **Stop further operations** - Prevent additional damage
2. **Assess scope** - How much data is affected?
3. **Check backups** - Are there recent backups available?
4. **Provide recovery steps** - Clear instructions for restoration
5. **Document the incident** - For future prevention

## üîß Debugging Workflow

### When Linting/Testing Fails
1. **ALWAYS check output reports first** - Look in `ai/outputs/` for specific error reports
2. **Read the actual error messages** - Don't guess or search randomly
3. **Fix the exact issues reported** - Address specific line numbers and error types
4. **Don't waste time searching** - Use the reports that are already generated
5. **Follow the error trail** - Start with the most critical errors first

**CRITICAL**: Before attempting to debug any linting, testing, or build failures:
- **FIRST**: Check `ai/outputs/lint_results/` for mypy, ruff, and other tool reports
- **FIRST**: Check `ai/outputs/test_results/` for test failure reports
- **FIRST**: Check `ai/outputs/` for any other relevant output reports
- **NEVER**: Start debugging without reading the actual error reports
- **WARNING**: Reports older than 15 minutes may be stale - consider re-running tools if issues persist

## üìû Communication Patterns

### Positive Feedback
- "Great approach! This follows our established patterns."
- "Excellent use of error handling here."
- "This is exactly the right pattern for this situation."

### Constructive Criticism
- "Consider using [pattern] for better [benefit]."
- "This could be improved by [specific suggestion]."
- "Let's follow our established pattern for [aspect]."

### Educational Guidance
- "Here's why we use this pattern: [explanation]."
- "This follows our [principle] because [reasoning]."
- "For future reference, you can find this pattern in [guide]."

## üîç Quick Reference Guide

### By Task Type
- **API Development**: FastAPI Guide + Database Guide + Testing Guide
- **Frontend**: React Style Guide + API integration patterns
- **Database**: Database Guide + Migration patterns
- **Automation**: Shell Guide + Background task patterns

### By Problem Type
- **Performance**: Core principles ‚Üí Performance section
- **Security**: Core principles ‚Üí Security section
- **Testing**: Python testing guide
- **Error Handling**: Core principles ‚Üí Error handling section

### By Technology
- **Python**: `ai/guide_docs/language_specific/python_style_guide.json`
- **FastAPI**: `ai/guide_docs/language_specific/fastapi_development_guide.json`
- **React**: `ai/guide_docs/language_specific/react_style_guide.json`
- **Database**: `ai/guide_docs/domain_specific/database_management_guide.json`

## üõ†Ô∏è Tool Usage Guidelines

### File Operations
- Use `read_file` before editing to understand context
- Use `edit_file` for precise changes with clear instructions
- Use `file_search` for fuzzy matching when exact path unknown
- Use `list_dir` to explore directory structure

### Code Analysis
- Use `codebase_search` for semantic understanding of patterns
- Use `grep_search` for exact text/regex pattern matching
- Validate file paths exist before referencing them

### Execution
- Use `run_terminal_cmd` for shell operations
- Set `is_background: true` for long-running tasks
- Provide clear command descriptions

## üìù Documentation Standards

### JSON Format Requirements
- All AI documentation uses JSON for optimization
- Include metadata: version, last_updated, source file
- Use cross-references with relative paths
- Follow validation rules for quality

### Content Guidelines
- **Plans**: Focus on WHAT/WHY, avoid detailed code snippets
- **Implementation Guides**: Include step-by-step instructions and code examples
- **Style Guides**: Provide specific patterns and best practices
- **Technical Summaries**: Document existing implementations and patterns

### AI Optimization
- Use structured data with consistent format
- Include keywords and semantic tags
- Provide code generation hints
- Maintain context awareness throughout

## üéØ Context Awareness

### User Experience Levels
- **Beginner**: Focus on basic patterns and step-by-step guidance
- **Intermediate**: Provide advanced patterns and optimization tips
- **Advanced**: Focus on architecture decisions and complex integrations

### Project Context
- **File Context**: What file they're working in and its purpose
- **Task Context**: What they're trying to accomplish
- **Project Context**: Overall architecture and constraints
- **Error Context**: What problems they're encountering

### Adaptive Responses
- Adjust detail level based on user experience
- Provide multiple approaches when appropriate
- Explain trade-offs and decisions
- Focus on solutions rather than just problems

## üîÑ Maintenance and Updates

### Documentation Health
- Use `scripts/ai_health_check.py` for validation
- Maintain cross-references across all documentation
- Update metadata and version information
- Ensure search index accuracy

### Continuous Improvement
- Monitor usage patterns and effectiveness
- Gather user feedback for improvements
- Update patterns based on new insights
- Expand coverage as needed

---

**Remember**: Always maintain context awareness, follow established patterns, prioritize user success over perfect code, and leverage the comprehensive AI documentation system for optimal guidance.
