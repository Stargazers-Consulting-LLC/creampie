{
  "ai_metadata": {
    "purpose": "",
    "last_updated": "",
    "template_version": "2.1",
    "ai_tool_compatibility": "",
    "ai_processing_level": "High",
    "required_context": "Full project documentation ecosystem",
    "validation_required": "Yes",
    "code_generation": "Supported",
    "cross_references": [],
    "maintenance": ""
  },
  "file_info": {
    "file_path": "README.md",
    "original_format": "markdown",
    "converted_at": "2025-06-18T19:14:30.232602",
    "file_size": 13885,
    "line_count": 305,
    "optimized_at": "2025-06-18T19:19:47.723319",
    "optimization_version": "1.0"
  },
  "content": {
    "sections": [
      {
        "level": 1,
        "title": "AI Documentation System",
        "content": "> This is the main documentation hub for AI tools working with this project. It provides comprehensive guidance, patterns, and tools for effective AI-assisted development.",
        "subsections": []
      },
      {
        "level": 2,
        "title": "AI Metadata",
        "content": "**Template Version:** 2.1\n**AI Processing Level:** High\n**Required Context:** Full project documentation ecosystem\n**Validation Required:** Yes\n**Code Generation:** Supported\n**Search Optimization:** Enhanced\n\n**Dependencies:** All documentation in this folder structure\n**Cross-References:** Comprehensive linking between all documents\n**Keywords:** AI assistance, code generation, development patterns, architecture, testing, deployment\n\n**AI Tool Optimizations:**\n- **Semantic Search**: All documents include relevant keywords and concepts\n- **Structured Metadata**: Consistent metadata format across all files\n- **Cross-Reference System**: Bidirectional linking between related documents\n- **Code Generation Hints**: Specific guidance for implementation\n- **Validation Rules**: Clear quality standards for each document type",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Quick Reference",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "üöÄ Getting Started",
        "content": "- **New Feature Development**: Start with `guide_docs/Feature Template.json.replace(\".json\", \".json\")`\n- **Code Implementation**: Reference language-specific guides in `guide_docs/Language-Specific/`\n- **Architecture Decisions**: Check `project_context/Architecture Overview.json.replace(\".json\", \".json\")`\n- **Testing Strategy**: Use `guide_docs/Language-Specific/Python Testing Guide.json.replace(\".json\", \".json\")`",
        "subsections": []
      },
      {
        "level": 3,
        "title": "üìã Common Tasks",
        "content": "- **API Development**: FastAPI Guide + Database Guide + Testing Guide\n- **Frontend Components**: Frontend Style Guide + React patterns\n- **Shell Scripts**: Shell Style Guide + automation patterns\n- **Database Changes**: Database Management Guide + Migration patterns\n- **Deployment**: Development Workflow + CI/CD patterns",
        "subsections": []
      },
      {
        "level": 3,
        "title": "üîç Document Types",
        "content": "- **Plans** (`features/plans/`): Implementation plans for new features\n- **Summaries** (`features/summaries/`): Documentation of completed modules\n- **Guides** (`guide_docs/`): Reusable patterns and standards\n- **Context** (`project_context/`): Project-specific architecture and patterns",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Navigation Index",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "üìÅ Guide Documentation (`guide_docs/`)",
        "content": "**Purpose**: Reusable patterns, standards, and best practices",
        "subsections": []
      },
      {
        "level": 4,
        "title": "Core Principles",
        "content": "- **[Core Principles](guide_docs/Core%20Principles.json.replace(\".json\", \".json\"))** - Decision-making frameworks and architectural principles\n- **[Code Review Patterns](guide_docs/Code%20Review%20Patterns.json.replace(\".json\", \".json\"))** - How to structure suggestions and handle conflicts\n- **[AI Tool Optimization Guide](guide_docs/AI%20Tool%20Optimization%20Guide.json.replace(\".json\", \".json\"))** - Patterns for optimizing AI tool consumption",
        "subsections": []
      },
      {
        "level": 4,
        "title": "Language-Specific Guides",
        "content": "- **[Python Style Guide](guide_docs/Language-Specific/Python%20Style%20Guide.json.replace(\".json\", \".json\"))** - Python coding standards and patterns\n- **[FastAPI Development Guide](guide_docs/Language-Specific/FastAPI%20Development%20Guide.json.replace(\".json\", \".json\"))** - FastAPI best practices and patterns\n- **[Python Testing Guide](guide_docs/Language-Specific/Python%20Testing%20Guide.json.replace(\".json\", \".json\"))** - Testing strategies and patterns",
        "subsections": []
      },
      {
        "level": 4,
        "title": "Domain-Specific Guides",
        "content": "- **[Database Management Guide](guide_docs/Domain-Specific/Database%20Management%20Guide.json.replace(\".json\", \".json\"))** - Database patterns and migration strategies\n- **[Web Scraping Patterns](guide_docs/Domain-Specific/Web%20Scraping%20Patterns.json.replace(\".json\", \".json\"))** - Web scraping best practices\n- **[Frontend Style Guide](guide_docs/Domain-Specific/Frontend%20Style%20Guide.json.replace(\".json\", \".json\"))** - React/TypeScript development standards\n- **[Shell Style Guide](guide_docs/Domain-Specific/Shell%20Style%20Guide.json.replace(\".json\", \".json\"))** - Bash scripting and automation patterns",
        "subsections": []
      },
      {
        "level": 4,
        "title": "Templates",
        "content": "- **[Feature Template](guide_docs/Feature Template.json.replace(\".json\", \".json\"))** - Standardized feature development template",
        "subsections": []
      },
      {
        "level": 3,
        "title": "üìÅ Project Context (`project_context/`)",
        "content": "**Purpose**: Project-specific architecture, patterns, and context\n\n- **[Architecture Overview](project_context/Architecture%20Overview.json.replace(\".json\", \".json\"))** - System architecture and component relationships\n- **[Common Patterns](project_context/Common%20Patterns.json.replace(\".json\", \".json\"))** - Project-specific implementation patterns\n- **[Development Workflow](project_context/Development%20Workflow.json.replace(\".json\", \".json\"))** - Git workflow, CI/CD, and deployment procedures",
        "subsections": []
      },
      {
        "level": 3,
        "title": "üìÅ Feature Documentation (`features/`)",
        "content": "**Purpose**: Feature implementation plans and completed module documentation",
        "subsections": []
      },
      {
        "level": 4,
        "title": "Plans (`features/plans/`)",
        "content": "- **[IN-PROGRESS] Stock Tracking Request Plan](features/plans/[IN-PROGRESS]-Stock%20Tracking%20Request%20Plan.json.replace(\".json\", \".json\"))** - Active implementation plan",
        "subsections": []
      },
      {
        "level": 4,
        "title": "Summaries (`features/summaries/`)",
        "content": "- **[COMPLETED] Stock Data Processing Pipeline](features/summaries/[COMPLETED]-stock_data_processing_pipeline_summary.json.replace(\".json\", \".json\"))** - Completed module documentation",
        "subsections": []
      },
      {
        "level": 3,
        "title": "üìÅ AI Optimization Tools",
        "content": "**Purpose**: Enhanced AI tool consumption and navigation\n\n- **[AI Quick Reference](ai_quick_reference.json.replace(\".json\", \".json\"))** - Essential patterns and navigation for immediate use\n- **[Search Index](search_index.json.replace(\".json\", \".json\"))** - Comprehensive search index for quick navigation\n- **[AI Tool Optimization Guide](guide_docs/AI%20Tool%20Optimization%20Guide.json.replace(\".json\", \".json\"))** - Detailed optimization patterns\n- **[AI Tool Usage Guide](ai_usage_guide.json.replace(\".json\", \".json\"))** - Comprehensive guide for AI tools\n- **[AI Configuration](ai_config.json)** - Structured configuration for AI tools",
        "subsections": []
      },
      {
        "level": 3,
        "title": "üìÅ Maintenance Tools",
        "content": "**Purpose**: Tools for maintaining and validating AI documentation\n\n- **[Health Check Script](scripts/health_check.py)** - Validates AI documentation quality and completeness\n- **[Update Script](scripts/update_documentation.py)** - Updates metadata and maintains consistency\n- **[Test Paths Script](scripts/test_paths.py)** - Tests path resolution and system structure\n- **[Version Tracking](ai_config.json)** - Consistent template versioning across all documents",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Script Optimization Features",
        "content": "- **Comprehensive Reporting**: Both human-readable (Markdown) and machine-readable (JSON) outputs\n- **Intelligent Validation**: Smart false-positive detection for links and system components\n- **Error Handling**: Detailed error collection and actionable recommendations\n- **Performance Optimization**: Readability-focused design for maintainability\n- **Linting Compliance**: Full compliance with ruff, mypy, and other linting tools\n- **AI Metadata**: Consistent metadata and cross-references in all generated content",
        "subsections": []
      },
      {
        "level": 3,
        "title": "üìÅ AI-Consumable Reports",
        "content": "**Purpose**: Structured reports generated by maintenance tools for AI consumption\n\n- **[Health Check Results](outputs/health_check/healthcheck-result.json.replace(\".json\", \".json\"))** - Comprehensive validation results\n- **[Update Results](outputs/updates/update-results.json.replace(\".json\", \".json\"))** - Documentation update status and statistics\n- **[Test Results](outputs/test_results/path-test-results.json.replace(\".json\", \".json\"))** - System structure and path validation\n- **[JSON Reports](outputs/)** - Machine-readable data for programmatic access",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Usage Examples",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Example 1: Implementing a New API Endpoint",
        "content": "```bash",
        "subsections": []
      },
      {
        "level": 1,
        "title": "1. Check existing patterns",
        "content": "üìñ FastAPI Development Guide ‚Üí API endpoint patterns\nüìñ Database Management Guide ‚Üí Data model patterns\nüìñ Python Testing Guide ‚Üí Test implementation",
        "subsections": []
      },
      {
        "level": 1,
        "title": "2. Follow development workflow",
        "content": "üìñ Development Workflow ‚Üí Git workflow and testing\nüìñ Python Style Guide ‚Üí Code organization",
        "subsections": []
      },
      {
        "level": 1,
        "title": "3. Update documentation",
        "content": "üìñ Feature Template ‚Üí Document the new feature\n```",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Example 2: Creating a React Component",
        "content": "```bash",
        "subsections": []
      },
      {
        "level": 1,
        "title": "1. Reference frontend patterns",
        "content": "üìñ Frontend Style Guide ‚Üí Component structure and styling\nüìñ Core Principles ‚Üí Design decisions",
        "subsections": []
      },
      {
        "level": 1,
        "title": "2. Follow testing patterns",
        "content": "üìñ Python Testing Guide ‚Üí Test organization (applies to frontend too)",
        "subsections": []
      },
      {
        "level": 1,
        "title": "3. Update feature documentation",
        "content": "üìñ Feature Template ‚Üí Document UI changes\n```",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Example 3: Writing a Shell Script",
        "content": "```bash",
        "subsections": []
      },
      {
        "level": 1,
        "title": "1. Use shell patterns",
        "content": "üìñ Shell Style Guide ‚Üí Script structure and error handling\nüìñ Core Principles ‚Üí Error handling decisions",
        "subsections": []
      },
      {
        "level": 1,
        "title": "2. Follow deployment workflow",
        "content": "üìñ Development Workflow ‚Üí CI/CD integration",
        "subsections": []
      },
      {
        "level": 1,
        "title": "3. Document automation",
        "content": "üìñ Feature Template ‚Üí Document automation features\n```",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Cross-Reference System",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Decision Flow",
        "content": "```\nCore Principles ‚Üí Language/Domain Guides ‚Üí Project Context ‚Üí Feature Documentation\n```",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Implementation Flow",
        "content": "```\nFeature Template ‚Üí Language Guides ‚Üí Testing Guide ‚Üí Development Workflow\n```",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Quality Assurance Flow",
        "content": "```\nValidation Rules ‚Üí Testing Standards ‚Üí Code Review ‚Üí Deployment\n```",
        "subsections": []
      },
      {
        "level": 2,
        "title": "AI Assistant Guidelines",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "When Starting a New Task:",
        "content": "1. **Identify the task type** (API, UI, automation, etc.)\n2. **Reference the appropriate guide** from the navigation index\n3. **Follow the validation rules** specified in each guide\n4. **Use the code generation hints** for implementation\n5. **Apply quality assurance standards** before completion",
        "subsections": []
      },
      {
        "level": 3,
        "title": "When Making Decisions:",
        "content": "1. **Check Core Principles** for architectural guidance\n2. **Reference Common Patterns** for project-specific approaches\n3. **Consider existing implementations** in feature summaries\n4. **Follow established workflows** in Development Workflow",
        "subsections": []
      },
      {
        "level": 3,
        "title": "When Implementing Code:",
        "content": "1. **Use language-specific guides** for coding standards\n2. **Apply domain-specific patterns** for specialized tasks\n3. **Include comprehensive testing** following testing guides\n4. **Follow error handling patterns** from all guides",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Quality Standards",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Documentation Quality",
        "content": "- All documents include AI metadata and validation rules\n- Comprehensive code generation hints and examples\n- Clear cross-references and dependency mapping\n- Consistent formatting and organization",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Implementation Quality",
        "content": "- Follow established patterns and standards\n- Include proper error handling and validation\n- Comprehensive testing coverage\n- Proper documentation and comments",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Process Quality",
        "content": "- Follow Git workflow and branching strategy\n- Complete code review process\n- Pass all CI/CD validation steps\n- Update documentation with changes",
        "subsections": []
      },
      {
        "level": 2,
        "title": "AI Tool Optimization Features",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Enhanced Searchability",
        "content": "- **Keywords**: Each document includes relevant search terms\n- **Semantic Tags**: Documents tagged with concepts and patterns\n- **Cross-References**: Bidirectional linking between related content\n- **Metadata**: Consistent structure for AI tool parsing",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Code Generation Support",
        "content": "- **Specific File Paths**: Exact references to codebase structure\n- **Implementation Hints**: Clear guidance for code generation\n- **Pattern Examples**: Concrete examples from existing codebase\n- **Validation Rules**: Quality standards for generated code",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Context Awareness",
        "content": "- **Dependency Mapping**: Clear relationships between documents\n- **Priority Systems**: Guidance on what to focus on first\n- **Decision Frameworks**: Structured approaches to common problems\n- **Error Handling**: Consistent patterns for troubleshooting",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Quick Access Tools",
        "content": "- **AI Quick Reference**: Essential patterns for immediate use\n- **Search Index**: Comprehensive mapping of queries to documentation\n- **Optimization Guide**: Detailed patterns for AI tool consumption\n- **Usage Guide**: Comprehensive instructions for AI tools\n- **Configuration File**: Structured data for programmatic access",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Maintenance Tools",
        "content": "- **Health Check Script**: Automated validation of documentation quality\n- **Update Script**: Automated maintenance of documentation patterns\n- **Version Tracking**: Consistent template versioning across all documents",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Maintenance",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Regular Updates",
        "content": "- Review and update guides as patterns evolve\n- Add new patterns based on project experience\n- Update feature documentation as modules are completed\n- Maintain cross-reference accuracy",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Automated Maintenance",
        "content": "- **Health Checks**: Run `python scripts/health_check.py` to validate documentation\n- **Updates**: Run `python scripts/update_documentation.py --update-all` to maintain consistency\n- **Path Testing**: Run `python scripts/test_paths.py` to verify system structure\n- **Configuration**: Use `ai_config.json` for programmatic access to documentation structure\n- **Reports**: Check `outputs/` directory for AI-consumable reports and statistics",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Version Control",
        "content": "- Track changes to documentation standards\n- Maintain backward compatibility where possible\n- Version major changes to templates and guides\n- Archive deprecated patterns\n\n---\n\n**AI Quality Checklist**: Before using this documentation system, ensure:\n- [x] Task type is identified and appropriate guide is selected\n- [x] Validation rules are understood and followed\n- [x] Code generation hints are applied for implementation\n- [x] Quality assurance standards are met\n- [x] Documentation is updated with any changes\n- [x] Cross-references are maintained and accurate\n- [x] Search optimization features are utilized\n- [x] Context awareness is maintained throughout the process\n- [x] Health check script is run regularly\n- [x] Update script is used for maintenance\n- [x] AI scripts follow established development patterns\n- [x] Generated reports include both human and machine-readable formats\n- [x] Error handling is comprehensive with actionable recommendations\n- [x] Linting compliance is maintained across all scripts",
        "subsections": []
      },
      {
        "level": 2,
        "title": "üõ†Ô∏è Tools and Scripts",
        "content": "- **[Health Check Script](scripts/health_check.py)** - Validates AI documentation quality and completeness\n- **[Update Script](scripts/update_documentation.py)** - Updates metadata and maintains consistency\n- **[Test Paths Script](scripts/test_paths.py)** - Tests path resolution and system structure\n- **[AI Configuration](ai_config.json)** - Structured configuration for AI tools\n- **[Search Index](search_index.json.replace(\".json\", \".json\"))** - Comprehensive search index for quick navigation\n- **[Quick Reference](ai_quick_reference.json.replace(\".json\", \".json\"))** - Immediate access to common patterns and templates",
        "subsections": []
      },
      {
        "level": 3,
        "title": "üìä AI-Consumable Reports",
        "content": "- **[Health Check Results](outputs/health_check/healthcheck-result.json.replace(\".json\", \".json\"))** - Documentation validation status\n- **[Update Results](outputs/updates/update-results.json.replace(\".json\", \".json\"))** - Maintenance operation results\n- **[Test Results](outputs/test_results/path-test-results.json.replace(\".json\", \".json\"))** - System structure validation\n- **[JSON Data](outputs/)** - Machine-readable reports for programmatic analysis",
        "subsections": []
      }
    ],
    "code_blocks": [
      {
        "language": "bash",
        "code": "# 1. Check existing patterns\nüìñ FastAPI Development Guide ‚Üí API endpoint patterns\nüìñ Database Management Guide ‚Üí Data model patterns\nüìñ Python Testing Guide ‚Üí Test implementation\n\n# 2. Follow development workflow\nüìñ Development Workflow ‚Üí Git workflow and testing\nüìñ Python Style Guide ‚Üí Code organization\n\n# 3. Update documentation\nüìñ Feature Template ‚Üí Document the new feature"
      },
      {
        "language": "bash",
        "code": "# 1. Reference frontend patterns\nüìñ Frontend Style Guide ‚Üí Component structure and styling\nüìñ Core Principles ‚Üí Design decisions\n\n# 2. Follow testing patterns\nüìñ Python Testing Guide ‚Üí Test organization (applies to frontend too)\n\n# 3. Update feature documentation\nüìñ Feature Template ‚Üí Document UI changes"
      },
      {
        "language": "bash",
        "code": "# 1. Use shell patterns\nüìñ Shell Style Guide ‚Üí Script structure and error handling\nüìñ Core Principles ‚Üí Error handling decisions\n\n# 2. Follow deployment workflow\nüìñ Development Workflow ‚Üí CI/CD integration\n\n# 3. Document automation\nüìñ Feature Template ‚Üí Document automation features"
      },
      {
        "language": "text",
        "code": "Core Principles ‚Üí Language/Domain Guides ‚Üí Project Context ‚Üí Feature Documentation"
      },
      {
        "language": "text",
        "code": "Feature Template ‚Üí Language Guides ‚Üí Testing Guide ‚Üí Development Workflow"
      },
      {
        "language": "text",
        "code": "Validation Rules ‚Üí Testing Standards ‚Üí Code Review ‚Üí Deployment"
      }
    ],
    "links": [
      {
        "type": "markdown",
        "text": "Core Principles",
        "url": "guide_docs/Core%20Principles.md"
      },
      {
        "type": "markdown",
        "text": "Code Review Patterns",
        "url": "guide_docs/Code%20Review%20Patterns.md"
      },
      {
        "type": "markdown",
        "text": "AI Tool Optimization Guide",
        "url": "guide_docs/AI%20Tool%20Optimization%20Guide.md"
      },
      {
        "type": "markdown",
        "text": "Python Style Guide",
        "url": "guide_docs/Language-Specific/Python%20Style%20Guide.md"
      },
      {
        "type": "markdown",
        "text": "FastAPI Development Guide",
        "url": "guide_docs/Language-Specific/FastAPI%20Development%20Guide.md"
      },
      {
        "type": "markdown",
        "text": "Python Testing Guide",
        "url": "guide_docs/Language-Specific/Python%20Testing%20Guide.md"
      },
      {
        "type": "markdown",
        "text": "Database Management Guide",
        "url": "guide_docs/Domain-Specific/Database%20Management%20Guide.md"
      },
      {
        "type": "markdown",
        "text": "Web Scraping Patterns",
        "url": "guide_docs/Domain-Specific/Web%20Scraping%20Patterns.md"
      },
      {
        "type": "markdown",
        "text": "Frontend Style Guide",
        "url": "guide_docs/Domain-Specific/Frontend%20Style%20Guide.md"
      },
      {
        "type": "markdown",
        "text": "Shell Style Guide",
        "url": "guide_docs/Domain-Specific/Shell%20Style%20Guide.md"
      },
      {
        "type": "markdown",
        "text": "Feature Template",
        "url": "guide_docs/Feature Template.md"
      },
      {
        "type": "markdown",
        "text": "Architecture Overview",
        "url": "project_context/Architecture%20Overview.md"
      },
      {
        "type": "markdown",
        "text": "Common Patterns",
        "url": "project_context/Common%20Patterns.md"
      },
      {
        "type": "markdown",
        "text": "Development Workflow",
        "url": "project_context/Development%20Workflow.md"
      },
      {
        "type": "markdown",
        "text": "AI Quick Reference",
        "url": "ai_quick_reference.md"
      },
      {
        "type": "markdown",
        "text": "Search Index",
        "url": "search_index.md"
      },
      {
        "type": "markdown",
        "text": "AI Tool Optimization Guide",
        "url": "guide_docs/AI%20Tool%20Optimization%20Guide.md"
      },
      {
        "type": "markdown",
        "text": "AI Tool Usage Guide",
        "url": "ai_usage_guide.md"
      },
      {
        "type": "markdown",
        "text": "AI Configuration",
        "url": "ai_config.json"
      },
      {
        "type": "markdown",
        "text": "Health Check Script",
        "url": "scripts/health_check.py"
      },
      {
        "type": "markdown",
        "text": "Update Script",
        "url": "scripts/update_documentation.py"
      },
      {
        "type": "markdown",
        "text": "Test Paths Script",
        "url": "scripts/test_paths.py"
      },
      {
        "type": "markdown",
        "text": "Version Tracking",
        "url": "ai_config.json"
      },
      {
        "type": "markdown",
        "text": "Health Check Results",
        "url": "outputs/health_check/healthcheck-result.md"
      },
      {
        "type": "markdown",
        "text": "Update Results",
        "url": "outputs/updates/update-results.md"
      },
      {
        "type": "markdown",
        "text": "Test Results",
        "url": "outputs/test_results/path-test-results.md"
      },
      {
        "type": "markdown",
        "text": "JSON Reports",
        "url": "outputs/"
      },
      {
        "type": "markdown",
        "text": "Health Check Script",
        "url": "scripts/health_check.py"
      },
      {
        "type": "markdown",
        "text": "Update Script",
        "url": "scripts/update_documentation.py"
      },
      {
        "type": "markdown",
        "text": "Test Paths Script",
        "url": "scripts/test_paths.py"
      },
      {
        "type": "markdown",
        "text": "AI Configuration",
        "url": "ai_config.json"
      },
      {
        "type": "markdown",
        "text": "Search Index",
        "url": "search_index.md"
      },
      {
        "type": "markdown",
        "text": "Quick Reference",
        "url": "ai_quick_reference.md"
      },
      {
        "type": "markdown",
        "text": "Health Check Results",
        "url": "outputs/health_check/healthcheck-result.md"
      },
      {
        "type": "markdown",
        "text": "Update Results",
        "url": "outputs/updates/update-results.md"
      },
      {
        "type": "markdown",
        "text": "Test Results",
        "url": "outputs/test_results/path-test-results.md"
      },
      {
        "type": "markdown",
        "text": "JSON Data",
        "url": "outputs/"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/Feature Template.md"
      },
      {
        "type": "code_reference",
        "text": "project_context/Architecture Overview.md"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/Language-Specific/Python Testing Guide.md"
      },
      {
        "type": "code_reference",
        "text": "bash\n# 1. Check existing patterns\nüìñ FastAPI Development Guide ‚Üí API endpoint patterns\nüìñ Database Management Guide ‚Üí Data model patterns\nüìñ Python Testing Guide ‚Üí Test implementation\n\n# 2. Follow development workflow\nüìñ Development Workflow ‚Üí Git workflow and testing\nüìñ Python Style Guide ‚Üí Code organization\n\n# 3. Update documentation\nüìñ Feature Template ‚Üí Document the new feature\n"
      },
      {
        "type": "code_reference",
        "text": "bash\n# 1. Reference frontend patterns\nüìñ Frontend Style Guide ‚Üí Component structure and styling\nüìñ Core Principles ‚Üí Design decisions\n\n# 2. Follow testing patterns\nüìñ Python Testing Guide ‚Üí Test organization (applies to frontend too)\n\n# 3. Update feature documentation\nüìñ Feature Template ‚Üí Document UI changes\n"
      },
      {
        "type": "code_reference",
        "text": "bash\n# 1. Use shell patterns\nüìñ Shell Style Guide ‚Üí Script structure and error handling\nüìñ Core Principles ‚Üí Error handling decisions\n\n# 2. Follow deployment workflow\nüìñ Development Workflow ‚Üí CI/CD integration\n\n# 3. Document automation\nüìñ Feature Template ‚Üí Document automation features\n"
      },
      {
        "type": "code_reference",
        "text": "\n\n## AI Assistant Guidelines\n\n### When Starting a New Task:\n1. **Identify the task type** (API, UI, automation, etc.)\n2. **Reference the appropriate guide** from the navigation index\n3. **Follow the validation rules** specified in each guide\n4. **Use the code generation hints** for implementation\n5. **Apply quality assurance standards** before completion\n\n### When Making Decisions:\n1. **Check Core Principles** for architectural guidance\n2. **Reference Common Patterns** for project-specific approaches\n3. **Consider existing implementations** in feature summaries\n4. **Follow established workflows** in Development Workflow\n\n### When Implementing Code:\n1. **Use language-specific guides** for coding standards\n2. **Apply domain-specific patterns** for specialized tasks\n3. **Include comprehensive testing** following testing guides\n4. **Follow error handling patterns** from all guides\n\n## Quality Standards\n\n### Documentation Quality\n- All documents include AI metadata and validation rules\n- Comprehensive code generation hints and examples\n- Clear cross-references and dependency mapping\n- Consistent formatting and organization\n\n### Implementation Quality\n- Follow established patterns and standards\n- Include proper error handling and validation\n- Comprehensive testing coverage\n- Proper documentation and comments\n\n### Process Quality\n- Follow Git workflow and branching strategy\n- Complete code review process\n- Pass all CI/CD validation steps\n- Update documentation with changes\n\n## AI Tool Optimization Features\n\n### Enhanced Searchability\n- **Keywords**: Each document includes relevant search terms\n- **Semantic Tags**: Documents tagged with concepts and patterns\n- **Cross-References**: Bidirectional linking between related content\n- **Metadata**: Consistent structure for AI tool parsing\n\n### Code Generation Support\n- **Specific File Paths**: Exact references to codebase structure\n- **Implementation Hints**: Clear guidance for code generation\n- **Pattern Examples**: Concrete examples from existing codebase\n- **Validation Rules**: Quality standards for generated code\n\n### Context Awareness\n- **Dependency Mapping**: Clear relationships between documents\n- **Priority Systems**: Guidance on what to focus on first\n- **Decision Frameworks**: Structured approaches to common problems\n- **Error Handling**: Consistent patterns for troubleshooting\n\n### Quick Access Tools\n- **AI Quick Reference**: Essential patterns for immediate use\n- **Search Index**: Comprehensive mapping of queries to documentation\n- **Optimization Guide**: Detailed patterns for AI tool consumption\n- **Usage Guide**: Comprehensive instructions for AI tools\n- **Configuration File**: Structured data for programmatic access\n\n### Maintenance Tools\n- **Health Check Script**: Automated validation of documentation quality\n- **Update Script**: Automated maintenance of documentation patterns\n- **Version Tracking**: Consistent template versioning across all documents\n\n## Maintenance\n\n### Regular Updates\n- Review and update guides as patterns evolve\n- Add new patterns based on project experience\n- Update feature documentation as modules are completed\n- Maintain cross-reference accuracy\n\n### Automated Maintenance\n- **Health Checks**: Run "
      }
    ],
    "raw_content": "# AI Documentation System\n\n> This is the main documentation hub for AI tools working with this project. It provides comprehensive guidance, patterns, and tools for effective AI-assisted development.\n\n## AI Metadata\n\n**Template Version:** 2.1\n**AI Processing Level:** High\n**Required Context:** Full project documentation ecosystem\n**Validation Required:** Yes\n**Code Generation:** Supported\n**Search Optimization:** Enhanced\n\n**Dependencies:** All documentation in this folder structure\n**Cross-References:** Comprehensive linking between all documents\n**Keywords:** AI assistance, code generation, development patterns, architecture, testing, deployment\n\n**AI Tool Optimizations:**\n- **Semantic Search**: All documents include relevant keywords and concepts\n- **Structured Metadata**: Consistent metadata format across all files\n- **Cross-Reference System**: Bidirectional linking between related documents\n- **Code Generation Hints**: Specific guidance for implementation\n- **Validation Rules**: Clear quality standards for each document type\n\n## Quick Reference\n\n### üöÄ Getting Started\n- **New Feature Development**: Start with `guide_docs/Feature Template.md`\n- **Code Implementation**: Reference language-specific guides in `guide_docs/Language-Specific/`\n- **Architecture Decisions**: Check `project_context/Architecture Overview.md`\n- **Testing Strategy**: Use `guide_docs/Language-Specific/Python Testing Guide.md`\n\n### üìã Common Tasks\n- **API Development**: FastAPI Guide + Database Guide + Testing Guide\n- **Frontend Components**: Frontend Style Guide + React patterns\n- **Shell Scripts**: Shell Style Guide + automation patterns\n- **Database Changes**: Database Management Guide + Migration patterns\n- **Deployment**: Development Workflow + CI/CD patterns\n\n### üîç Document Types\n- **Plans** (`features/plans/`): Implementation plans for new features\n- **Summaries** (`features/summaries/`): Documentation of completed modules\n- **Guides** (`guide_docs/`): Reusable patterns and standards\n- **Context** (`project_context/`): Project-specific architecture and patterns\n\n## Navigation Index\n\n### üìÅ Guide Documentation (`guide_docs/`)\n**Purpose**: Reusable patterns, standards, and best practices\n\n#### Core Principles\n- **[Core Principles](guide_docs/Core%20Principles.md)** - Decision-making frameworks and architectural principles\n- **[Code Review Patterns](guide_docs/Code%20Review%20Patterns.md)** - How to structure suggestions and handle conflicts\n- **[AI Tool Optimization Guide](guide_docs/AI%20Tool%20Optimization%20Guide.md)** - Patterns for optimizing AI tool consumption\n\n#### Language-Specific Guides\n- **[Python Style Guide](guide_docs/Language-Specific/Python%20Style%20Guide.md)** - Python coding standards and patterns\n- **[FastAPI Development Guide](guide_docs/Language-Specific/FastAPI%20Development%20Guide.md)** - FastAPI best practices and patterns\n- **[Python Testing Guide](guide_docs/Language-Specific/Python%20Testing%20Guide.md)** - Testing strategies and patterns\n\n#### Domain-Specific Guides\n- **[Database Management Guide](guide_docs/Domain-Specific/Database%20Management%20Guide.md)** - Database patterns and migration strategies\n- **[Web Scraping Patterns](guide_docs/Domain-Specific/Web%20Scraping%20Patterns.md)** - Web scraping best practices\n- **[Frontend Style Guide](guide_docs/Domain-Specific/Frontend%20Style%20Guide.md)** - React/TypeScript development standards\n- **[Shell Style Guide](guide_docs/Domain-Specific/Shell%20Style%20Guide.md)** - Bash scripting and automation patterns\n\n#### Templates\n- **[Feature Template](guide_docs/Feature Template.md)** - Standardized feature development template\n\n### üìÅ Project Context (`project_context/`)\n**Purpose**: Project-specific architecture, patterns, and context\n\n- **[Architecture Overview](project_context/Architecture%20Overview.md)** - System architecture and component relationships\n- **[Common Patterns](project_context/Common%20Patterns.md)** - Project-specific implementation patterns\n- **[Development Workflow](project_context/Development%20Workflow.md)** - Git workflow, CI/CD, and deployment procedures\n\n### üìÅ Feature Documentation (`features/`)\n**Purpose**: Feature implementation plans and completed module documentation\n\n#### Plans (`features/plans/`)\n- **[IN-PROGRESS] Stock Tracking Request Plan](features/plans/[IN-PROGRESS]-Stock%20Tracking%20Request%20Plan.md)** - Active implementation plan\n\n#### Summaries (`features/summaries/`)\n- **[COMPLETED] Stock Data Processing Pipeline](features/summaries/[COMPLETED]-stock_data_processing_pipeline_summary.md)** - Completed module documentation\n\n### üìÅ AI Optimization Tools\n**Purpose**: Enhanced AI tool consumption and navigation\n\n- **[AI Quick Reference](ai_quick_reference.md)** - Essential patterns and navigation for immediate use\n- **[Search Index](search_index.md)** - Comprehensive search index for quick navigation\n- **[AI Tool Optimization Guide](guide_docs/AI%20Tool%20Optimization%20Guide.md)** - Detailed optimization patterns\n- **[AI Tool Usage Guide](ai_usage_guide.md)** - Comprehensive guide for AI tools\n- **[AI Configuration](ai_config.json)** - Structured configuration for AI tools\n\n### üìÅ Maintenance Tools\n**Purpose**: Tools for maintaining and validating AI documentation\n\n- **[Health Check Script](scripts/health_check.py)** - Validates AI documentation quality and completeness\n- **[Update Script](scripts/update_documentation.py)** - Updates metadata and maintains consistency\n- **[Test Paths Script](scripts/test_paths.py)** - Tests path resolution and system structure\n- **[Version Tracking](ai_config.json)** - Consistent template versioning across all documents\n\n### Script Optimization Features\n- **Comprehensive Reporting**: Both human-readable (Markdown) and machine-readable (JSON) outputs\n- **Intelligent Validation**: Smart false-positive detection for links and system components\n- **Error Handling**: Detailed error collection and actionable recommendations\n- **Performance Optimization**: Readability-focused design for maintainability\n- **Linting Compliance**: Full compliance with ruff, mypy, and other linting tools\n- **AI Metadata**: Consistent metadata and cross-references in all generated content\n\n### üìÅ AI-Consumable Reports\n**Purpose**: Structured reports generated by maintenance tools for AI consumption\n\n- **[Health Check Results](outputs/health_check/healthcheck-result.md)** - Comprehensive validation results\n- **[Update Results](outputs/updates/update-results.md)** - Documentation update status and statistics\n- **[Test Results](outputs/test_results/path-test-results.md)** - System structure and path validation\n- **[JSON Reports](outputs/)** - Machine-readable data for programmatic access\n\n## Usage Examples\n\n### Example 1: Implementing a New API Endpoint\n```bash\n# 1. Check existing patterns\nüìñ FastAPI Development Guide ‚Üí API endpoint patterns\nüìñ Database Management Guide ‚Üí Data model patterns\nüìñ Python Testing Guide ‚Üí Test implementation\n\n# 2. Follow development workflow\nüìñ Development Workflow ‚Üí Git workflow and testing\nüìñ Python Style Guide ‚Üí Code organization\n\n# 3. Update documentation\nüìñ Feature Template ‚Üí Document the new feature\n```\n\n### Example 2: Creating a React Component\n```bash\n# 1. Reference frontend patterns\nüìñ Frontend Style Guide ‚Üí Component structure and styling\nüìñ Core Principles ‚Üí Design decisions\n\n# 2. Follow testing patterns\nüìñ Python Testing Guide ‚Üí Test organization (applies to frontend too)\n\n# 3. Update feature documentation\nüìñ Feature Template ‚Üí Document UI changes\n```\n\n### Example 3: Writing a Shell Script\n```bash\n# 1. Use shell patterns\nüìñ Shell Style Guide ‚Üí Script structure and error handling\nüìñ Core Principles ‚Üí Error handling decisions\n\n# 2. Follow deployment workflow\nüìñ Development Workflow ‚Üí CI/CD integration\n\n# 3. Document automation\nüìñ Feature Template ‚Üí Document automation features\n```\n\n## Cross-Reference System\n\n### Decision Flow\n```\nCore Principles ‚Üí Language/Domain Guides ‚Üí Project Context ‚Üí Feature Documentation\n```\n\n### Implementation Flow\n```\nFeature Template ‚Üí Language Guides ‚Üí Testing Guide ‚Üí Development Workflow\n```\n\n### Quality Assurance Flow\n```\nValidation Rules ‚Üí Testing Standards ‚Üí Code Review ‚Üí Deployment\n```\n\n## AI Assistant Guidelines\n\n### When Starting a New Task:\n1. **Identify the task type** (API, UI, automation, etc.)\n2. **Reference the appropriate guide** from the navigation index\n3. **Follow the validation rules** specified in each guide\n4. **Use the code generation hints** for implementation\n5. **Apply quality assurance standards** before completion\n\n### When Making Decisions:\n1. **Check Core Principles** for architectural guidance\n2. **Reference Common Patterns** for project-specific approaches\n3. **Consider existing implementations** in feature summaries\n4. **Follow established workflows** in Development Workflow\n\n### When Implementing Code:\n1. **Use language-specific guides** for coding standards\n2. **Apply domain-specific patterns** for specialized tasks\n3. **Include comprehensive testing** following testing guides\n4. **Follow error handling patterns** from all guides\n\n## Quality Standards\n\n### Documentation Quality\n- All documents include AI metadata and validation rules\n- Comprehensive code generation hints and examples\n- Clear cross-references and dependency mapping\n- Consistent formatting and organization\n\n### Implementation Quality\n- Follow established patterns and standards\n- Include proper error handling and validation\n- Comprehensive testing coverage\n- Proper documentation and comments\n\n### Process Quality\n- Follow Git workflow and branching strategy\n- Complete code review process\n- Pass all CI/CD validation steps\n- Update documentation with changes\n\n## AI Tool Optimization Features\n\n### Enhanced Searchability\n- **Keywords**: Each document includes relevant search terms\n- **Semantic Tags**: Documents tagged with concepts and patterns\n- **Cross-References**: Bidirectional linking between related content\n- **Metadata**: Consistent structure for AI tool parsing\n\n### Code Generation Support\n- **Specific File Paths**: Exact references to codebase structure\n- **Implementation Hints**: Clear guidance for code generation\n- **Pattern Examples**: Concrete examples from existing codebase\n- **Validation Rules**: Quality standards for generated code\n\n### Context Awareness\n- **Dependency Mapping**: Clear relationships between documents\n- **Priority Systems**: Guidance on what to focus on first\n- **Decision Frameworks**: Structured approaches to common problems\n- **Error Handling**: Consistent patterns for troubleshooting\n\n### Quick Access Tools\n- **AI Quick Reference**: Essential patterns for immediate use\n- **Search Index**: Comprehensive mapping of queries to documentation\n- **Optimization Guide**: Detailed patterns for AI tool consumption\n- **Usage Guide**: Comprehensive instructions for AI tools\n- **Configuration File**: Structured data for programmatic access\n\n### Maintenance Tools\n- **Health Check Script**: Automated validation of documentation quality\n- **Update Script**: Automated maintenance of documentation patterns\n- **Version Tracking**: Consistent template versioning across all documents\n\n## Maintenance\n\n### Regular Updates\n- Review and update guides as patterns evolve\n- Add new patterns based on project experience\n- Update feature documentation as modules are completed\n- Maintain cross-reference accuracy\n\n### Automated Maintenance\n- **Health Checks**: Run `python scripts/health_check.py` to validate documentation\n- **Updates**: Run `python scripts/update_documentation.py --update-all` to maintain consistency\n- **Path Testing**: Run `python scripts/test_paths.py` to verify system structure\n- **Configuration**: Use `ai_config.json` for programmatic access to documentation structure\n- **Reports**: Check `outputs/` directory for AI-consumable reports and statistics\n\n### Version Control\n- Track changes to documentation standards\n- Maintain backward compatibility where possible\n- Version major changes to templates and guides\n- Archive deprecated patterns\n\n---\n\n**AI Quality Checklist**: Before using this documentation system, ensure:\n- [x] Task type is identified and appropriate guide is selected\n- [x] Validation rules are understood and followed\n- [x] Code generation hints are applied for implementation\n- [x] Quality assurance standards are met\n- [x] Documentation is updated with any changes\n- [x] Cross-references are maintained and accurate\n- [x] Search optimization features are utilized\n- [x] Context awareness is maintained throughout the process\n- [x] Health check script is run regularly\n- [x] Update script is used for maintenance\n- [x] AI scripts follow established development patterns\n- [x] Generated reports include both human and machine-readable formats\n- [x] Error handling is comprehensive with actionable recommendations\n- [x] Linting compliance is maintained across all scripts\n\n## üõ†Ô∏è Tools and Scripts\n\n- **[Health Check Script](scripts/health_check.py)** - Validates AI documentation quality and completeness\n- **[Update Script](scripts/update_documentation.py)** - Updates metadata and maintains consistency\n- **[Test Paths Script](scripts/test_paths.py)** - Tests path resolution and system structure\n- **[AI Configuration](ai_config.json)** - Structured configuration for AI tools\n- **[Search Index](search_index.md)** - Comprehensive search index for quick navigation\n- **[Quick Reference](ai_quick_reference.md)** - Immediate access to common patterns and templates\n\n### üìä AI-Consumable Reports\n- **[Health Check Results](outputs/health_check/healthcheck-result.md)** - Documentation validation status\n- **[Update Results](outputs/updates/update-results.md)** - Maintenance operation results\n- **[Test Results](outputs/test_results/path-test-results.md)** - System structure validation\n- **[JSON Data](outputs/)** - Machine-readable reports for programmatic analysis\n"
  },
  "cross_references": [
    {
      "title": "Core Principles",
      "path": "guide_docs/Core%20Principles.json",
      "type": "guide",
      "relevance": "high"
    },
    {
      "title": "Code Review Patterns",
      "path": "guide_docs/Code%20Review%20Patterns.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "AI Tool Optimization Guide",
      "path": "guide_docs/AI%20Tool%20Optimization%20Guide.json",
      "type": "guide",
      "relevance": "high"
    },
    {
      "title": "Python Style Guide",
      "path": "guide_docs/Language-Specific/Python%20Style%20Guide.json",
      "type": "guide",
      "relevance": "high"
    },
    {
      "title": "FastAPI Development Guide",
      "path": "guide_docs/Language-Specific/FastAPI%20Development%20Guide.json",
      "type": "guide",
      "relevance": "high"
    },
    {
      "title": "Python Testing Guide",
      "path": "guide_docs/Language-Specific/Python%20Testing%20Guide.json",
      "type": "guide",
      "relevance": "high"
    },
    {
      "title": "Database Management Guide",
      "path": "guide_docs/Domain-Specific/Database%20Management%20Guide.json",
      "type": "guide",
      "relevance": "high"
    },
    {
      "title": "Web Scraping Patterns",
      "path": "guide_docs/Domain-Specific/Web%20Scraping%20Patterns.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "Frontend Style Guide",
      "path": "guide_docs/Domain-Specific/Frontend%20Style%20Guide.json",
      "type": "guide",
      "relevance": "high"
    },
    {
      "title": "Shell Style Guide",
      "path": "guide_docs/Domain-Specific/Shell%20Style%20Guide.json",
      "type": "guide",
      "relevance": "high"
    },
    {
      "title": "Feature Template",
      "path": "guide_docs/Feature Template.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "Architecture Overview",
      "path": "project_context/Architecture%20Overview.json",
      "type": "context",
      "relevance": "medium"
    },
    {
      "title": "Common Patterns",
      "path": "project_context/Common%20Patterns.json",
      "type": "context",
      "relevance": "medium"
    },
    {
      "title": "Development Workflow",
      "path": "project_context/Development%20Workflow.json",
      "type": "context",
      "relevance": "medium"
    },
    {
      "title": "AI Quick Reference",
      "path": "ai_quick_reference.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "Search Index",
      "path": "search_index.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "AI Tool Optimization Guide",
      "path": "guide_docs/AI%20Tool%20Optimization%20Guide.json",
      "type": "guide",
      "relevance": "high"
    },
    {
      "title": "AI Tool Usage Guide",
      "path": "ai_usage_guide.json",
      "type": "guide",
      "relevance": "high"
    },
    {
      "title": "AI Configuration",
      "path": "ai_config.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "Health Check Script",
      "path": "scripts/health_check.py",
      "type": "script",
      "relevance": "medium"
    },
    {
      "title": "Update Script",
      "path": "scripts/update_documentation.py",
      "type": "script",
      "relevance": "medium"
    },
    {
      "title": "Test Paths Script",
      "path": "scripts/test_paths.py",
      "type": "script",
      "relevance": "medium"
    },
    {
      "title": "Version Tracking",
      "path": "ai_config.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "Health Check Results",
      "path": "outputs/health_check/healthcheck-result.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "Update Results",
      "path": "outputs/updates/update-results.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "Test Results",
      "path": "outputs/test_results/path-test-results.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "JSON Reports",
      "path": "outputs/",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "Health Check Script",
      "path": "scripts/health_check.py",
      "type": "script",
      "relevance": "medium"
    },
    {
      "title": "Update Script",
      "path": "scripts/update_documentation.py",
      "type": "script",
      "relevance": "medium"
    },
    {
      "title": "Test Paths Script",
      "path": "scripts/test_paths.py",
      "type": "script",
      "relevance": "medium"
    },
    {
      "title": "AI Configuration",
      "path": "ai_config.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "Search Index",
      "path": "search_index.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "Quick Reference",
      "path": "ai_quick_reference.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "Health Check Results",
      "path": "outputs/health_check/healthcheck-result.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "Update Results",
      "path": "outputs/updates/update-results.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "Test Results",
      "path": "outputs/test_results/path-test-results.json",
      "type": "guide",
      "relevance": "medium"
    },
    {
      "title": "JSON Data",
      "path": "outputs/",
      "type": "guide",
      "relevance": "medium"
    }
  ],
  "code_generation_hints": [],
  "validation_rules": [],
  "optimization": {
    "version": "1.0",
    "optimized_at": "2025-06-18T19:19:47.723324",
    "improvements": [
      "fixed_file_references",
      "extracted_ai_metadata",
      "structured_cross_references",
      "extracted_code_hints",
      "structured_validation_rules"
    ],
    "literal_strings_cleaned": true,
    "cleaned_at": "2025-06-18T19:30:00.000000"
  }
}