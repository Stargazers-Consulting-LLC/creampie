{
  "ai_metadata": {
    "purpose": "",
    "last_updated": "",
    "template_version": "2.1",
    "ai_tool_compatibility": "",
    "ai_processing_level": "High",
    "required_context": "Basic project understanding",
    "validation_required": "Yes",
    "code_generation": "Supported",
    "cross_references": [],
    "maintenance": ""
  },
  "file_info": {
    "file_path": "ai_quick_reference.md",
    "original_format": "markdown",
    "converted_at": "2025-06-18T19:14:30.243526",
    "file_size": 7529,
    "line_count": 207,
    "optimized_at": "2025-06-18T19:19:47.724895",
    "optimization_version": "1.0"
  },
  "content": {
    "sections": [
      {
        "level": 1,
        "title": "AI Quick Reference",
        "content": "> This quick reference provides immediate access to common patterns, templates, and best practices for AI-assisted development. Use this for rapid implementation guidance.",
        "subsections": []
      },
      {
        "level": 2,
        "title": "AI Metadata",
        "content": "**Template Version:** 2.1\n**AI Processing Level:** High\n**Required Context:** Basic project understanding\n**Validation Required:** Yes\n**Code Generation:** Supported\n**Search Optimization:** Enhanced\n\n**Keywords:** quick reference, patterns, navigation, decision making, code generation",
        "subsections": []
      },
      {
        "level": 2,
        "title": "üöÄ Immediate Actions",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "User Request ‚Üí Guide Selection",
        "content": "- **\"Code review\"** ‚Üí `guide_docs/Code Review Patterns.json.replace(\".json\", \".json\")` + Language guides\n- **\"New feature\"** ‚Üí `guide_docs/Feature Template.json.replace(\".json\", \".json\")` + Architecture Overview\n- **\"Fix error\"** ‚Üí `guide_docs/Core Principles.json.replace(\".json\", \".json\")` + Language guides\n- **\"Optimize\"** ‚Üí `guide_docs/Core Principles.json.replace(\".json\", \".json\")` + Performance patterns\n- **\"Best practice\"** ‚Üí `guide_docs/Core Principles.json.replace(\".json\", \".json\")` + Domain guides",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Priority System (Always Apply)",
        "content": "1. **Critical**: Security, data integrity, breaking changes\n2. **High**: Style violations, performance, maintainability\n3. **Medium**: Code organization, documentation, optimizations\n4. **Low**: Preferences, cosmetics, future-proofing",
        "subsections": []
      },
      {
        "level": 2,
        "title": "üìÅ Essential Navigation",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Core Documents",
        "content": "- **Decision Framework**: `guide_docs/Core Principles.json.replace(\".json\", \".json\")`\n- **Architecture**: `project_context/Architecture Overview.json.replace(\".json\", \".json\")`\n- **Patterns**: `project_context/Common Patterns.json.replace(\".json\", \".json\")`\n- **Workflow**: `project_context/Development Workflow.json.replace(\".json\", \".json\")`",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Language Guides",
        "content": "- **Python**: `guide_docs/Language-Specific/Python Style Guide.json.replace(\".json\", \".json\")`\n- **FastAPI**: `guide_docs/Language-Specific/FastAPI Development Guide.json.replace(\".json\", \".json\")`\n- **Testing**: `guide_docs/Language-Specific/Python Testing Guide.json.replace(\".json\", \".json\")`",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Domain Guides",
        "content": "- **Database**: `guide_docs/Domain-Specific/Database Management Guide.json.replace(\".json\", \".json\")`\n- **Frontend**: `guide_docs/Domain-Specific/Frontend Style Guide.json.replace(\".json\", \".json\")`\n- **Web Scraping**: `guide_docs/Domain-Specific/Web Scraping Patterns.json.replace(\".json\", \".json\")`\n- **Shell**: `guide_docs/Domain-Specific/Shell Style Guide.json.replace(\".json\", \".json\")`",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Templates & Tools",
        "content": "- **Feature Template**: `guide_docs/Feature Template.json.replace(\".json\", \".json\")`\n- **Search Index**: `search_index.json.replace(\".json\", \".json\")`\n- **AI Optimization**: `guide_docs/AI Tool Optimization Guide.json.replace(\".json\", \".json\")`",
        "subsections": []
      },
      {
        "level": 2,
        "title": "üîß Common Patterns",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Code Generation Hints Format",
        "content": "```markdown\n[Specific implementation guidance]\n[How to verify correctness]\n```",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Error Handling Pattern",
        "content": "```python\ntry:\n    # Operation\n    result = perform_operation()\nexcept SpecificError as e:\n    # Handle specific error\n    logger.error(f\"Specific error: {e}\")\n    raise CustomError(\"User-friendly message\")\nexcept Exception as e:\n    # Handle unexpected errors\n    logger.error(f\"Unexpected error: {e}\")\n    raise GeneralError(\"Something went wrong\")\n```",
        "subsections": []
      },
      {
        "level": 3,
        "title": "API Endpoint Pattern",
        "content": "```python\n@router.post(\"/endpoint\")\n@requires_auth\nasync def endpoint_name(\n    request: RequestSchema,\n    current_user: AppUser = Depends(get_current_user)\n) -> ResponseSchema:\n    try:\n        # Business logic\n        result = await process_request(request, current_user)\n        return ResponseSchema(data=result)\n    except ValidationError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n    except NotFoundError as e:\n        raise HTTPException(status_code=404, detail=str(e))\n```",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Database Model Pattern",
        "content": "```python\nclass ModelName(Base):\n    __tablename__ = \"table_name\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    # Relationships\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    user = relationship(\"AppUser\", back_populates=\"models\")\n```",
        "subsections": []
      },
      {
        "level": 2,
        "title": "üéØ Decision Frameworks",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "When to Refactor vs. New Code",
        "content": "- **Refactor**: Existing code with style violations, minor bugs, improvements\n- **New Code**: Feature doesn't exist, major architectural changes, explicit request",
        "subsections": []
      },
      {
        "level": 3,
        "title": "When to Be Strict vs. Flexible",
        "content": "- **Strict**: Security, data integrity, critical business logic, project patterns\n- **Flexible**: Style preferences, minor optimizations, personal habits",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Context Awareness",
        "content": "- **File context**: What file they're working in\n- **Task context**: What they're trying to accomplish\n- **Project context**: Overall architecture and constraints\n- **User context**: Experience level and preferences",
        "subsections": []
      },
      {
        "level": 2,
        "title": "üìã Quality Checklist",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Before Providing Code",
        "content": "- [ ] Check Core Principles for decision framework\n- [ ] Reference appropriate language/domain guides\n- [ ] Include proper error handling\n- [ ] Follow project naming conventions\n- [ ] Add validation and testing considerations\n- [ ] Consider performance implications\n- [ ] Apply security best practices",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Before Making Suggestions",
        "content": "- [ ] Understand user's current context\n- [ ] Identify appropriate priority level\n- [ ] Reference existing patterns\n- [ ] Explain reasoning clearly\n- [ ] Provide actionable guidance\n- [ ] Consider user's experience level",
        "subsections": []
      },
      {
        "level": 2,
        "title": "üîç Quick Search",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "By Technology",
        "content": "- **Python**: `guide_docs/Language-Specific/Python Style Guide.json.replace(\".json\", \".json\")`\n- **FastAPI**: `guide_docs/Language-Specific/FastAPI Development Guide.json.replace(\".json\", \".json\")`\n- **React**: `guide_docs/Domain-Specific/Frontend Style Guide.json.replace(\".json\", \".json\")`\n- **Database**: `guide_docs/Domain-Specific/Database Management Guide.json.replace(\".json\", \".json\")`",
        "subsections": []
      },
      {
        "level": 3,
        "title": "By Problem Type",
        "content": "- **Performance**: `guide_docs/Core Principles.json.replace(\".json\", \".json\")` ‚Üí Performance section\n- **Security**: `guide_docs/Core Principles.json.replace(\".json\", \".json\")` ‚Üí Security section\n- **Testing**: `guide_docs/Language-Specific/Python Testing Guide.json.replace(\".json\", \".json\")`\n- **Error Handling**: `guide_docs/Core Principles.json.replace(\".json\", \".json\")` ‚Üí Error handling section",
        "subsections": []
      },
      {
        "level": 3,
        "title": "By Task Type",
        "content": "- **API Development**: FastAPI Guide + Database Guide + Testing Guide\n- **Frontend**: Frontend Guide + API integration patterns\n- **Database**: Database Guide + Migration patterns\n- **Automation**: Shell Guide + Background task patterns",
        "subsections": []
      },
      {
        "level": 2,
        "title": "üö® Emergency Patterns",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "When User is Stuck",
        "content": "1. **Acknowledge the issue** - Show understanding\n2. **Ask clarifying questions** - Get more context\n3. **Provide step-by-step guidance** - Break down the problem\n4. **Reference relevant documentation** - Point to specific guides\n5. **Offer alternatives** - Suggest different approaches",
        "subsections": []
      },
      {
        "level": 3,
        "title": "When Guides Conflict",
        "content": "1. **Identify the conflict** - State what's different\n2. **Apply priority system** - Security ‚Üí Project Consistency ‚Üí Performance ‚Üí Style\n3. **Explain trade-offs** - Help user understand implications\n4. **Recommend approach** - Suggest best path forward",
        "subsections": []
      },
      {
        "level": 3,
        "title": "When Code Doesn't Work",
        "content": "1. **Check error messages** - Look for specific issues\n2. **Verify dependencies** - Ensure all imports and setup\n3. **Test assumptions** - Validate expected behavior\n4. **Provide debugging steps** - Help user troubleshoot\n5. **Suggest alternatives** - Offer different approaches",
        "subsections": []
      },
      {
        "level": 2,
        "title": "üìû Communication Patterns",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Positive Feedback",
        "content": "- \"Great approach! This follows our established patterns.\"\n- \"Excellent use of error handling here.\"\n- \"This is exactly the right pattern for this situation.\"",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Constructive Criticism",
        "content": "- \"Consider using [pattern] for better [benefit].\"\n- \"This could be improved by [specific suggestion].\"\n- \"Let's follow our established pattern for [aspect].\"",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Educational Guidance",
        "content": "- \"Here's why we use this pattern: [explanation].\"\n- \"This follows our [principle] because [reasoning].\"\n- \"For future reference, you can find this pattern in [guide].\"\n\n---\n\n**Remember**: Always maintain context awareness, follow established patterns, and prioritize user success over perfect code.",
        "subsections": []
      }
    ],
    "code_blocks": [
      {
        "language": "markdown",
        "code": "[Specific implementation guidance]\n[How to verify correctness]"
      },
      {
        "language": "python",
        "code": "try:\n    # Operation\n    result = perform_operation()\nexcept SpecificError as e:\n    # Handle specific error\n    logger.error(f\"Specific error: {e}\")\n    raise CustomError(\"User-friendly message\")\nexcept Exception as e:\n    # Handle unexpected errors\n    logger.error(f\"Unexpected error: {e}\")\n    raise GeneralError(\"Something went wrong\")"
      },
      {
        "language": "python",
        "code": "@router.post(\"/endpoint\")\n@requires_auth\nasync def endpoint_name(\n    request: RequestSchema,\n    current_user: AppUser = Depends(get_current_user)\n) -> ResponseSchema:\n    try:\n        # Business logic\n        result = await process_request(request, current_user)\n        return ResponseSchema(data=result)\n    except ValidationError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n    except NotFoundError as e:\n        raise HTTPException(status_code=404, detail=str(e))"
      },
      {
        "language": "python",
        "code": "class ModelName(Base):\n    __tablename__ = \"table_name\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    # Relationships\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    user = relationship(\"AppUser\", back_populates=\"models\")"
      }
    ],
    "links": [
      {
        "type": "code_reference",
        "text": "guide_docs/Code Review Patterns.md"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/Feature Template.md"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/Core Principles.md"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/Core Principles.md"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/Core Principles.md"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/Core Principles.md"
      },
      {
        "type": "code_reference",
        "text": "project_context/Architecture Overview.md"
      },
      {
        "type": "code_reference",
        "text": "project_context/Common Patterns.md"
      },
      {
        "type": "code_reference",
        "text": "project_context/Development Workflow.md"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/Language-Specific/Python Style Guide.md"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/Language-Specific/FastAPI Development Guide.md"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/Language-Specific/Python Testing Guide.md"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/Domain-Specific/Database Management Guide.md"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/Domain-Specific/Frontend Style Guide.md"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/Domain-Specific/Web Scraping Patterns.md"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/Domain-Specific/Shell Style Guide.md"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/Feature Template.md"
      },
      {
        "type": "code_reference",
        "text": "search_index.md"
      },
      {
        "type": "code_reference",
        "text": "guide_docs/AI Tool Optimization Guide.md"
      },
      {
        "type": "code_reference",
        "text": "python\ntry:\n    # Operation\n    result = perform_operation()\nexcept SpecificError as e:\n    # Handle specific error\n    logger.error(f\"Specific error: {e}\")\n    raise CustomError(\"User-friendly message\")\nexcept Exception as e:\n    # Handle unexpected errors\n    logger.error(f\"Unexpected error: {e}\")\n    raise GeneralError(\"Something went wrong\")\n"
      },
      {
        "type": "code_reference",
        "text": "python\n@router.post(\"/endpoint\")\n@requires_auth\nasync def endpoint_name(\n    request: RequestSchema,\n    current_user: AppUser = Depends(get_current_user)\n) -> ResponseSchema:\n    try:\n        # Business logic\n        result = await process_request(request, current_user)\n        return ResponseSchema(data=result)\n    except ValidationError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n    except NotFoundError as e:\n        raise HTTPException(status_code=404, detail=str(e))\n"
      },
      {
        "type": "code_reference",
        "text": "python\nclass ModelName(Base):\n    __tablename__ = \"table_name\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    # Relationships\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    user = relationship(\"AppUser\", back_populates=\"models\")\n"
      },
      {
        "type": "code_reference",
        "text": "\n\n## üéØ Decision Frameworks\n\n### When to Refactor vs. New Code\n- **Refactor**: Existing code with style violations, minor bugs, improvements\n- **New Code**: Feature doesn't exist, major architectural changes, explicit request\n\n### When to Be Strict vs. Flexible\n- **Strict**: Security, data integrity, critical business logic, project patterns\n- **Flexible**: Style preferences, minor optimizations, personal habits\n\n### Context Awareness\n- **File context**: What file they're working in\n- **Task context**: What they're trying to accomplish\n- **Project context**: Overall architecture and constraints\n- **User context**: Experience level and preferences\n\n## üìã Quality Checklist\n\n### Before Providing Code\n- [ ] Check Core Principles for decision framework\n- [ ] Reference appropriate language/domain guides\n- [ ] Include proper error handling\n- [ ] Follow project naming conventions\n- [ ] Add validation and testing considerations\n- [ ] Consider performance implications\n- [ ] Apply security best practices\n\n### Before Making Suggestions\n- [ ] Understand user's current context\n- [ ] Identify appropriate priority level\n- [ ] Reference existing patterns\n- [ ] Explain reasoning clearly\n- [ ] Provide actionable guidance\n- [ ] Consider user's experience level\n\n## üîç Quick Search\n\n### By Technology\n- **Python**: "
      }
    ],
    "raw_content": "# AI Quick Reference\n\n> This quick reference provides immediate access to common patterns, templates, and best practices for AI-assisted development. Use this for rapid implementation guidance.\n\n## AI Metadata\n\n**Template Version:** 2.1\n**AI Processing Level:** High\n**Required Context:** Basic project understanding\n**Validation Required:** Yes\n**Code Generation:** Supported\n**Search Optimization:** Enhanced\n\n**Keywords:** quick reference, patterns, navigation, decision making, code generation\n\n## üöÄ Immediate Actions\n\n### User Request ‚Üí Guide Selection\n- **\"Code review\"** ‚Üí `guide_docs/Code Review Patterns.md` + Language guides\n- **\"New feature\"** ‚Üí `guide_docs/Feature Template.md` + Architecture Overview\n- **\"Fix error\"** ‚Üí `guide_docs/Core Principles.md` + Language guides\n- **\"Optimize\"** ‚Üí `guide_docs/Core Principles.md` + Performance patterns\n- **\"Best practice\"** ‚Üí `guide_docs/Core Principles.md` + Domain guides\n\n### Priority System (Always Apply)\n1. **Critical**: Security, data integrity, breaking changes\n2. **High**: Style violations, performance, maintainability\n3. **Medium**: Code organization, documentation, optimizations\n4. **Low**: Preferences, cosmetics, future-proofing\n\n## üìÅ Essential Navigation\n\n### Core Documents\n- **Decision Framework**: `guide_docs/Core Principles.md`\n- **Architecture**: `project_context/Architecture Overview.md`\n- **Patterns**: `project_context/Common Patterns.md`\n- **Workflow**: `project_context/Development Workflow.md`\n\n### Language Guides\n- **Python**: `guide_docs/Language-Specific/Python Style Guide.md`\n- **FastAPI**: `guide_docs/Language-Specific/FastAPI Development Guide.md`\n- **Testing**: `guide_docs/Language-Specific/Python Testing Guide.md`\n\n### Domain Guides\n- **Database**: `guide_docs/Domain-Specific/Database Management Guide.md`\n- **Frontend**: `guide_docs/Domain-Specific/Frontend Style Guide.md`\n- **Web Scraping**: `guide_docs/Domain-Specific/Web Scraping Patterns.md`\n- **Shell**: `guide_docs/Domain-Specific/Shell Style Guide.md`\n\n### Templates & Tools\n- **Feature Template**: `guide_docs/Feature Template.md`\n- **Search Index**: `search_index.md`\n- **AI Optimization**: `guide_docs/AI Tool Optimization Guide.md`\n\n## üîß Common Patterns\n\n### Code Generation Hints Format\n```markdown\n[Specific implementation guidance]\n[How to verify correctness]\n```\n\n### Error Handling Pattern\n```python\ntry:\n    # Operation\n    result = perform_operation()\nexcept SpecificError as e:\n    # Handle specific error\n    logger.error(f\"Specific error: {e}\")\n    raise CustomError(\"User-friendly message\")\nexcept Exception as e:\n    # Handle unexpected errors\n    logger.error(f\"Unexpected error: {e}\")\n    raise GeneralError(\"Something went wrong\")\n```\n\n### API Endpoint Pattern\n```python\n@router.post(\"/endpoint\")\n@requires_auth\nasync def endpoint_name(\n    request: RequestSchema,\n    current_user: AppUser = Depends(get_current_user)\n) -> ResponseSchema:\n    try:\n        # Business logic\n        result = await process_request(request, current_user)\n        return ResponseSchema(data=result)\n    except ValidationError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n    except NotFoundError as e:\n        raise HTTPException(status_code=404, detail=str(e))\n```\n\n### Database Model Pattern\n```python\nclass ModelName(Base):\n    __tablename__ = \"table_name\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    # Relationships\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    user = relationship(\"AppUser\", back_populates=\"models\")\n```\n\n## üéØ Decision Frameworks\n\n### When to Refactor vs. New Code\n- **Refactor**: Existing code with style violations, minor bugs, improvements\n- **New Code**: Feature doesn't exist, major architectural changes, explicit request\n\n### When to Be Strict vs. Flexible\n- **Strict**: Security, data integrity, critical business logic, project patterns\n- **Flexible**: Style preferences, minor optimizations, personal habits\n\n### Context Awareness\n- **File context**: What file they're working in\n- **Task context**: What they're trying to accomplish\n- **Project context**: Overall architecture and constraints\n- **User context**: Experience level and preferences\n\n## üìã Quality Checklist\n\n### Before Providing Code\n- [ ] Check Core Principles for decision framework\n- [ ] Reference appropriate language/domain guides\n- [ ] Include proper error handling\n- [ ] Follow project naming conventions\n- [ ] Add validation and testing considerations\n- [ ] Consider performance implications\n- [ ] Apply security best practices\n\n### Before Making Suggestions\n- [ ] Understand user's current context\n- [ ] Identify appropriate priority level\n- [ ] Reference existing patterns\n- [ ] Explain reasoning clearly\n- [ ] Provide actionable guidance\n- [ ] Consider user's experience level\n\n## üîç Quick Search\n\n### By Technology\n- **Python**: `guide_docs/Language-Specific/Python Style Guide.md`\n- **FastAPI**: `guide_docs/Language-Specific/FastAPI Development Guide.md`\n- **React**: `guide_docs/Domain-Specific/Frontend Style Guide.md`\n- **Database**: `guide_docs/Domain-Specific/Database Management Guide.md`\n\n### By Problem Type\n- **Performance**: `guide_docs/Core Principles.md` ‚Üí Performance section\n- **Security**: `guide_docs/Core Principles.md` ‚Üí Security section\n- **Testing**: `guide_docs/Language-Specific/Python Testing Guide.md`\n- **Error Handling**: `guide_docs/Core Principles.md` ‚Üí Error handling section\n\n### By Task Type\n- **API Development**: FastAPI Guide + Database Guide + Testing Guide\n- **Frontend**: Frontend Guide + API integration patterns\n- **Database**: Database Guide + Migration patterns\n- **Automation**: Shell Guide + Background task patterns\n\n## üö® Emergency Patterns\n\n### When User is Stuck\n1. **Acknowledge the issue** - Show understanding\n2. **Ask clarifying questions** - Get more context\n3. **Provide step-by-step guidance** - Break down the problem\n4. **Reference relevant documentation** - Point to specific guides\n5. **Offer alternatives** - Suggest different approaches\n\n### When Guides Conflict\n1. **Identify the conflict** - State what's different\n2. **Apply priority system** - Security ‚Üí Project Consistency ‚Üí Performance ‚Üí Style\n3. **Explain trade-offs** - Help user understand implications\n4. **Recommend approach** - Suggest best path forward\n\n### When Code Doesn't Work\n1. **Check error messages** - Look for specific issues\n2. **Verify dependencies** - Ensure all imports and setup\n3. **Test assumptions** - Validate expected behavior\n4. **Provide debugging steps** - Help user troubleshoot\n5. **Suggest alternatives** - Offer different approaches\n\n## üìû Communication Patterns\n\n### Positive Feedback\n- \"Great approach! This follows our established patterns.\"\n- \"Excellent use of error handling here.\"\n- \"This is exactly the right pattern for this situation.\"\n\n### Constructive Criticism\n- \"Consider using [pattern] for better [benefit].\"\n- \"This could be improved by [specific suggestion].\"\n- \"Let's follow our established pattern for [aspect].\"\n\n### Educational Guidance\n- \"Here's why we use this pattern: [explanation].\"\n- \"This follows our [principle] because [reasoning].\"\n- \"For future reference, you can find this pattern in [guide].\"\n\n---\n\n**Remember**: Always maintain context awareness, follow established patterns, and prioritize user success over perfect code.\n"
  },
  "cross_references": [],
  "code_generation_hints": [
    {
      "context": "general",
      "hint": "[Specific implementation guidance]",
      "validation": ""
    }
  ],
  "validation_rules": [
    "[How to verify correctness]\n```"
  ],
  "optimization": {
    "version": "1.0",
    "optimized_at": "2025-06-18T19:19:47.724900",
    "improvements": [
      "fixed_file_references",
      "extracted_ai_metadata",
      "structured_cross_references",
      "extracted_code_hints",
      "structured_validation_rules"
    ],
    "literal_strings_cleaned": true,
    "cleaned_at": "2025-06-18T19:30:00.000000"
  }
}