{
  "metadata": {
    "title": "AI Quick Reference",
    "description": "Quick reference for AI tool usage and documentation patterns",
    "version": "2.1",
    "last_updated": "2025-06-18",
    "source": "ai_quick_reference.md",
    "cross_references": [
      "ai_config.json",
      "guide_docs/feature_template.json",
      "guide_docs/implementation_guide_template.json"
    ]
  },
  "sections": {
    "ai_quick_reference": {
      "title": "AI Quick Reference",
      "description": "> Quick reference for AI tool usage and documentation patterns. Use this for understanding how to interact with the AI system effectively.",
      "content": "> Quick reference for AI tool usage and documentation patterns. Use this for understanding how to interact with the AI system effectively."
    },
    "documentation_types": {
      "title": "Documentation Types",
      "description": "**Feature Plans:** High-level strategy documents focusing on WHAT and WHY\n- Use `guide_docs/feature_template.json`\n- Focus on overall approach, key decisions, architecture\n- Avoid detailed code snippets and implementation steps\n\n**Implementation Guides:** Detailed step-by-step instructions with code examples\n- Use `guide_docs/implementation_guide_template.json`\n- Include detailed code examples and file paths\n- Focus on HOW with specific implementation steps\n\n**Technical Summaries:** Module-specific technical details\n- Located in `technical_summaries/`\n- Focus on existing code structure and patterns\n\n**Style Guides:** Language and domain-specific guidelines\n- Located in `guide_docs/language_specific/` and `guide_docs/domain_specific/`\n- Focus on coding standards and best practices",
      "content": "**Feature Plans:** High-level strategy documents focusing on WHAT and WHY\n- Use `guide_docs/feature_template.json`\n- Focus on overall approach, key decisions, architecture\n- Avoid detailed code snippets and implementation steps\n\n**Implementation Guides:** Detailed step-by-step instructions with code examples\n- Use `guide_docs/implementation_guide_template.json`\n- Include detailed code examples and file paths\n- Focus on HOW with specific implementation steps\n\n**Technical Summaries:** Module-specific technical details\n- Located in `technical_summaries/`\n- Focus on existing code structure and patterns\n\n**Style Guides:** Language and domain-specific guidelines\n- Located in `guide_docs/language_specific/` and `guide_docs/domain_specific/`\n- Focus on coding standards and best practices"
    },
    "plan_vs_implementation": {
      "title": "Plan vs Implementation Guide",
      "description": "**Feature Plans (WHAT/WHY):**\n- Overall strategy and approach\n- Key architectural decisions\n- High-level requirements\n- Success criteria\n- Risk assessment\n- Integration points\n\n**Implementation Guides (HOW):**\n- Step-by-step instructions\n- Detailed code examples\n- File paths and exact locations\n- Testing strategies\n- Common issues and solutions\n- Verification steps\n\n**Rule:** Plans focus on strategy, implementation guides focus on execution.",
      "content": "**Feature Plans (WHAT/WHY):**\n- Overall strategy and approach\n- Key architectural decisions\n- High-level requirements\n- Success criteria\n- Risk assessment\n- Integration points\n\n**Implementation Guides (HOW):**\n- Step-by-step instructions\n- Detailed code examples\n- File paths and exact locations\n- Testing strategies\n- Common issues and solutions\n- Verification steps\n\n**Rule:** Plans focus on strategy, implementation guides focus on execution."
    },
    "ai_tool_usage": {
      "title": "AI Tool Usage",
      "description": "**File Operations:**\n- `read_file`: Read file contents with line ranges\n- `edit_file`: Make precise edits to files\n- `delete_file`: Remove files safely\n- `file_search`: Find files by fuzzy matching\n\n**Code Analysis:**\n- `codebase_search`: Semantic search for code patterns\n- `grep_search`: Exact text/regex pattern matching\n- `list_dir`: Explore directory structure\n\n**Execution:**\n- `run_terminal_cmd`: Execute shell commands\n- Background tasks supported with `is_background: true`\n\n**Best Practices:**\n- Use semantic search for understanding patterns\n- Use grep for exact matches\n- Read files before editing\n- Validate file paths exist",
      "content": "**File Operations:**\n- `read_file`: Read file contents with line ranges\n- `edit_file`: Make precise edits to files\n- `delete_file`: Remove files safely\n- `file_search`: Find files by fuzzy matching\n\n**Code Analysis:**\n- `codebase_search`: Semantic search for code patterns\n- `grep_search`: Exact text/regex pattern matching\n- `list_dir`: Explore directory structure\n\n**Execution:**\n- `run_terminal_cmd`: Execute shell commands\n- Background tasks supported with `is_background: true`\n\n**Best Practices:**\n- Use semantic search for understanding patterns\n- Use grep for exact matches\n- Read files before editing\n- Validate file paths exist"
    },
    "documentation_patterns": {
      "title": "Documentation Patterns",
      "description": "**JSON Format:** All documentation uses JSON for AI optimization\n**Cross-References:** Use relative paths to other documentation\n**Metadata:** Include version, last_updated, source file\n**Validation:** All documentation must pass validation rules\n**Consistency:** Follow established patterns and naming conventions\n\n**File Naming:**\n- Use descriptive names with underscores\n- Include version numbers for major changes\n- Group related files in directories\n\n**Content Structure:**\n- Use clear section titles\n- Include AI guidance in descriptions\n- Provide actionable content\n- Reference existing patterns",
      "content": "**JSON Format:** All documentation uses JSON for AI optimization\n**Cross-References:** Use relative paths to other documentation\n**Metadata:** Include version, last_updated, source file\n**Validation:** All documentation must pass validation rules\n**Consistency:** Follow established patterns and naming conventions\n\n**File Naming:**\n- Use descriptive names with underscores\n- Include version numbers for major changes\n- Group related files in directories\n\n**Content Structure:**\n- Use clear section titles\n- Include AI guidance in descriptions\n- Provide actionable content\n- Reference existing patterns"
    },
    "common_patterns": {
      "title": "Common Patterns",
      "description": "**Error Handling:** Consistent try/except patterns across modules\n**Code Organization:** Modular structure with clear separation\n**Testing:** Comprehensive test coverage with fixtures\n**Documentation:** JSON-optimized for AI consumption\n\n**Backend Patterns:**\n- FastAPI with Pydantic models\n- SQLAlchemy for database operations\n- Celery for background tasks\n- Alembic for migrations\n\n**Frontend Patterns:**\n- React with TypeScript\n- Tailwind CSS for styling\n- React Router for navigation\n- Axios for API calls\n\n**Testing Patterns:**\n- Pytest for backend testing\n- Jest/React Testing Library for frontend\n- Fixtures for test data\n- Mocking for external dependencies",
      "content": "**Error Handling:** Consistent try/except patterns across modules\n**Code Organization:** Modular structure with clear separation\n**Testing:** Comprehensive test coverage with fixtures\n**Documentation:** JSON-optimized for AI consumption\n\n**Backend Patterns:**\n- FastAPI with Pydantic models\n- SQLAlchemy for database operations\n- Celery for background tasks\n- Alembic for migrations\n\n**Frontend Patterns:**\n- React with TypeScript\n- Tailwind CSS for styling\n- React Router for navigation\n- Axios for API calls\n\n**Testing Patterns:**\n- Pytest for backend testing\n- Jest/React Testing Library for frontend\n- Fixtures for test data\n- Mocking for external dependencies"
    },
    "validation_rules": {
      "title": "Validation Rules",
      "description": "**Documentation Quality:**\n- All placeholders must be replaced\n- File paths must reference actual structure\n- Requirements must be measurable\n- Cross-references must be valid\n\n**Code Quality:**\n- Follow existing patterns\n- Include proper error handling\n- Add comprehensive tests\n- Update documentation\n\n**AI Optimization:**\n- Use JSON format consistently\n- Include AI metadata\n- Provide clear guidance\n- Reference existing patterns\n\n**Content Guidelines:**\n- Plans focus on WHAT/WHY\n- Implementation guides focus on HOW\n- Avoid detailed code in plans\n- Include code examples in guides",
      "content": "**Documentation Quality:**\n- All placeholders must be replaced\n- File paths must reference actual structure\n- Requirements must be measurable\n- Cross-references must be valid\n\n**Code Quality:**\n- Follow existing patterns\n- Include proper error handling\n- Add comprehensive tests\n- Update documentation\n\n**AI Optimization:**\n- Use JSON format consistently\n- Include AI metadata\n- Provide clear guidance\n- Reference existing patterns\n\n**Content Guidelines:**\n- Plans focus on WHAT/WHY\n- Implementation guides focus on HOW\n- Avoid detailed code in plans\n- Include code examples in guides"
    },
    "ai_metadata": {
      "title": "AI Metadata",
      "description": "**Template Version:** 2.1\n**AI Processing Level:** High\n**Required Context:** Basic project understa...",
      "content": "**Template Version:** 2.1\n**AI Processing Level:** High\n**Required Context:** Basic project understanding\n**Validation Required:** Yes\n**Code Generation:** Supported\n**Search Optimization:** Enhanced\n\n**Keywords:** quick reference, patterns, navigation, decision making, code generation"
    },
    "_immediate_actions": {
      "title": "🚀 Immediate Actions",
      "description": "",
      "content": ""
    },
    "user_request__guide_selection": {
      "title": "User Request → Guide Selection",
      "description": "- **\"Code review\"** → `guide_docs/code_review_patterns.json.replace(\".json\", \".json\")` + Language gu...",
      "content": "- **\"Code review\"** → `guide_docs/code_review_patterns.json.replace(\".json\", \".json\")` + Language guides\n- **\"New feature\"** → `guide_docs/feature_template.json.replace(\".json\", \".json\")` + architecture_overview\n- **\"Fix error\"** → `guide_docs/core_principles.json.replace(\".json\", \".json\")` + Language guides\n- **\"Optimize\"** → `guide_docs/core_principles.json.replace(\".json\", \".json\")` + Performance patterns\n- **\"Best practice\"** → `guide_docs/core_principles.json.replace(\".json\", \".json\")` + Domain guides"
    },
    "priority_system_always_apply": {
      "title": "Priority System (Always Apply)",
      "description": "1. **Critical**: Python style guide violations, missing legal notices, import organization errors, missing type hints, security, data integrity, breaking changes\n2. **High**: Performance issues, maintainability problems, missing external documentation links\n3. **Medium**: Code organization, documentation, minor optimizations\n4. **Low**: Personal preferences, cosmetic changes, future-proofing\n\n**Style guide violations are automatically CRITICAL priority and must be addressed immediately.**",
      "content": "1. **Critical**: Python style guide violations, missing legal notices, import organization errors, missing type hints, security, data integrity, breaking changes\n2. **High**: Performance issues, maintainability problems, missing external documentation links\n3. **Medium**: Code organization, documentation, minor optimizations\n4. **Low**: Personal preferences, cosmetic changes, future-proofing\n\n**Style guide violations are automatically CRITICAL priority and must be addressed immediately.**"
    },
    "_essential_navigation": {
      "title": "📁 Essential Navigation",
      "description": "",
      "content": ""
    },
    "core_documents": {
      "title": "Core Documents",
      "description": "- **Decision Framework**: `guide_docs/core_principles.json.replace(\".json\", \".json\")`\n- **Architectu...",
      "content": "- **Decision Framework**: `guide_docs/core_principles.json.replace(\".json\", \".json\")`\n- **Architecture**: `project_context/architecture_overview.json.replace(\".json\", \".json\")`\n- **Patterns**: `project_context/common_patterns.json.replace(\".json\", \".json\")`\n- **Workflow**: `project_context/development_workflow.json.replace(\".json\", \".json\")`"
    },
    "language_guides": {
      "title": "Language Guides",
      "description": "- **Python**: `guide_docs/Language-Specific/python_style_guide.json.replace(\".json\", \".json\")`\n- **F...",
      "content": "- **Python**: `guide_docs/Language-Specific/python_style_guide.json.replace(\".json\", \".json\")`\n- **FastAPI**: `guide_docs/Language-Specific/fastapi_development_guide.json.replace(\".json\", \".json\")`\n- **Testing**: `guide_docs/Language-Specific/python_testing_guide.json.replace(\".json\", \".json\")`"
    },
    "domain_guides": {
      "title": "Domain Guides",
      "description": "- **Database**: `guide_docs/domain_specific/database_management_guide.json.replace(\".json\", \".json\")...",
      "content": "- **Database**: `guide_docs/domain_specific/database_management_guide.json.replace(\".json\", \".json\")`\n- **Frontend**: `guide_docs/domain_specific/frontend_style_guide.json.replace(\".json\", \".json\")`\n- **Web Scraping**: `guide_docs/domain_specific/web_scraping_patterns.json.replace(\".json\", \".json\")`\n- **Shell**: `guide_docs/domain_specific/shell_style_guide.json.replace(\".json\", \".json\")`"
    },
    "templates__tools": {
      "title": "Templates & Tools",
      "description": "- **feature_template**: `guide_docs/feature_template.json.replace(\".json\", \".json\")`\n- **Search Inde...",
      "content": "- **feature_template**: `guide_docs/feature_template.json.replace(\".json\", \".json\")`\n- **Search Index**: `search_index.json.replace(\".json\", \".json\")`\n- **AI Optimization**: `guide_docs/ai_tool_optimization_guide.json.replace(\".json\", \".json\")`"
    },
    "_common_patterns": {
      "title": "🔧 common_patterns",
      "description": "",
      "content": ""
    },
    "code_generation_hints_format": {
      "title": "Code Generation Hints Format",
      "description": "```markdown\n[Specific implementation guidance]\n[How to verify correctness]\n```",
      "content": "```markdown\n[Specific implementation guidance]\n[How to verify correctness]\n```"
    },
    "error_handling_pattern": {
      "title": "Error Handling Pattern",
      "description": "```python\ntry:\n    # Operation\n    result = perform_operation()\nexcept SpecificError as e:\n    # Han...",
      "content": "```python\ntry:\n    # Operation\n    result = perform_operation()\nexcept SpecificError as e:\n    # Handle specific error\n    logger.error(f\"Specific error: {e}\")\n    raise CustomError(\"User-friendly message\")\nexcept Exception as e:\n    # Handle unexpected errors\n    logger.error(f\"Unexpected error: {e}\")\n    raise GeneralError(\"Something went wrong\")\n```"
    },
    "api_endpoint_pattern": {
      "title": "API Endpoint Pattern",
      "description": "```python\n@router.post(\"/endpoint\")\n@requires_auth\nasync def endpoint_name(\n    request: RequestSche...",
      "content": "```python\n@router.post(\"/endpoint\")\n@requires_auth\nasync def endpoint_name(\n    request: RequestSchema,\n    current_user: AppUser = Depends(get_current_user)\n) -> ResponseSchema:\n    try:\n        # Business logic\n        result = await process_request(request, current_user)\n        return ResponseSchema(data=result)\n    except ValidationError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n    except NotFoundError as e:\n        raise HTTPException(status_code=404, detail=str(e))\n```"
    },
    "database_model_pattern": {
      "title": "Database Model Pattern",
      "description": "```python\nclass ModelName(Base):\n    __tablename__ = \"table_name\"\n\n    id = Column(Integer, primary_...",
      "content": "```python\nclass ModelName(Base):\n    __tablename__ = \"table_name\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    # Relationships\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    user = relationship(\"AppUser\", back_populates=\"models\")\n```"
    },
    "postgresql_batch_processing_pattern": {
      "title": "PostgreSQL Batch Processing Pattern",
      "description": "```python\nfrom itertools import batched\n\n# Process in batches to avoid PostgreSQL parameter limit (65,535 max)\nbatch_size = 1000  # 1000 records * 8 parameters = 8000 parameters per batch\nfor batch_num, batch in enumerate(batched(data_list, batch_size), 1):\n    # Prepare batch data\n    batch_data = [{\"field1\": item.field1, \"field2\": item.field2} for item in batch]\n    \n    # Execute batch insert with ON CONFLICT\n    stmt = pg_insert(Model).values(batch_data)\n    stmt = stmt.on_conflict_do_update(\n        index_elements=[\"unique_field\"],\n        set_={\"field1\": stmt.excluded.field1}\n    )\n    await session.execute(stmt)\n    await session.commit()\n```",
      "content": "```python\nfrom itertools import batched\n\n# Process in batches to avoid PostgreSQL parameter limit (65,535 max)\nbatch_size = 1000  # 1000 records * 8 parameters = 8000 parameters per batch\nfor batch_num, batch in enumerate(batched(data_list, batch_size), 1):\n    # Prepare batch data\n    batch_data = [{\"field1\": item.field1, \"field2\": item.field2} for item in batch]\n    \n    # Execute batch insert with ON CONFLICT\n    stmt = pg_insert(Model).values(batch_data)\n    stmt = stmt.on_conflict_do_update(\n        index_elements=[\"unique_field\"],\n        set_={\"field1\": stmt.excluded.field1}\n    )\n    await session.execute(stmt)\n    await session.commit()\n```"
    },
    "error_message_cleaning_pattern": {
      "title": "Error Message Cleaning Pattern",
      "description": "```python\ndef clean_error_message(error_msg: str) -> str:\n    \"\"\"Clean error message by removing verbose details.\"\"\"\n    # Remove SQL parameter dumps\n    if \"%(id_m\" in error_msg:\n        parts = error_msg.split(\"%(id_m\")\n        if len(parts) > 1:\n            error_msg = parts[0].strip()\n    return error_msg\n\ntry:\n    # Database operation\n    await db.execute(stmt)\nexcept Exception as e:\n    error_msg = clean_error_message(str(e))\n    logger.error(f\"Database error: {error_msg}\")\n    raise\n```",
      "content": "```python\ndef clean_error_message(error_msg: str) -> str:\n    \"\"\"Clean error message by removing verbose details.\"\"\"\n    # Remove SQL parameter dumps\n    if \"%(id_m\" in error_msg:\n        parts = error_msg.split(\"%(id_m\")\n        if len(parts) > 1:\n            error_msg = parts[0].strip()\n    return error_msg\n\ntry:\n    # Database operation\n    await db.execute(stmt)\nexcept Exception as e:\n    error_msg = clean_error_message(str(e))\n    logger.error(f\"Database error: {error_msg}\")\n    raise\n```"
    },
    "_decision_frameworks": {
      "title": "🎯 Decision Frameworks",
      "description": "",
      "content": ""
    },
    "when_to_refactor_vs_new_code": {
      "title": "When to Refactor vs. New Code",
      "description": "- **Refactor**: Existing code with style violations, minor bugs, improvements\n- **New Code**: Featur...",
      "content": "- **Refactor**: Existing code with style violations, minor bugs, improvements\n- **New Code**: Feature doesn't exist, major architectural changes, explicit request"
    },
    "when_to_be_strict_vs_flexible": {
      "title": "When to Be Strict vs. Flexible",
      "description": "- **Strict**: Security, data integrity, critical business logic, project patterns\n- **Flexible**: St...",
      "content": "- **Strict**: Security, data integrity, critical business logic, project patterns\n- **Flexible**: Style preferences, minor optimizations, personal habits"
    },
    "context_awareness": {
      "title": "Context Awareness",
      "description": "- **File context**: What file they're working in\n- **Task context**: What they're trying to accompli...",
      "content": "- **File context**: What file they're working in\n- **Task context**: What they're trying to accomplish\n- **Project context**: Overall architecture and constraints\n- **User context**: Experience level and preferences"
    },
    "_quality_checklist": {
      "title": "📋 Quality Checklist",
      "description": "",
      "content": ""
    },
    "before_providing_code": {
      "title": "Before Providing Code",
      "description": "- [ ] Check core_principles for decision framework\n- [ ] Reference appropriate language/domain guides\n- [ ] **MANDATORY**: Check Python style guide compliance\n- [ ] **MANDATORY**: Include legal notice in module docstring\n- [ ] **MANDATORY**: Use proper import organization\n- [ ] **MANDATORY**: Apply type hints to all functions\n- [ ] **MANDATORY**: Use os.path for file operations\n- [ ] **MANDATORY**: Use Pydantic v2 patterns\n- [ ] Include proper error handling\n- [ ] Follow project naming conventions\n- [ ] Add validation and testing considerations\n- [ ] Consider performance implications\n- [ ] Apply security best practices\n\n**Style guide compliance is MANDATORY and cannot be bypassed.**",
      "content": "- [ ] Check core_principles for decision framework\n- [ ] Reference appropriate language/domain guides\n- [ ] **MANDATORY**: Check Python style guide compliance\n- [ ] **MANDATORY**: Include legal notice in module docstring\n- [ ] **MANDATORY**: Use proper import organization\n- [ ] **MANDATORY**: Apply type hints to all functions\n- [ ] **MANDATORY**: Use os.path for file operations\n- [ ] **MANDATORY**: Use Pydantic v2 patterns\n- [ ] Include proper error handling\n- [ ] Follow project naming conventions\n- [ ] Add validation and testing considerations\n- [ ] Consider performance implications\n- [ ] Apply security best practices\n\n**Style guide compliance is MANDATORY and cannot be bypassed.**"
    },
    "before_making_suggestions": {
      "title": "Before Making Suggestions",
      "description": "- [ ] Understand user's current context\n- [ ] Identify appropriate priority level\n- [ ] Reference ex...",
      "content": "- [ ] Understand user's current context\n- [ ] Identify appropriate priority level\n- [ ] Reference existing patterns\n- [ ] Explain reasoning clearly\n- [ ] Provide actionable guidance\n- [ ] Consider user's experience level"
    },
    "_quick_search": {
      "title": "🔍 Quick Search",
      "description": "",
      "content": ""
    },
    "by_technology": {
      "title": "By Technology",
      "description": "- **Python**: `guide_docs/Language-Specific/python_style_guide.json.replace(\".json\", \".json\")`\n- **F...",
      "content": "- **Python**: `guide_docs/Language-Specific/python_style_guide.json.replace(\".json\", \".json\")`\n- **FastAPI**: `guide_docs/Language-Specific/fastapi_development_guide.json.replace(\".json\", \".json\")`\n- **React**: `guide_docs/domain_specific/frontend_style_guide.json.replace(\".json\", \".json\")`\n- **Database**: `guide_docs/domain_specific/database_management_guide.json.replace(\".json\", \".json\")`"
    },
    "by_problem_type": {
      "title": "By Problem Type",
      "description": "- **Performance**: `guide_docs/core_principles.json.replace(\".json\", \".json\")` → Performance section...",
      "content": "- **Performance**: `guide_docs/core_principles.json.replace(\".json\", \".json\")` → Performance section\n- **Security**: `guide_docs/core_principles.json.replace(\".json\", \".json\")` → Security section\n- **Testing**: `guide_docs/Language-Specific/python_testing_guide.json.replace(\".json\", \".json\")`\n- **Error Handling**: `guide_docs/core_principles.json.replace(\".json\", \".json\")` → Error handling section"
    },
    "by_task_type": {
      "title": "By Task Type",
      "description": "- **API Development**: FastAPI Guide + Database Guide + Testing Guide\n- **Frontend**: Frontend Guide...",
      "content": "- **API Development**: FastAPI Guide + Database Guide + Testing Guide\n- **Frontend**: Frontend Guide + API integration patterns\n- **Database**: Database Guide + Migration patterns\n- **Automation**: Shell Guide + Background task patterns"
    },
    "_emergency_patterns": {
      "title": "🚨 Emergency Patterns",
      "description": "",
      "content": ""
    },
    "when_user_is_stuck": {
      "title": "When User is Stuck",
      "description": "1. **Acknowledge the issue** - Show understanding\n2. **Ask clarifying questions** - Get more context...",
      "content": "1. **Acknowledge the issue** - Show understanding\n2. **Ask clarifying questions** - Get more context\n3. **Provide step-by-step guidance** - Break down the problem\n4. **Reference relevant documentation** - Point to specific guides\n5. **Offer alternatives** - Suggest different approaches"
    },
    "when_guides_conflict": {
      "title": "When Guides Conflict",
      "description": "1. **Identify the conflict** - State what's different\n2. **Apply priority system** - Style Guide → Security → Project Consistency → Performance → Style\n3. **Explain trade-offs** - Help user understand implications\n4. **Recommend approach** - Suggest best path forward\n5. **MANDATORY**: Style guide compliance takes precedence over other considerations\n\n**Style guide compliance is the highest priority in conflict resolution.**",
      "content": "1. **Identify the conflict** - State what's different\n2. **Apply priority system** - Style Guide → Security → Project Consistency → Performance → Style\n3. **Explain trade-offs** - Help user understand implications\n4. **Recommend approach** - Suggest best path forward\n5. **MANDATORY**: Style guide compliance takes precedence over other considerations\n\n**Style guide compliance is the highest priority in conflict resolution.**"
    },
    "when_code_doesnt_work": {
      "title": "When Code Doesn't Work",
      "description": "1. **Check error messages** - Look for specific issues\n2. **Verify dependencies** - Ensure all imports and setup\n3. **Test assumptions** - Validate expected behavior\n4. **Provide debugging steps** - Help user troubleshoot\n5. **Suggest alternatives** - Offer different approaches\n6. **Check style guide compliance** - Ensure code follows project standards",
      "content": "1. **Check error messages** - Look for specific issues\n2. **Verify dependencies** - Ensure all imports and setup\n3. **Test assumptions** - Validate expected behavior\n4. **Provide debugging steps** - Help user troubleshoot\n5. **Suggest alternatives** - Offer different approaches\n6. **Check style guide compliance** - Ensure code follows project standards"
    },
    "_style_guide_compliance": {
      "title": "📋 Style Guide Compliance",
      "description": "",
      "content": ""
    },
    "mandatory_style_guide_checks": {
      "title": "Mandatory Style Guide Checks",
      "description": "**BEFORE GENERATING ANY PYTHON CODE:**\n\n1. **Module Documentation**:\n   - Include proper docstring with external links\n   - **MANDATORY**: Legal notice at end of docstring\n   - Reference relevant documentation\n\n2. **Import Organization**:\n   - Standard library imports first\n   - Third-party imports second\n   - Local application imports last\n   - Blank lines between groups\n   - Use absolute imports\n\n3. **Type Hints**:\n   - **MANDATORY**: All function parameters and return values\n   - Use `Annotated` for FastAPI dependencies\n   - Use `Optional[Type]` for nullable values\n   - Use `list[Type]` not `List[Type]`\n\n4. **File Operations**:\n   - **MANDATORY**: Use `os.path` functions only\n   - **NEVER**: Use `pathlib` or `Path`\n   - Examples: `os.path.join()`, `os.makedirs()`\n\n5. **Pydantic v2 Patterns**:\n   - **MANDATORY**: Use `ConfigDict` instead of `class Config`\n   - **MANDATORY**: Use `@field_validator` instead of `@validator`\n   - **MANDATORY**: Use `model_validate()` instead of `from_orm()`\n   - **MANDATORY**: Use `model_dump()` instead of `dict()`\n\n**ENFORCEMENT LEVEL: CRITICAL** - These checks must be applied automatically.\n\n**VIOLATION PRIORITY**: Style guide violations are automatically CRITICAL priority.",
      "content": "**BEFORE GENERATING ANY PYTHON CODE:**\n\n1. **Module Documentation**:\n   - Include proper docstring with external links\n   - **MANDATORY**: Legal notice at end of docstring\n   - Reference relevant documentation\n\n2. **Import Organization**:\n   - Standard library imports first\n   - Third-party imports second\n   - Local application imports last\n   - Blank lines between groups\n   - Use absolute imports\n\n3. **Type Hints**:\n   - **MANDATORY**: All function parameters and return values\n   - Use `Annotated` for FastAPI dependencies\n   - Use `Optional[Type]` for nullable values\n   - Use `list[Type]` not `List[Type]`\n\n4. **File Operations**:\n   - **MANDATORY**: Use `os.path` functions only\n   - **NEVER**: Use `pathlib` or `Path`\n   - Examples: `os.path.join()`, `os.makedirs()`\n\n5. **Pydantic v2 Patterns**:\n   - **MANDATORY**: Use `ConfigDict` instead of `class Config`\n   - **MANDATORY**: Use `@field_validator` instead of `@validator`\n   - **MANDATORY**: Use `model_validate()` instead of `from_orm()`\n   - **MANDATORY**: Use `model_dump()` instead of `dict()`\n\n**ENFORCEMENT LEVEL: CRITICAL** - These checks must be applied automatically.\n\n**VIOLATION PRIORITY**: Style guide violations are automatically CRITICAL priority."
    },
    "style_guide_references": {
      "title": "Style Guide References",
      "description": "- **Primary Guide**: `humans/guides/python_style_guide.md`\n- **AI Guide**: `ai/guide_docs/language_specific/python_style_guide.json`\n- **Core Principles**: `ai/guide_docs/core_principles.json`\n- **Quick Reference**: `ai/ai_quick_reference.json`\n\n**MANDATORY**: Reference the style guide before generating any Python code.\n\n**AUTOMATIC CHECK**: Style guide compliance must be verified automatically.",
      "content": "- **Primary Guide**: `humans/guides/python_style_guide.md`\n- **AI Guide**: `ai/guide_docs/language_specific/python_style_guide.json`\n- **Core Principles**: `ai/guide_docs/core_principles.json`\n- **Quick Reference**: `ai/ai_quick_reference.json`\n\n**MANDATORY**: Reference the style guide before generating any Python code.\n\n**AUTOMATIC CHECK**: Style guide compliance must be verified automatically."
    },
    "_communication_patterns": {
      "title": "📞 Communication Patterns",
      "description": "",
      "content": ""
    },
    "positive_feedback": {
      "title": "Positive Feedback",
      "description": "- \"Great approach! This follows our established patterns.\"\n- \"Excellent use of error handling here.\"...",
      "content": "- \"Great approach! This follows our established patterns.\"\n- \"Excellent use of error handling here.\"\n- \"This is exactly the right pattern for this situation.\""
    },
    "constructive_criticism": {
      "title": "Constructive Criticism",
      "description": "- \"Consider using [pattern] for better [benefit].\"\n- \"This could be improved by [specific suggestion...",
      "content": "- \"Consider using [pattern] for better [benefit].\"\n- \"This could be improved by [specific suggestion].\"\n- \"Let's follow our established pattern for [aspect].\""
    },
    "educational_guidance": {
      "title": "Educational Guidance",
      "description": "- \"Here's why we use this pattern: [explanation].\"\n- \"This follows our [principle] because [reasonin...",
      "content": "- \"Here's why we use this pattern: [explanation].\"\n- \"This follows our [principle] because [reasoning].\"\n- \"For future reference, you can find this pattern in [guide].\"\n\n---\n\n**Remember**: Always maintain context awareness, follow established patterns, and prioritize user success over perfect code."
    }
  }
}
