{
  "metadata": {
    "title": "development_workflow",
    "description": "",
    "version": "2.1",
    "last_updated": "2025-06-18",
    "source": "project_context/development_workflow.md",
    "cross_references": [
      "../guide_docs/core_principles.json",
      "../guide_docs/Language-Specific/python_testing_guide.json",
      "../guide_docs/domain_specific/database_management_guide.json",
      "architecture_overview.json",
      "common_patterns.json"
    ]
  },
  "sections": {
    "development_workflow": {
      "title": "development_workflow",
      "description": "> This document describes the development workflow and processes used in the project. Use this for u...",
      "content": "> This document describes the development workflow and processes used in the project. Use this for understanding how development tasks are organized and executed."
    },
    "ai_metadata": {
      "title": "AI Metadata",
      "description": "**Template Version:** 2.1\n**AI Processing Level:** High\n**Required Context:** Git, CI/CD, testing, d...",
      "content": "**Template Version:** 2.1\n**AI Processing Level:** High\n**Required Context:** Git, CI/CD, testing, deployment, project management\n**Validation Required:** Yes\n**Code Generation:** Supported\n\n**Dependencies:**\n- `../guide_docs/core_principles.json.replace(\".json\", \".json\")` - Decision-making frameworks\n- `../guide_docs/Language-Specific/python_testing_guide.json.replace(\".json\", \".json\")` - Testing patterns\n- `../guide_docs/domain_specific/database_management_guide.json.replace(\".json\", \".json\")` - Database patterns\n- `architecture_overview.json.replace(\".json\", \".json\")` - System architecture\n- `common_patterns.json.replace(\".json\", \".json\")` - Project-specific patterns\n\n**Validation Rules:**\n- All code changes must follow Git workflow and branching strategy\n- All commits must include proper commit messages and validation\n- All changes must pass automated testing before deployment\n- All deployments must follow proper environment promotion\n- All documentation must be updated with code changes"
    },
    "overview": {
      "title": "Overview",
      "description": "**Document Purpose:** Development workflow standards and procedures for the CreamPie project\n**Scope...",
      "content": "**Document Purpose:** Development workflow standards and procedures for the CreamPie project\n**Scope:** Git workflow, testing, CI/CD, deployment, and project management\n**Target Users:** AI assistants and developers working on the project\n**Last Updated:** Current\n\n**AI Context:** This guide provides the foundational development workflow that must be followed for all code changes and deployments in the project. It ensures consistent, reliable, and maintainable development practices."
    },
    "1_git_workflow": {
      "title": "1. Git Workflow",
      "description": "",
      "content": ""
    },
    "branching_strategy": {
      "title": "Branching Strategy",
      "description": "```bash",
      "content": "```bash"
    },
    "main_branches": {
      "title": "Main branches",
      "description": "main                    # Production-ready code\ndevelop                 # Integration branch for fea...",
      "content": "main                    # Production-ready code\ndevelop                 # Integration branch for features\nstaging                 # Pre-production testing"
    },
    "feature_branches": {
      "title": "Feature branches",
      "description": "feature/feature-name    # New features\nbugfix/bug-description  # Bug fixes\nhotfix/critical-fix     #...",
      "content": "feature/feature-name    # New features\nbugfix/bug-description  # Bug fixes\nhotfix/critical-fix     # Critical production fixes\nrelease/version-number  # Release preparation\n```\n\nThis branching strategy will inform all Git branch naming and organization.\n\nAll branches must follow this naming convention and purpose."
    },
    "commit_message_standards": {
      "title": "Commit Message Standards",
      "description": "```bash",
      "content": "```bash"
    },
    "commit_message_format": {
      "title": "Commit message format",
      "description": "<type>(<scope>): <description>\n\n[optional body]\n\n[optional footer]",
      "content": "<type>(<scope>): <description>\n\n[optional body]\n\n[optional footer]"
    },
    "types": {
      "title": "Types",
      "description": "feat:     New feature\nfix:      Bug fix\ndocs:     Documentation changes\nstyle:    Code style changes...",
      "content": "feat:     New feature\nfix:      Bug fix\ndocs:     Documentation changes\nstyle:    Code style changes (formatting, etc.)\nrefactor: Code refactoring\ntest:     Adding or updating tests\nchore:    Maintenance tasks"
    },
    "examples": {
      "title": "Examples",
      "description": "feat(auth): add JWT authentication system\nfix(api): resolve rate limiting issue in stock data endpoi...",
      "content": "feat(auth): add JWT authentication system\nfix(api): resolve rate limiting issue in stock data endpoint\ndocs(readme): update installation instructions\ntest(stock-data): add unit tests for data processor\nrefactor(ui): extract reusable button component\nchore(deps): update dependencies to latest versions\n```\n\nThis commit message format will inform all Git commit message creation.\n\nAll commits must follow this format with proper type and description."
    },
    "git_workflow_commands": {
      "title": "Git Workflow Commands",
      "description": "```bash",
      "content": "```bash"
    },
    "start_new_feature": {
      "title": "Start new feature",
      "description": "git checkout develop\ngit pull origin develop\ngit checkout -b feature/new-feature-name",
      "content": "git checkout develop\ngit pull origin develop\ngit checkout -b feature/new-feature-name"
    },
    "make_changes_and_commit": {
      "title": "Make changes and commit",
      "description": "git add .\ngit commit -m \"feat(scope): descriptive commit message\"",
      "content": "git add .\ngit commit -m \"feat(scope): descriptive commit message\""
    },
    "push_feature_branch": {
      "title": "Push feature branch",
      "description": "git push origin feature/new-feature-name",
      "content": "git push origin feature/new-feature-name"
    },
    "create_pull_request": {
      "title": "Create pull request",
      "description": "",
      "content": ""
    },
    "__target_develop": {
      "title": "- Target: develop",
      "description": "",
      "content": ""
    },
    "__include_description_of_changes": {
      "title": "- Include description of changes",
      "description": "",
      "content": ""
    },
    "__request_code_review": {
      "title": "- Request code review",
      "description": "",
      "content": ""
    },
    "after_approval_merge_to_develop": {
      "title": "After approval, merge to develop",
      "description": "git checkout develop\ngit pull origin develop\ngit merge feature/new-feature-name\ngit push origin deve...",
      "content": "git checkout develop\ngit pull origin develop\ngit merge feature/new-feature-name\ngit push origin develop"
    },
    "clean_up_feature_branch": {
      "title": "Clean up feature branch",
      "description": "git branch -d feature/new-feature-name\ngit push origin --delete feature/new-feature-name\n```\n\nThis G...",
      "content": "git branch -d feature/new-feature-name\ngit push origin --delete feature/new-feature-name\n```\n\nThis Git workflow will inform all version control operations.\n\nAll Git operations must follow this workflow sequence."
    },
    "2_code_review_process": {
      "title": "2. Code Review Process",
      "description": "",
      "content": ""
    },
    "pull_request_standards": {
      "title": "Pull Request Standards",
      "description": "```markdown",
      "content": "```markdown"
    },
    "pull_request_template": {
      "title": "Pull Request Template",
      "description": "",
      "content": ""
    },
    "description": {
      "title": "Description",
      "description": "Brief description of changes made",
      "content": "Brief description of changes made"
    },
    "type_of_change": {
      "title": "Type of Change",
      "description": "- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update",
      "content": "- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update"
    },
    "testing": {
      "title": "Testing",
      "description": "- [ ] Tests cover new functionality\n- [ ] Tests pass consistently\n- [ ] Test coverage adequate\n- [ ]...",
      "content": "- [ ] Tests cover new functionality\n- [ ] Tests pass consistently\n- [ ] Test coverage adequate\n- [ ] Integration tests updated"
    },
    "checklist": {
      "title": "Checklist",
      "description": "- [ ] Code follows style guidelines\n- [ ] Self-review completed\n- [ ] Documentation updated\n- [ ] No...",
      "content": "- [ ] Code follows style guidelines\n- [ ] Self-review completed\n- [ ] Documentation updated\n- [ ] No console errors\n- [ ] Performance impact considered"
    },
    "screenshots_if_applicable": {
      "title": "Screenshots (if applicable)",
      "description": "Add screenshots for UI changes",
      "content": "Add screenshots for UI changes"
    },
    "related_issues": {
      "title": "Related Issues",
      "description": "Closes #issue-number\n```\n\nThis PR template will inform all pull request creation and review.\n\nAll pu...",
      "content": "Closes #issue-number\n```\n\nThis PR template will inform all pull request creation and review.\n\nAll pull requests must include proper description and checklist completion."
    },
    "code_review_guidelines": {
      "title": "Code Review Guidelines",
      "description": "```markdown",
      "content": "```markdown"
    },
    "code_review_checklist": {
      "title": "Code Review Checklist",
      "description": "",
      "content": ""
    },
    "functionality": {
      "title": "Functionality",
      "description": "- [ ] Code works as intended\n- [ ] Edge cases handled\n- [ ] Error handling implemented\n- [ ] Perform...",
      "content": "- [ ] Code works as intended\n- [ ] Edge cases handled\n- [ ] Error handling implemented\n- [ ] Performance considerations"
    },
    "code_quality": {
      "title": "Code Quality",
      "description": "- [ ] Follows style guidelines\n- [ ] No code duplication\n- [ ] Proper naming conventions\n- [ ] Comme...",
      "content": "- [ ] Follows style guidelines\n- [ ] No code duplication\n- [ ] Proper naming conventions\n- [ ] Comments where needed"
    },
    "security": {
      "title": "Security",
      "description": "- [ ] No security vulnerabilities\n- [ ] Input validation implemented\n- [ ] Sensitive data protected\n...",
      "content": "- [ ] No security vulnerabilities\n- [ ] Input validation implemented\n- [ ] Sensitive data protected\n- [ ] Authentication/authorization correct"
    },
    "documentation": {
      "title": "Documentation",
      "description": "- [ ] Code is self-documenting\n- [ ] readme updated if needed\n- [ ] API documentation updated\n- [ ] ...",
      "content": "- [ ] Code is self-documenting\n- [ ] readme updated if needed\n- [ ] API documentation updated\n- [ ] Comments explain complex logic\n```\n\nThis review checklist will inform all code review processes.\n\nAll code reviews must follow this checklist for comprehensive evaluation."
    },
    "3_testing_workflow": {
      "title": "3. Testing Workflow",
      "description": "",
      "content": ""
    },
    "debugging_workflow": {
      "title": "Debugging Workflow",
      "description": "Mandatory workflow for debugging any development issues, errors, or failures",
      "content": "**MANDATORY DEVELOPMENT DEBUGGING WORKFLOW - ALWAYS FOLLOW THIS ORDER:**\n\n1. **FIRST - Check AI Outputs Directory**:\n   - **ALWAYS** check `ai/outputs/` for relevant error reports first\n   - **ALWAYS** check `ai/outputs/test_results/` for test failure reports\n   - **ALWAYS** check `ai/outputs/lint_results/` for linting error reports\n   - **ALWAYS** check `ai/outputs/` for any other relevant output reports\n   - **NEVER** start debugging without reading the actual error reports\n   - **WARNING**: Reports older than 15 minutes may be stale - consider re-running tools if issues persist\n\n2. **Read the Actual Error Messages**:\n   - Don't guess or search randomly\n   - Fix the exact issues reported\n   - Address specific line numbers and error types\n   - Follow the error trail starting with the most critical errors first\n\n3. **Don't Waste Time Searching**:\n   - Use the reports that are already generated\n   - Don't run commands without checking existing reports\n   - Focus on the specific errors identified in the output files\n\n**CRITICAL**: Before attempting to debug any development issues:\n- **FIRST**: Check `ai/outputs/lint_results/` for mypy, ruff, and other tool reports\n- **FIRST**: Check `ai/outputs/test_results/` for test failure reports\n- **FIRST**: Check `ai/outputs/` for any other relevant output reports\n- **NEVER**: Start debugging without reading the actual error reports\n- **WARNING**: Reports older than 15 minutes may be stale - consider re-running tools if issues persist\n\n**AUTOMATIC ENFORCEMENT**: This debugging workflow must be applied automatically for all development debugging activities.\n\n**NO EXCEPTIONS**: The AI outputs directory must be checked first in all debugging scenarios.\n\n**CONTINUOUS MONITORING**: This workflow must be followed consistently across all development sessions."
    },
    "test_execution": {
      "title": "Test Execution",
      "description": "```bash",
      "content": "```bash"
    },
    "run_all_tests": {
      "title": "Run all tests",
      "description": "poetry run pytest",
      "content": "poetry run pytest"
    },
    "run_specific_test_file": {
      "title": "Run specific test file",
      "description": "poetry run pytest tests/test_specific_module.py",
      "content": "poetry run pytest tests/test_specific_module.py"
    },
    "run_tests_with_coverage": {
      "title": "Run tests with coverage",
      "description": "poetry run pytest --cov=cream_api --cov-report=html",
      "content": "poetry run pytest --cov=cream_api --cov-report=html"
    },
    "run_tests_in_parallel": {
      "title": "Run tests in parallel",
      "description": "poetry run pytest -n auto",
      "content": "poetry run pytest -n auto"
    },
    "run_tests_with_verbose_output": {
      "title": "Run tests with verbose output",
      "description": "poetry run pytest -v",
      "content": "poetry run pytest -v"
    },
    "run_only_unit_tests": {
      "title": "Run only unit tests",
      "description": "poetry run pytest tests/unit/",
      "content": "poetry run pytest tests/unit/"
    },
    "run_only_integration_tests": {
      "title": "Run only integration tests",
      "description": "poetry run pytest tests/integration/",
      "content": "poetry run pytest tests/integration/"
    },
    "run_tests_matching_pattern": {
      "title": "Run tests matching pattern",
      "description": "poetry run pytest -k \"test_function_name\"\n```\n\nThis test execution pattern will inform all testing p...",
      "content": "poetry run pytest -k \"test_function_name\"\n```\n\nThis test execution pattern will inform all testing procedures.\n\nAll code changes must pass all relevant tests before merging."
    },
    "test_coverage_requirements": {
      "title": "Test Coverage Requirements",
      "description": "```yaml",
      "content": "```yaml"
    },
    "coverage_thresholds": {
      "title": "Coverage thresholds",
      "description": "coverage:\n  global:\n    statements: 80\n    branches: 75\n    functions: 80\n    lines: 80\n\n  modules:\n...",
      "content": "coverage:\n  global:\n    statements: 80\n    branches: 75\n    functions: 80\n    lines: 80\n\n  modules:\n    cream_api:\n      statements: 85\n      branches: 80\n      functions: 85\n      lines: 85\n\n    cream_ui:\n      statements: 80\n      branches: 75\n      functions: 80\n      lines: 80\n```\n\nThis coverage configuration will inform all test coverage requirements.\n\nAll modules must meet minimum coverage thresholds."
    },
    "test_data_management": {
      "title": "Test Data Management",
      "description": "```python",
      "content": "```python"
    },
    "test_data_patterns": {
      "title": "Test data patterns",
      "description": "import pytest\nfrom unittest.mock import Mock, patch\n\n@pytest.fixture\ndef sample_stock_data():\n    \"\"...",
      "content": "import pytest\nfrom unittest.mock import Mock, patch\n\n@pytest.fixture\ndef sample_stock_data():\n    \"\"\"Provide sample stock data for testing\"\"\"\n    return {\n        \"symbol\": \"AAPL\",\n        \"price\": 150.00,\n        \"change\": 2.50,\n        \"volume\": 1000000,\n        \"date\": \"2024-01-01\"\n    }\n\n@pytest.fixture\ndef mock_api_response():\n    \"\"\"Mock API response for testing\"\"\"\n    return {\n        \"success\": True,\n        \"data\": {\n            \"symbol\": \"AAPL\",\n            \"price\": 150.00\n        }\n    }\n\n@pytest.fixture\ndef test_database():\n    \"\"\"Provide test database connection\"\"\"\n    # Setup test database\n    db = create_test_database()\n    yield db\n    # Cleanup\n    db.close()\n```\n\nThis test data pattern will inform all test fixture implementation.\n\nAll tests must use proper fixtures and mock data."
    },
    "4_cicd_pipeline": {
      "title": "4. CI/CD Pipeline",
      "description": "",
      "content": ""
    },
    "github_actions_workflow": {
      "title": "GitHub Actions Workflow",
      "description": "```yaml",
      "content": "```yaml"
    },
    "githubworkflowsciyml": {
      "title": ".github/workflows/ci.yml",
      "description": "name: CI/CD Pipeline\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main,...",
      "content": "name: CI/CD Pipeline\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main, develop]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install poetry\n        poetry install\n\n    - name: Run linting\n      run: |\n        poetry run flake8 cream_api\n        poetry run black --check cream_api\n\n    - name: Run tests\n      run: |\n        poetry run pytest --cov=cream_api --cov-report=xml\n\n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n\n    - name: Run security scan\n      run: |\n        poetry run bandit -r cream_api/\n\n  build:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Build Docker image\n      run: |\n        docker build -t creampie:latest .\n\n    - name: Push to registry\n      run: |\n        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin\n        docker tag creampie:latest ${{ secrets.DOCKER_REGISTRY }}/creampie:latest\n        docker push ${{ secrets.DOCKER_REGISTRY }}/creampie:latest\n```\n\nThis CI/CD configuration will inform all automated pipeline implementation.\n\nAll code changes must pass CI/CD pipeline before deployment."
    },
    "deployment_stages": {
      "title": "Deployment Stages",
      "description": "```yaml",
      "content": "```yaml"
    },
    "deployment_configuration": {
      "title": "Deployment configuration",
      "description": "deployment:\n  stages:\n    - name: development\n      branch: develop\n      environment: dev\n      aut...",
      "content": "deployment:\n  stages:\n    - name: development\n      branch: develop\n      environment: dev\n      auto_deploy: true\n      tests: required\n\n    - name: staging\n      branch: staging\n      environment: staging\n      auto_deploy: false\n      tests: required\n      manual_approval: true\n\n    - name: production\n      branch: main\n      environment: production\n      auto_deploy: false\n      tests: required\n      manual_approval: true\n      rollback: enabled\n```\n\nThis deployment configuration will inform all deployment stage management.\n\nAll deployments must follow proper stage progression and approval."
    },
    "5_environment_management": {
      "title": "5. Environment Management",
      "description": "",
      "content": ""
    },
    "environment_configuration": {
      "title": "Environment Configuration",
      "description": "```bash",
      "content": "```bash"
    },
    "environment_variables_structure": {
      "title": "Environment variables structure",
      "description": "",
      "content": ""
    },
    "envdevelopment": {
      "title": ".env.development",
      "description": "DATABASE_URL=postgresql://user:pass@localhost:5432/creampie_dev\nREDIS_URL=redis://localhost:6379/0\nA...",
      "content": "DATABASE_URL=postgresql://user:pass@localhost:5432/creampie_dev\nREDIS_URL=redis://localhost:6379/0\nAPI_KEY=dev_api_key\nLOG_LEVEL=DEBUG\nENVIRONMENT=development"
    },
    "envstaging": {
      "title": ".env.staging",
      "description": "DATABASE_URL=postgresql://user:pass@staging-db:5432/creampie_staging\nREDIS_URL=redis://staging-redis...",
      "content": "DATABASE_URL=postgresql://user:pass@staging-db:5432/creampie_staging\nREDIS_URL=redis://staging-redis:6379/0\nAPI_KEY=staging_api_key\nLOG_LEVEL=INFO\nENVIRONMENT=staging"
    },
    "envproduction": {
      "title": ".env.production",
      "description": "DATABASE_URL=postgresql://user:pass@prod-db:5432/creampie_prod\nREDIS_URL=redis://prod-redis:6379/0\nA...",
      "content": "DATABASE_URL=postgresql://user:pass@prod-db:5432/creampie_prod\nREDIS_URL=redis://prod-redis:6379/0\nAPI_KEY=prod_api_key\nLOG_LEVEL=WARNING\nENVIRONMENT=production\n```\n\nThis environment configuration will inform all environment variable management.\n\nAll environments must have proper configuration and secrets management."
    },
    "database_migrations": {
      "title": "Database Migrations",
      "description": "```bash",
      "content": "```bash"
    },
    "migration_workflow": {
      "title": "Migration workflow",
      "description": "",
      "content": ""
    },
    "create_new_migration": {
      "title": "Create new migration",
      "description": "poetry run alembic revision --autogenerate -m \"description of changes\"",
      "content": "poetry run alembic revision --autogenerate -m \"description of changes\""
    },
    "apply_migrations": {
      "title": "Apply migrations",
      "description": "poetry run alembic upgrade head",
      "content": "poetry run alembic upgrade head"
    },
    "rollback_migration": {
      "title": "Rollback migration",
      "description": "poetry run alembic downgrade -1",
      "content": "poetry run alembic downgrade -1"
    },
    "check_migration_status": {
      "title": "Check migration status",
      "description": "poetry run alembic current",
      "content": "poetry run alembic current"
    },
    "generate_migration_script": {
      "title": "Generate migration script",
      "description": "poetry run alembic revision -m \"manual migration\"\n```\n\nThis migration workflow will inform all datab...",
      "content": "poetry run alembic revision -m \"manual migration\"\n```\n\nThis migration workflow will inform all database schema changes.\n\nAll database changes must use proper migration procedures."
    },
    "6_monitoring_and_logging": {
      "title": "6. Monitoring and Logging",
      "description": "",
      "content": ""
    },
    "application_monitoring": {
      "title": "Application Monitoring",
      "description": "```python",
      "content": "```python"
    },
    "monitoring_configuration": {
      "title": "Monitoring configuration",
      "description": "import logging\nfrom prometheus_client import Counter, Histogram, start_http_server",
      "content": "import logging\nfrom prometheus_client import Counter, Histogram, start_http_server"
    },
    "metrics": {
      "title": "Metrics",
      "description": "REQUEST_COUNT = Counter('http_requests_total', 'Total HTTP requests', ['method', 'endpoint'])\nREQUES...",
      "content": "REQUEST_COUNT = Counter('http_requests_total', 'Total HTTP requests', ['method', 'endpoint'])\nREQUEST_DURATION = Histogram('http_request_duration_seconds', 'HTTP request duration')"
    },
    "logging_configuration": {
      "title": "Logging configuration",
      "description": "logging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(...",
      "content": "logging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('app.log'),\n        logging.StreamHandler()\n    ]\n)"
    },
    "health_check_endpoint": {
      "title": "Health check endpoint",
      "description": "@app.get(\"/health\")\nasync def health_check():\n    return {\n        \"status\": \"healthy\",\n        \"tim...",
      "content": "@app.get(\"/health\")\nasync def health_check():\n    return {\n        \"status\": \"healthy\",\n        \"timestamp\": datetime.utcnow(),\n        \"version\": \"1.0.0\"\n    }\n```\n\nThis monitoring configuration will inform all application monitoring implementation.\n\nAll applications must include proper monitoring and health checks."
    },
    "error_tracking": {
      "title": "Error Tracking",
      "description": "```python",
      "content": "```python"
    },
    "error_tracking_configuration": {
      "title": "Error tracking configuration",
      "description": "import sentry_sdk\nfrom sentry_sdk.integrations.fastapi import FastApiIntegration\n\nsentry_sdk.init(\n ...",
      "content": "import sentry_sdk\nfrom sentry_sdk.integrations.fastapi import FastApiIntegration\n\nsentry_sdk.init(\n    dsn=os.getenv(\"SENTRY_DSN\"),\n    integrations=[FastApiIntegration()],\n    traces_sample_rate=1.0,\n    environment=os.getenv(\"ENVIRONMENT\", \"development\")\n)"
    },
    "custom_error_handling": {
      "title": "Custom error handling",
      "description": "@app.exception_handler(Exception)\nasync def global_exception_handler(request: Request, exc: Exceptio...",
      "content": "@app.exception_handler(Exception)\nasync def global_exception_handler(request: Request, exc: Exception):\n    # Log error\n    logger.error(f\"Unhandled exception: {exc}\", exc_info=True)\n\n    # Send to error tracking\n    sentry_sdk.capture_exception(exc)\n\n    return JSONResponse(\n        status_code=500,\n        content={\"detail\": \"Internal server error\"}\n    )\n```\n\nThis error tracking configuration will inform all error handling implementation.\n\nAll applications must include proper error tracking and handling."
    },
    "7_documentation_standards": {
      "title": "7. Documentation Standards",
      "description": "",
      "content": ""
    },
    "code_documentation": {
      "title": "Code Documentation",
      "description": "```python",
      "content": "```python"
    },
    "function_documentation": {
      "title": "Function documentation",
      "description": "def process_stock_data(symbol: str, data: dict) -> dict:\n    \"\"\"\n    Process raw stock data and retu...",
      "content": "def process_stock_data(symbol: str, data: dict) -> dict:\n    \"\"\"\n    Process raw stock data and return formatted results.\n\n    Args:\n        symbol (str): Stock symbol (e.g., 'AAPL')\n        data (dict): Raw stock data from API\n\n    Returns:\n        dict: Processed stock data with calculated fields\n\n    Raises:\n        ValueError: If symbol is invalid or data is malformed\n        ProcessingError: If data processing fails\n\n    Example:\n        >>> data = {\"price\": 150.00, \"volume\": 1000000}\n        >>> result = process_stock_data(\"AAPL\", data)\n        >>> print(result[\"formatted_price\"])\n        '$150.00'\n    \"\"\"\n    # Implementation here\n    pass\n```\n\nThis documentation pattern will inform all code documentation implementation.\n\nAll functions must include proper docstrings and examples."
    },
    "api_documentation": {
      "title": "API Documentation",
      "description": "```python",
      "content": "```python"
    },
    "fastapi_documentation": {
      "title": "FastAPI documentation",
      "description": "from fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\n\napp = FastAPI(\n    title=...",
      "content": "from fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\n\napp = FastAPI(\n    title=\"CreamPie API\",\n    description=\"Stock data processing and analysis API\",\n    version=\"1.0.0\",\n    docs_url=\"/docs\",\n    redoc_url=\"/redoc\"\n)\n\nclass StockData(BaseModel):\n    \"\"\"Stock data model for API requests\"\"\"\n    symbol: str = Field(..., description=\"Stock symbol (e.g., AAPL)\")\n    date: str = Field(..., description=\"Date in YYYY-MM-DD format\")\n\n    class Config:\n        schema_extra = {\n            \"example\": {\n                \"symbol\": \"AAPL\",\n                \"date\": \"2024-01-01\"\n            }\n        }\n\n@app.get(\"/api/stock/{symbol}\", response_model=StockData)\nasync def get_stock_data(\n    symbol: str = Path(..., description=\"Stock symbol to retrieve\"),\n    date: str = Query(..., description=\"Date for stock data\")\n):\n    \"\"\"\n    Retrieve stock data for a given symbol and date.\n\n    - **symbol**: Stock symbol (e.g., AAPL, TSLA)\n    - **date**: Date in YYYY-MM-DD format\n\n    Returns stock price, volume, and other market data.\n    \"\"\"\n    # Implementation here\n    pass\n```\n\nThis API documentation pattern will inform all API endpoint documentation.\n\nAll API endpoints must include proper documentation and examples."
    },
    "implementation_guidelines": {
      "title": "Implementation Guidelines",
      "description": "",
      "content": ""
    },
    "for_ai_assistants": {
      "title": "For AI Assistants",
      "description": "1. **Follow these patterns** for all development workflow implementation\n2. **Use proper Git workflo...",
      "content": "1. **Follow these patterns** for all development workflow implementation\n2. **Use proper Git workflow** with meaningful commit messages\n3. **Include comprehensive testing** with proper coverage\n4. **Follow CI/CD pipeline** requirements and validation\n5. **Implement proper monitoring** and error tracking\n6. **Update documentation** with all code changes\n7. **Follow security best practices** for all deployments\n8. **Use proper environment management** for all stages"
    },
    "for_human_developers": {
      "title": "For Human Developers",
      "description": "1. **Reference these patterns** when working on the project\n2. **Follow Git workflow** for all code ...",
      "content": "1. **Reference these patterns** when working on the project\n2. **Follow Git workflow** for all code changes\n3. **Write comprehensive tests** for new functionality\n4. **Use CI/CD pipeline** for automated validation\n5. **Monitor application health** and performance\n6. **Keep documentation updated** with changes\n7. **Follow security guidelines** for production deployments"
    },
    "quality_assurance": {
      "title": "Quality Assurance",
      "description": "",
      "content": ""
    },
    "development_standards": {
      "title": "Development Standards",
      "description": "- All code changes must follow Git workflow and branching strategy\n- All commits must include proper...",
      "content": "- All code changes must follow Git workflow and branching strategy\n- All commits must include proper commit messages and validation\n- All changes must pass automated testing before deployment\n- All deployments must follow proper environment promotion\n- All documentation must be updated with code changes"
    },
    "testing_standards": {
      "title": "Testing Standards",
      "description": "- Unit tests must cover all new functionality\n- Integration tests must validate component interactio...",
      "content": "- Unit tests must cover all new functionality\n- Integration tests must validate component interactions\n- Test coverage must meet minimum thresholds\n- Performance tests must be included for critical paths\n- Security tests must validate input handling"
    },
    "deployment_standards": {
      "title": "Deployment Standards",
      "description": "- All deployments must pass CI/CD pipeline validation\n- Environment promotion must follow proper seq...",
      "content": "- All deployments must pass CI/CD pipeline validation\n- Environment promotion must follow proper sequence\n- Rollback procedures must be tested and documented\n- Monitoring and alerting must be configured\n- Security scanning must be performed"
    },
    "documentation_standards": {
      "title": "Documentation Standards",
      "description": "- Code must be self-documenting with proper comments\n- API documentation must be comprehensive and u...",
      "content": "- Code must be self-documenting with proper comments\n- API documentation must be comprehensive and up-to-date\n- readme files must include setup and usage instructions\n- Architecture documentation must reflect current state\n- Change logs must be maintained for all releases\n\n---\n\n**AI Quality Checklist**: Before implementing development workflow changes, ensure:\n- [x] Git workflow follows branching strategy and commit standards\n- [x] Code review process includes comprehensive checklist\n- [x] Testing workflow covers all required test types\n- [x] CI/CD pipeline includes all validation steps\n- [x] Environment management follows proper configuration\n- [x] Monitoring and logging are properly configured\n- [x] Documentation standards are followed for all changes\n- [x] Security best practices are implemented throughout"
    }
  },
  "implementation_guidelines": {
    "examples": {
      "title": "Examples",
      "content": "feat(auth): add JWT authentication system\nfix(api): resolve rate limiting issue in stock data endpoint\ndocs(readme): update installation instructions\ntest(stock-data): add unit tests for data processor\nrefactor(ui): extract reusable button component\nchore(deps): update dependencies to latest versions\n```\n\nThis commit message format will inform all Git commit message creation.\n\nAll commits must follow this format with proper type and description."
    },
    "code_review_guidelines": {
      "title": "Code Review Guidelines",
      "content": "```markdown"
    },
    "implementation_guidelines": {
      "title": "Implementation Guidelines",
      "content": ""
    }
  }
}
