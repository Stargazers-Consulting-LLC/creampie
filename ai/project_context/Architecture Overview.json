{
  "ai_metadata": {
    "purpose": "",
    "last_updated": "",
    "template_version": "2.1",
    "ai_tool_compatibility": "",
    "ai_processing_level": "High",
    "required_context": "System architecture, microservices, API design, database design",
    "validation_required": "Yes",
    "code_generation": "Supported",
    "cross_references": [
      "../guide_docs/Core%20Principles.json",
      "../guide_docs/Language-Specific/FastAPI%20Development%20Guide.json",
      "../guide_docs/Language-Specific/Python%20Style%20Guide.json",
      "Common%20Patterns.json",
      "../features/summaries/[COMPLETED]-stock_data_processing_pipeline_summary.json"
    ],
    "maintenance": ""
  },
  "file_info": {
    "file_path": "project_context/Architecture Overview.md",
    "original_format": "markdown",
    "converted_at": "2025-06-18T19:14:30.266197",
    "file_size": 16150,
    "line_count": 395,
    "optimized_at": "2025-06-18T19:19:47.759048",
    "optimization_version": "1.0"
  },
  "content": {
    "sections": [
      {
        "level": 1,
        "title": "Architecture Overview",
        "content": "> This document provides a comprehensive overview of the system architecture. Use this for understanding the overall system design, component relationships, and architectural decisions.",
        "subsections": []
      },
      {
        "level": 2,
        "title": "AI Metadata",
        "content": "**Template Version:** 2.1\n**AI Processing Level:** High\n**Required Context:** System architecture, microservices, API design, database design\n**Validation Required:** Yes\n**Code Generation:** Supported\n\n**Dependencies:**\n- `../guide_docs/Core%20Principles.json.replace(\".json\", \".json\")` - Decision-making frameworks\n- `../guide_docs/Language-Specific/FastAPI%20Development%20Guide.json.replace(\".json\", \".json\")` - API implementation patterns\n- `../guide_docs/Language-Specific/Python%20Style%20Guide.json.replace(\".json\", \".json\")` - Python implementation patterns\n- `Common%20Patterns.json.replace(\".json\", \".json\")` - Project-specific patterns\n- `../features/summaries/[COMPLETED]-stock_data_processing_pipeline_summary.json.replace(\".json\", \".json\")` - Stock data implementation\n\n**Validation Rules:**\n- All architectural decisions must align with established patterns\n- Component relationships must be clearly defined\n- Data flow must be traceable and documented\n- Technology choices must be justified and consistent\n- Integration points must be well-defined",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Overview",
        "content": "**Document Purpose:** High-level system architecture and component relationships for the CreamPie project\n**Scope:** Complete system architecture, data flow, technology stack, and integration patterns\n**Target Users:** AI assistants and developers understanding system design\n**Last Updated:** Current\n\n**AI Context:** This document serves as the architectural foundation for all development decisions. It provides the system context needed to understand component relationships, data flow, and technology choices throughout the project.",
        "subsections": []
      },
      {
        "level": 2,
        "title": "System Architecture",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "High-Level Components",
        "content": "```\n┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n│   cream_ui      │    │   cream_api     │    │   External      │\n│   (Frontend)    │◄──►│   (Backend)     │◄──►│   Data Sources  │\n│                 │    │                 │    │                 │\n│ - React/TS      │    │ - FastAPI       │    │ - Stock APIs    │\n│ - Vite          │    │ - SQLAlchemy    │    │ - Web Scraping  │\n│ - Tailwind      │    │ - Alembic       │    │ - File Storage  │\n└─────────────────┘    └─────────────────┘    └─────────────────┘\n```\n\nThis architecture diagram will inform all component design and integration decisions.\n\nAll components must follow this architectural pattern and maintain clear separation of concerns.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Core Modules",
        "content": "",
        "subsections": []
      },
      {
        "level": 4,
        "title": "Backend (`cream_api/`)",
        "content": "- **`main.py`** - FastAPI application entry point and configuration\n- **`db.py`** - Database connection and session management\n- **`settings.py`** - Application configuration and environment variables\n- **`users/`** - User authentication and session management\n- **`stock_data/`** - Stock data retrieval, processing, and storage\n- **`migrations/`** - Database schema management with Alembic\n- **`background_tasks/`** - Asynchronous task processing\n\nThis module structure will inform all backend development and file organization.\n\nAll backend modules must follow this structure and naming conventions.",
        "subsections": []
      },
      {
        "level": 4,
        "title": "Frontend (`cream_ui/`)",
        "content": "- **`src/App.tsx`** - Main application component\n- **`src/pages/`** - Page components (Landing, Auth, etc.)\n- **`src/components/`** - Reusable UI components\n- **`src/hooks/`** - Custom React hooks\n- **`src/lib/`** - Utility functions and configurations\n\nThis module structure will inform all frontend development and component organization.\n\nAll frontend modules must follow this structure and React/TypeScript patterns.",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Data Flow",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Stock Data Pipeline",
        "content": "```\nExternal Source → Retriever → Parser → Processor → Database\n     ↓              ↓         ↓         ↓           ↓\n  HTML Files    Raw Data   Parsed    Processed   Stored\n                Storage    Data      Data        Data\n```\n\nThis data flow will inform all stock data processing implementation and error handling.\n\nAll stock data processing must follow this pipeline pattern with proper error handling at each stage.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "User Authentication Flow",
        "content": "```\nFrontend → API → Authentication → Session → Database\n   ↓        ↓         ↓            ↓         ↓\nLogin    Validate   Create      Store     Persist\nForm     Credentials Session    Token     Session\n```\n\nThis authentication flow will inform all user authentication implementation and security patterns.\n\nAll authentication flows must follow this pattern with proper security measures and session management.",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Key Design Patterns",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "1. Separation of Concerns",
        "content": "- **Data Retrieval**: `stock_data/retriever.py` - Handles external data fetching\n- **Data Parsing**: `stock_data/parser.py` - Converts raw data to structured format\n- **Data Processing**: `stock_data/processor.py` - Business logic and data transformation\n- **Data Storage**: `stock_data/loader.py` - Database operations\n\nThis separation of concerns will inform all module design and responsibility assignment.\n\nAll modules must maintain clear separation of concerns and single responsibility principle.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "2. Configuration Management",
        "content": "- **Environment-based**: Settings loaded from environment variables\n- **Module-specific**: Each module has its own configuration\n- **Type-safe**: Pydantic models for configuration validation\n\nThis configuration pattern will inform all settings management and environment variable usage.\n\nAll configuration must use Pydantic models and environment variable support.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "3. Background Processing",
        "content": "- **Asynchronous Tasks**: Long-running operations handled in background\n- **File Processing**: Batch processing of downloaded files\n- **Periodic Tasks**: Scheduled data retrieval and processing\n\nThis background processing pattern will inform all asynchronous task implementation.\n\nAll background tasks must include proper error handling and lifecycle management.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "4. Error Handling",
        "content": "- **Custom Exceptions**: Domain-specific error types\n- **Graceful Degradation**: System continues operating despite failures\n- **Comprehensive Logging**: Detailed error tracking and debugging\n\nThis error handling pattern will inform all exception handling and logging implementation.\n\nAll error handling must follow established patterns with proper logging and graceful degradation.",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Technology Stack",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Backend",
        "content": "- **FastAPI**: Modern, fast web framework for APIs\n- **SQLAlchemy**: SQL toolkit and ORM\n- **Alembic**: Database migration tool\n- **Pydantic**: Data validation and settings management\n- **aiohttp**: Asynchronous HTTP client/server\n- **BeautifulSoup**: HTML parsing and web scraping\n\nThis technology stack will inform all backend implementation and dependency choices.\n\nAll backend development must use these technologies and follow their best practices.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Frontend",
        "content": "- **React**: UI library with TypeScript\n- **Vite**: Fast build tool and dev server\n- **Tailwind CSS**: Utility-first CSS framework\n- **shadcn/ui**: High-quality component library\n\nThis technology stack will inform all frontend implementation and component development.\n\nAll frontend development must use these technologies and follow their established patterns.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Database",
        "content": "- **PostgreSQL**: Primary database\n- **SQLite**: Development and testing database\n\nThis database strategy will inform all database design and migration decisions.\n\nAll database operations must support both PostgreSQL and SQLite environments.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Development Tools",
        "content": "- **Poetry**: Python dependency management\n- **Yarn**: JavaScript package management\n- **pytest**: Python testing framework\n- **ESLint**: JavaScript/TypeScript linting\n\nThis tooling will inform all development workflow and quality assurance processes.\n\nAll development must use these tools and follow their established workflows.",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Integration Points",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "API Endpoints",
        "content": "- **Authentication**: `/auth/*` - Login, registration, session management\n- **Stock Data**: `/stock-data/*` - Data retrieval and processing\n- **User Management**: `/users/*` - User profile and preferences\n\nThis API structure will inform all endpoint design and routing decisions.\n\nAll API endpoints must follow this structure and include proper documentation.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Database Schema",
        "content": "- **Users**: Authentication and session data\n- **Stock Data**: Processed financial data\n- **File Storage**: Raw and parsed data files\n\nThis database schema will inform all data modeling and migration decisions.\n\nAll database schema changes must maintain data integrity and follow established patterns.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "External Integrations",
        "content": "- **Stock APIs**: Real-time and historical data\n- **Web Scraping**: Alternative data sources\n- **File System**: Local storage for downloaded data\n\nThis integration strategy will inform all external service integration and error handling.\n\nAll external integrations must include proper error handling and fallback mechanisms.",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Development Workflow",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Feature Development",
        "content": "1. **Database**: Create migrations for schema changes\n2. **Backend**: Implement API endpoints and business logic\n3. **Frontend**: Create UI components and integrate with API\n4. **Testing**: Write unit and integration tests\n5. **Documentation**: Update guides and technical summaries\n\nThis development workflow will inform all feature implementation and project management.\n\nAll feature development must follow this workflow and include proper testing and documentation.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Deployment Pipeline",
        "content": "1. **Development**: Local development with hot reloading\n2. **Testing**: Automated tests and code quality checks\n3. **Staging**: Environment for integration testing\n4. **Production**: Live deployment with monitoring\n\nThis deployment pipeline will inform all deployment and environment management decisions.\n\nAll deployments must follow this pipeline and include proper testing and monitoring.",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Common Patterns",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Error Handling",
        "content": "```python\ntry:\n    # Operation that might fail\n    result = await some_operation()\nexcept SpecificException as e:\n    logger.error(f\"Operation failed: {e}\")\n    raise CustomException(\"User-friendly message\") from e\n```\n\nThis error handling pattern will inform all exception handling implementation.\n\nAll error handling must follow this pattern with proper logging and user-friendly messages.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Configuration Loading",
        "content": "```python",
        "subsections": []
      },
      {
        "level": 1,
        "title": "Load once at module level",
        "content": "config = get_module_config()\n\ndef some_function():\n    # Use module-level config\n    processor = DataProcessor(config=config)\n```\n\nThis configuration pattern will inform all settings management implementation.\n\nAll configuration must be loaded at module level and cached appropriately.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Database Operations",
        "content": "```python\nasync with AsyncSessionLocal() as session:\n    async with session.begin():\n        # Database operations\n        session.add(model)\n        await session.commit()\n```\n\nThis database pattern will inform all database operation implementation.\n\nAll database operations must use proper session management and transaction handling.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Background Tasks",
        "content": "```python\n@background_task\nasync def process_files():\n    # Long-running operation\n    await file_processor.process_all_files()\n```\n\nThis background task pattern will inform all asynchronous task implementation.\n\nAll background tasks must include proper error handling and lifecycle management.",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Architecture Principles",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "1. Scalability",
        "content": "- **Horizontal Scaling**: Design for multiple instances\n- **Database Optimization**: Efficient queries and indexing\n- **Caching Strategy**: Reduce database load\n- **Async Processing**: Handle concurrent requests\n\nThese scalability principles will inform all performance optimization decisions.\n\nAll components must be designed for scalability and performance.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "2. Maintainability",
        "content": "- **Clear Separation**: Well-defined module boundaries\n- **Consistent Patterns**: Standardized implementation approaches\n- **Comprehensive Testing**: High test coverage\n- **Documentation**: Clear and up-to-date documentation\n\nThese maintainability principles will inform all code organization and quality decisions.\n\nAll code must follow maintainability principles and include proper documentation.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "3. Security",
        "content": "- **Authentication**: Secure user authentication\n- **Authorization**: Role-based access control\n- **Data Validation**: Input validation and sanitization\n- **Secure Communication**: HTTPS and secure headers\n\nThese security principles will inform all security implementation and validation.\n\nAll components must implement proper security measures and validation.",
        "subsections": []
      },
      {
        "level": 3,
        "title": "4. Reliability",
        "content": "- **Error Handling**: Comprehensive exception handling\n- **Graceful Degradation**: System continues operating despite failures\n- **Monitoring**: Health checks and performance monitoring\n- **Backup Strategy**: Data backup and recovery procedures\n\nThese reliability principles will inform all system resilience and monitoring decisions.\n\nAll components must include proper error handling and monitoring.",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Implementation Guidelines",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "For AI Assistants",
        "content": "1. **Reference this architecture** for all development decisions\n2. **Follow established patterns** for consistency\n3. **Maintain separation of concerns** in all modules\n4. **Use appropriate technologies** from the defined stack\n5. **Implement proper error handling** and logging\n6. **Follow security best practices** for all components\n7. **Design for scalability** and performance\n8. **Include comprehensive testing** for all features",
        "subsections": []
      },
      {
        "level": 3,
        "title": "For Human Developers",
        "content": "1. **Understand the architecture** before making changes\n2. **Follow established patterns** for consistency\n3. **Maintain code quality** and documentation\n4. **Test thoroughly** before deployment\n5. **Monitor performance** and errors\n6. **Update documentation** when making changes\n7. **Follow security guidelines** for all implementations",
        "subsections": []
      },
      {
        "level": 2,
        "title": "Quality Assurance",
        "content": "",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Architectural Standards",
        "content": "- All components must follow established architectural patterns\n- Data flow must be traceable and well-documented\n- Integration points must be clearly defined\n- Technology choices must be consistent and justified",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Performance Standards",
        "content": "- API response times must be under 500ms for simple operations\n- Database queries must be optimized and indexed\n- Background tasks must not block main application flow\n- System must handle concurrent requests efficiently",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Security Standards",
        "content": "- All endpoints must implement proper authentication\n- Data validation must be comprehensive\n- Sensitive data must be encrypted\n- Security headers must be properly configured",
        "subsections": []
      },
      {
        "level": 3,
        "title": "Reliability Standards",
        "content": "- System must handle failures gracefully\n- Error logging must be comprehensive\n- Health checks must be implemented\n- Backup and recovery procedures must be in place\n\n---\n\n**AI Quality Checklist**: Before implementing architectural changes, ensure:\n- [x] Changes align with established architectural patterns\n- [x] Data flow is properly documented and traceable\n- [x] Integration points are clearly defined\n- [x] Technology choices are consistent and justified\n- [x] Performance implications are considered\n- [x] Security measures are implemented\n- [x] Error handling is comprehensive\n- [x] Documentation is updated accordingly",
        "subsections": []
      }
    ],
    "code_blocks": [
      {
        "language": "text",
        "code": "┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n│   cream_ui      │    │   cream_api     │    │   External      │\n│   (Frontend)    │◄──►│   (Backend)     │◄──►│   Data Sources  │\n│                 │    │                 │    │                 │\n│ - React/TS      │    │ - FastAPI       │    │ - Stock APIs    │\n│ - Vite          │    │ - SQLAlchemy    │    │ - Web Scraping  │\n│ - Tailwind      │    │ - Alembic       │    │ - File Storage  │\n└─────────────────┘    └─────────────────┘    └─────────────────┘"
      },
      {
        "language": "text",
        "code": "External Source → Retriever → Parser → Processor → Database\n     ↓              ↓         ↓         ↓           ↓\n  HTML Files    Raw Data   Parsed    Processed   Stored\n                Storage    Data      Data        Data"
      },
      {
        "language": "text",
        "code": "Frontend → API → Authentication → Session → Database\n   ↓        ↓         ↓            ↓         ↓\nLogin    Validate   Create      Store     Persist\nForm     Credentials Session    Token     Session"
      },
      {
        "language": "python",
        "code": "try:\n    # Operation that might fail\n    result = await some_operation()\nexcept SpecificException as e:\n    logger.error(f\"Operation failed: {e}\")\n    raise CustomException(\"User-friendly message\") from e"
      },
      {
        "language": "python",
        "code": "# Load once at module level\nconfig = get_module_config()\n\ndef some_function():\n    # Use module-level config\n    processor = DataProcessor(config=config)"
      },
      {
        "language": "python",
        "code": "async with AsyncSessionLocal() as session:\n    async with session.begin():\n        # Database operations\n        session.add(model)\n        await session.commit()"
      },
      {
        "language": "python",
        "code": "@background_task\nasync def process_files():\n    # Long-running operation\n    await file_processor.process_all_files()"
      }
    ],
    "links": [
      {
        "type": "code_reference",
        "text": "../guide_docs/Core%20Principles.md"
      },
      {
        "type": "code_reference",
        "text": "../guide_docs/Language-Specific/FastAPI%20Development%20Guide.md"
      },
      {
        "type": "code_reference",
        "text": "../guide_docs/Language-Specific/Python%20Style%20Guide.md"
      },
      {
        "type": "code_reference",
        "text": "Common%20Patterns.md"
      },
      {
        "type": "code_reference",
        "text": "../features/summaries/[COMPLETED]-stock_data_processing_pipeline_summary.md"
      },
      {
        "type": "code_reference",
        "text": "\n\nThis architecture diagram will inform all component design and integration decisions.\n\nAll components must follow this architectural pattern and maintain clear separation of concerns.\n\n### Core Modules\n\n#### Backend ("
      },
      {
        "type": "code_reference",
        "text": "** - Asynchronous task processing\n\nThis module structure will inform all backend development and file organization.\n\nAll backend modules must follow this structure and naming conventions.\n\n#### Frontend ("
      },
      {
        "type": "code_reference",
        "text": "** - Page components (Landing, Auth, etc.)\n- **"
      },
      {
        "type": "code_reference",
        "text": "** - Utility functions and configurations\n\nThis module structure will inform all frontend development and component organization.\n\nAll frontend modules must follow this structure and React/TypeScript patterns.\n\n## Data Flow\n\n### Stock Data Pipeline\n"
      },
      {
        "type": "code_reference",
        "text": "\n\nThis data flow will inform all stock data processing implementation and error handling.\n\nAll stock data processing must follow this pipeline pattern with proper error handling at each stage.\n\n### User Authentication Flow\n"
      },
      {
        "type": "code_reference",
        "text": "\n\nThis authentication flow will inform all user authentication implementation and security patterns.\n\nAll authentication flows must follow this pattern with proper security measures and session management.\n\n## Key Design Patterns\n\n### 1. Separation of Concerns\n- **Data Retrieval**: "
      },
      {
        "type": "code_reference",
        "text": " - Database operations\n\nThis separation of concerns will inform all module design and responsibility assignment.\n\nAll modules must maintain clear separation of concerns and single responsibility principle.\n\n### 2. Configuration Management\n- **Environment-based**: Settings loaded from environment variables\n- **Module-specific**: Each module has its own configuration\n- **Type-safe**: Pydantic models for configuration validation\n\nThis configuration pattern will inform all settings management and environment variable usage.\n\nAll configuration must use Pydantic models and environment variable support.\n\n### 3. Background Processing\n- **Asynchronous Tasks**: Long-running operations handled in background\n- **File Processing**: Batch processing of downloaded files\n- **Periodic Tasks**: Scheduled data retrieval and processing\n\nThis background processing pattern will inform all asynchronous task implementation.\n\nAll background tasks must include proper error handling and lifecycle management.\n\n### 4. Error Handling\n- **Custom Exceptions**: Domain-specific error types\n- **Graceful Degradation**: System continues operating despite failures\n- **Comprehensive Logging**: Detailed error tracking and debugging\n\nThis error handling pattern will inform all exception handling and logging implementation.\n\nAll error handling must follow established patterns with proper logging and graceful degradation.\n\n## Technology Stack\n\n### Backend\n- **FastAPI**: Modern, fast web framework for APIs\n- **SQLAlchemy**: SQL toolkit and ORM\n- **Alembic**: Database migration tool\n- **Pydantic**: Data validation and settings management\n- **aiohttp**: Asynchronous HTTP client/server\n- **BeautifulSoup**: HTML parsing and web scraping\n\nThis technology stack will inform all backend implementation and dependency choices.\n\nAll backend development must use these technologies and follow their best practices.\n\n### Frontend\n- **React**: UI library with TypeScript\n- **Vite**: Fast build tool and dev server\n- **Tailwind CSS**: Utility-first CSS framework\n- **shadcn/ui**: High-quality component library\n\nThis technology stack will inform all frontend implementation and component development.\n\nAll frontend development must use these technologies and follow their established patterns.\n\n### Database\n- **PostgreSQL**: Primary database\n- **SQLite**: Development and testing database\n\nThis database strategy will inform all database design and migration decisions.\n\nAll database operations must support both PostgreSQL and SQLite environments.\n\n### Development Tools\n- **Poetry**: Python dependency management\n- **Yarn**: JavaScript package management\n- **pytest**: Python testing framework\n- **ESLint**: JavaScript/TypeScript linting\n\nThis tooling will inform all development workflow and quality assurance processes.\n\nAll development must use these tools and follow their established workflows.\n\n## Integration Points\n\n### API Endpoints\n- **Authentication**: "
      },
      {
        "type": "code_reference",
        "text": " - User profile and preferences\n\nThis API structure will inform all endpoint design and routing decisions.\n\nAll API endpoints must follow this structure and include proper documentation.\n\n### Database Schema\n- **Users**: Authentication and session data\n- **Stock Data**: Processed financial data\n- **File Storage**: Raw and parsed data files\n\nThis database schema will inform all data modeling and migration decisions.\n\nAll database schema changes must maintain data integrity and follow established patterns.\n\n### External Integrations\n- **Stock APIs**: Real-time and historical data\n- **Web Scraping**: Alternative data sources\n- **File System**: Local storage for downloaded data\n\nThis integration strategy will inform all external service integration and error handling.\n\nAll external integrations must include proper error handling and fallback mechanisms.\n\n## Development Workflow\n\n### Feature Development\n1. **Database**: Create migrations for schema changes\n2. **Backend**: Implement API endpoints and business logic\n3. **Frontend**: Create UI components and integrate with API\n4. **Testing**: Write unit and integration tests\n5. **Documentation**: Update guides and technical summaries\n\nThis development workflow will inform all feature implementation and project management.\n\nAll feature development must follow this workflow and include proper testing and documentation.\n\n### Deployment Pipeline\n1. **Development**: Local development with hot reloading\n2. **Testing**: Automated tests and code quality checks\n3. **Staging**: Environment for integration testing\n4. **Production**: Live deployment with monitoring\n\nThis deployment pipeline will inform all deployment and environment management decisions.\n\nAll deployments must follow this pipeline and include proper testing and monitoring.\n\n## Common Patterns\n\n### Error Handling\n"
      },
      {
        "type": "code_reference",
        "text": "python\ntry:\n    # Operation that might fail\n    result = await some_operation()\nexcept SpecificException as e:\n    logger.error(f\"Operation failed: {e}\")\n    raise CustomException(\"User-friendly message\") from e\n"
      },
      {
        "type": "code_reference",
        "text": "\n\nThis error handling pattern will inform all exception handling implementation.\n\nAll error handling must follow this pattern with proper logging and user-friendly messages.\n\n### Configuration Loading\n"
      },
      {
        "type": "code_reference",
        "text": "\n\nThis configuration pattern will inform all settings management implementation.\n\nAll configuration must be loaded at module level and cached appropriately.\n\n### Database Operations\n"
      },
      {
        "type": "code_reference",
        "text": "python\nasync with AsyncSessionLocal() as session:\n    async with session.begin():\n        # Database operations\n        session.add(model)\n        await session.commit()\n"
      },
      {
        "type": "code_reference",
        "text": "\n\nThis database pattern will inform all database operation implementation.\n\nAll database operations must use proper session management and transaction handling.\n\n### Background Tasks\n"
      },
      {
        "type": "code_reference",
        "text": "python\n@background_task\nasync def process_files():\n    # Long-running operation\n    await file_processor.process_all_files()\n"
      }
    ],
    "raw_content": "# Architecture Overview\n\n> This document provides a comprehensive overview of the system architecture. Use this for understanding the overall system design, component relationships, and architectural decisions.\n\n## AI Metadata\n\n**Template Version:** 2.1\n**AI Processing Level:** High\n**Required Context:** System architecture, microservices, API design, database design\n**Validation Required:** Yes\n**Code Generation:** Supported\n\n**Dependencies:**\n- `../guide_docs/Core%20Principles.md` - Decision-making frameworks\n- `../guide_docs/Language-Specific/FastAPI%20Development%20Guide.md` - API implementation patterns\n- `../guide_docs/Language-Specific/Python%20Style%20Guide.md` - Python implementation patterns\n- `Common%20Patterns.md` - Project-specific patterns\n- `../features/summaries/[COMPLETED]-stock_data_processing_pipeline_summary.md` - Stock data implementation\n\n**Validation Rules:**\n- All architectural decisions must align with established patterns\n- Component relationships must be clearly defined\n- Data flow must be traceable and documented\n- Technology choices must be justified and consistent\n- Integration points must be well-defined\n\n## Overview\n\n**Document Purpose:** High-level system architecture and component relationships for the CreamPie project\n**Scope:** Complete system architecture, data flow, technology stack, and integration patterns\n**Target Users:** AI assistants and developers understanding system design\n**Last Updated:** Current\n\n**AI Context:** This document serves as the architectural foundation for all development decisions. It provides the system context needed to understand component relationships, data flow, and technology choices throughout the project.\n\n## System Architecture\n\n### High-Level Components\n\n```\n┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n│   cream_ui      │    │   cream_api     │    │   External      │\n│   (Frontend)    │◄──►│   (Backend)     │◄──►│   Data Sources  │\n│                 │    │                 │    │                 │\n│ - React/TS      │    │ - FastAPI       │    │ - Stock APIs    │\n│ - Vite          │    │ - SQLAlchemy    │    │ - Web Scraping  │\n│ - Tailwind      │    │ - Alembic       │    │ - File Storage  │\n└─────────────────┘    └─────────────────┘    └─────────────────┘\n```\n\nThis architecture diagram will inform all component design and integration decisions.\n\nAll components must follow this architectural pattern and maintain clear separation of concerns.\n\n### Core Modules\n\n#### Backend (`cream_api/`)\n- **`main.py`** - FastAPI application entry point and configuration\n- **`db.py`** - Database connection and session management\n- **`settings.py`** - Application configuration and environment variables\n- **`users/`** - User authentication and session management\n- **`stock_data/`** - Stock data retrieval, processing, and storage\n- **`migrations/`** - Database schema management with Alembic\n- **`background_tasks/`** - Asynchronous task processing\n\nThis module structure will inform all backend development and file organization.\n\nAll backend modules must follow this structure and naming conventions.\n\n#### Frontend (`cream_ui/`)\n- **`src/App.tsx`** - Main application component\n- **`src/pages/`** - Page components (Landing, Auth, etc.)\n- **`src/components/`** - Reusable UI components\n- **`src/hooks/`** - Custom React hooks\n- **`src/lib/`** - Utility functions and configurations\n\nThis module structure will inform all frontend development and component organization.\n\nAll frontend modules must follow this structure and React/TypeScript patterns.\n\n## Data Flow\n\n### Stock Data Pipeline\n```\nExternal Source → Retriever → Parser → Processor → Database\n     ↓              ↓         ↓         ↓           ↓\n  HTML Files    Raw Data   Parsed    Processed   Stored\n                Storage    Data      Data        Data\n```\n\nThis data flow will inform all stock data processing implementation and error handling.\n\nAll stock data processing must follow this pipeline pattern with proper error handling at each stage.\n\n### User Authentication Flow\n```\nFrontend → API → Authentication → Session → Database\n   ↓        ↓         ↓            ↓         ↓\nLogin    Validate   Create      Store     Persist\nForm     Credentials Session    Token     Session\n```\n\nThis authentication flow will inform all user authentication implementation and security patterns.\n\nAll authentication flows must follow this pattern with proper security measures and session management.\n\n## Key Design Patterns\n\n### 1. Separation of Concerns\n- **Data Retrieval**: `stock_data/retriever.py` - Handles external data fetching\n- **Data Parsing**: `stock_data/parser.py` - Converts raw data to structured format\n- **Data Processing**: `stock_data/processor.py` - Business logic and data transformation\n- **Data Storage**: `stock_data/loader.py` - Database operations\n\nThis separation of concerns will inform all module design and responsibility assignment.\n\nAll modules must maintain clear separation of concerns and single responsibility principle.\n\n### 2. Configuration Management\n- **Environment-based**: Settings loaded from environment variables\n- **Module-specific**: Each module has its own configuration\n- **Type-safe**: Pydantic models for configuration validation\n\nThis configuration pattern will inform all settings management and environment variable usage.\n\nAll configuration must use Pydantic models and environment variable support.\n\n### 3. Background Processing\n- **Asynchronous Tasks**: Long-running operations handled in background\n- **File Processing**: Batch processing of downloaded files\n- **Periodic Tasks**: Scheduled data retrieval and processing\n\nThis background processing pattern will inform all asynchronous task implementation.\n\nAll background tasks must include proper error handling and lifecycle management.\n\n### 4. Error Handling\n- **Custom Exceptions**: Domain-specific error types\n- **Graceful Degradation**: System continues operating despite failures\n- **Comprehensive Logging**: Detailed error tracking and debugging\n\nThis error handling pattern will inform all exception handling and logging implementation.\n\nAll error handling must follow established patterns with proper logging and graceful degradation.\n\n## Technology Stack\n\n### Backend\n- **FastAPI**: Modern, fast web framework for APIs\n- **SQLAlchemy**: SQL toolkit and ORM\n- **Alembic**: Database migration tool\n- **Pydantic**: Data validation and settings management\n- **aiohttp**: Asynchronous HTTP client/server\n- **BeautifulSoup**: HTML parsing and web scraping\n\nThis technology stack will inform all backend implementation and dependency choices.\n\nAll backend development must use these technologies and follow their best practices.\n\n### Frontend\n- **React**: UI library with TypeScript\n- **Vite**: Fast build tool and dev server\n- **Tailwind CSS**: Utility-first CSS framework\n- **shadcn/ui**: High-quality component library\n\nThis technology stack will inform all frontend implementation and component development.\n\nAll frontend development must use these technologies and follow their established patterns.\n\n### Database\n- **PostgreSQL**: Primary database\n- **SQLite**: Development and testing database\n\nThis database strategy will inform all database design and migration decisions.\n\nAll database operations must support both PostgreSQL and SQLite environments.\n\n### Development Tools\n- **Poetry**: Python dependency management\n- **Yarn**: JavaScript package management\n- **pytest**: Python testing framework\n- **ESLint**: JavaScript/TypeScript linting\n\nThis tooling will inform all development workflow and quality assurance processes.\n\nAll development must use these tools and follow their established workflows.\n\n## Integration Points\n\n### API Endpoints\n- **Authentication**: `/auth/*` - Login, registration, session management\n- **Stock Data**: `/stock-data/*` - Data retrieval and processing\n- **User Management**: `/users/*` - User profile and preferences\n\nThis API structure will inform all endpoint design and routing decisions.\n\nAll API endpoints must follow this structure and include proper documentation.\n\n### Database Schema\n- **Users**: Authentication and session data\n- **Stock Data**: Processed financial data\n- **File Storage**: Raw and parsed data files\n\nThis database schema will inform all data modeling and migration decisions.\n\nAll database schema changes must maintain data integrity and follow established patterns.\n\n### External Integrations\n- **Stock APIs**: Real-time and historical data\n- **Web Scraping**: Alternative data sources\n- **File System**: Local storage for downloaded data\n\nThis integration strategy will inform all external service integration and error handling.\n\nAll external integrations must include proper error handling and fallback mechanisms.\n\n## Development Workflow\n\n### Feature Development\n1. **Database**: Create migrations for schema changes\n2. **Backend**: Implement API endpoints and business logic\n3. **Frontend**: Create UI components and integrate with API\n4. **Testing**: Write unit and integration tests\n5. **Documentation**: Update guides and technical summaries\n\nThis development workflow will inform all feature implementation and project management.\n\nAll feature development must follow this workflow and include proper testing and documentation.\n\n### Deployment Pipeline\n1. **Development**: Local development with hot reloading\n2. **Testing**: Automated tests and code quality checks\n3. **Staging**: Environment for integration testing\n4. **Production**: Live deployment with monitoring\n\nThis deployment pipeline will inform all deployment and environment management decisions.\n\nAll deployments must follow this pipeline and include proper testing and monitoring.\n\n## Common Patterns\n\n### Error Handling\n```python\ntry:\n    # Operation that might fail\n    result = await some_operation()\nexcept SpecificException as e:\n    logger.error(f\"Operation failed: {e}\")\n    raise CustomException(\"User-friendly message\") from e\n```\n\nThis error handling pattern will inform all exception handling implementation.\n\nAll error handling must follow this pattern with proper logging and user-friendly messages.\n\n### Configuration Loading\n```python\n# Load once at module level\nconfig = get_module_config()\n\ndef some_function():\n    # Use module-level config\n    processor = DataProcessor(config=config)\n```\n\nThis configuration pattern will inform all settings management implementation.\n\nAll configuration must be loaded at module level and cached appropriately.\n\n### Database Operations\n```python\nasync with AsyncSessionLocal() as session:\n    async with session.begin():\n        # Database operations\n        session.add(model)\n        await session.commit()\n```\n\nThis database pattern will inform all database operation implementation.\n\nAll database operations must use proper session management and transaction handling.\n\n### Background Tasks\n```python\n@background_task\nasync def process_files():\n    # Long-running operation\n    await file_processor.process_all_files()\n```\n\nThis background task pattern will inform all asynchronous task implementation.\n\nAll background tasks must include proper error handling and lifecycle management.\n\n## Architecture Principles\n\n### 1. Scalability\n- **Horizontal Scaling**: Design for multiple instances\n- **Database Optimization**: Efficient queries and indexing\n- **Caching Strategy**: Reduce database load\n- **Async Processing**: Handle concurrent requests\n\nThese scalability principles will inform all performance optimization decisions.\n\nAll components must be designed for scalability and performance.\n\n### 2. Maintainability\n- **Clear Separation**: Well-defined module boundaries\n- **Consistent Patterns**: Standardized implementation approaches\n- **Comprehensive Testing**: High test coverage\n- **Documentation**: Clear and up-to-date documentation\n\nThese maintainability principles will inform all code organization and quality decisions.\n\nAll code must follow maintainability principles and include proper documentation.\n\n### 3. Security\n- **Authentication**: Secure user authentication\n- **Authorization**: Role-based access control\n- **Data Validation**: Input validation and sanitization\n- **Secure Communication**: HTTPS and secure headers\n\nThese security principles will inform all security implementation and validation.\n\nAll components must implement proper security measures and validation.\n\n### 4. Reliability\n- **Error Handling**: Comprehensive exception handling\n- **Graceful Degradation**: System continues operating despite failures\n- **Monitoring**: Health checks and performance monitoring\n- **Backup Strategy**: Data backup and recovery procedures\n\nThese reliability principles will inform all system resilience and monitoring decisions.\n\nAll components must include proper error handling and monitoring.\n\n## Implementation Guidelines\n\n### For AI Assistants\n1. **Reference this architecture** for all development decisions\n2. **Follow established patterns** for consistency\n3. **Maintain separation of concerns** in all modules\n4. **Use appropriate technologies** from the defined stack\n5. **Implement proper error handling** and logging\n6. **Follow security best practices** for all components\n7. **Design for scalability** and performance\n8. **Include comprehensive testing** for all features\n\n### For Human Developers\n1. **Understand the architecture** before making changes\n2. **Follow established patterns** for consistency\n3. **Maintain code quality** and documentation\n4. **Test thoroughly** before deployment\n5. **Monitor performance** and errors\n6. **Update documentation** when making changes\n7. **Follow security guidelines** for all implementations\n\n## Quality Assurance\n\n### Architectural Standards\n- All components must follow established architectural patterns\n- Data flow must be traceable and well-documented\n- Integration points must be clearly defined\n- Technology choices must be consistent and justified\n\n### Performance Standards\n- API response times must be under 500ms for simple operations\n- Database queries must be optimized and indexed\n- Background tasks must not block main application flow\n- System must handle concurrent requests efficiently\n\n### Security Standards\n- All endpoints must implement proper authentication\n- Data validation must be comprehensive\n- Sensitive data must be encrypted\n- Security headers must be properly configured\n\n### Reliability Standards\n- System must handle failures gracefully\n- Error logging must be comprehensive\n- Health checks must be implemented\n- Backup and recovery procedures must be in place\n\n---\n\n**AI Quality Checklist**: Before implementing architectural changes, ensure:\n- [x] Changes align with established architectural patterns\n- [x] Data flow is properly documented and traceable\n- [x] Integration points are clearly defined\n- [x] Technology choices are consistent and justified\n- [x] Performance implications are considered\n- [x] Security measures are implemented\n- [x] Error handling is comprehensive\n- [x] Documentation is updated accordingly\n"
  },
  "cross_references": [],
  "code_generation_hints": [
    {
      "context": "general",
      "hint": "This architecture diagram will inform all component design and integration decisions.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This module structure will inform all backend development and file organization.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This module structure will inform all frontend development and component organization.",
      "validation": ""
    },
    {
      "context": "error handling",
      "hint": "This data flow will inform all stock data processing implementation and error handling.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This authentication flow will inform all user authentication implementation and security patterns.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This separation of concerns will inform all module design and responsibility assignment.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This configuration pattern will inform all settings management and environment variable usage.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This background processing pattern will inform all asynchronous task implementation.",
      "validation": ""
    },
    {
      "context": "error handling",
      "hint": "This error handling pattern will inform all exception handling and logging implementation.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This technology stack will inform all backend implementation and dependency choices.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This technology stack will inform all frontend implementation and component development.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This database strategy will inform all database design and migration decisions.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This tooling will inform all development workflow and quality assurance processes.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This API structure will inform all endpoint design and routing decisions.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This database schema will inform all data modeling and migration decisions.",
      "validation": ""
    },
    {
      "context": "error handling",
      "hint": "This integration strategy will inform all external service integration and error handling.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This development workflow will inform all feature implementation and project management.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This deployment pipeline will inform all deployment and environment management decisions.",
      "validation": ""
    },
    {
      "context": "error handling",
      "hint": "This error handling pattern will inform all exception handling implementation.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This configuration pattern will inform all settings management implementation.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This database pattern will inform all database operation implementation.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "This background task pattern will inform all asynchronous task implementation.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "These scalability principles will inform all performance optimization decisions.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "These maintainability principles will inform all code organization and quality decisions.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "These security principles will inform all security implementation and validation.",
      "validation": ""
    },
    {
      "context": "general",
      "hint": "These reliability principles will inform all system resilience and monitoring decisions.",
      "validation": ""
    }
  ],
  "validation_rules": [
    "All authentication flows must follow this pattern with proper security measures and session management",
    "All error handling must follow this pattern with proper logging and user-friendly messages",
    "All background tasks must include proper error handling and lifecycle management",
    "Data flow must be traceable and documented",
    "All modules must maintain clear separation of concerns and single responsibility principle",
    "All API endpoints must follow this structure and include proper documentation",
    "Sensitive data must be encrypted",
    "All backend modules must follow this structure and naming conventions",
    "All endpoints must implement proper authentication",
    "Integration points must be well-defined",
    "All development must use these tools and follow their established workflows",
    "Database queries must be optimized and indexed",
    "All frontend development must use these technologies and follow their established patterns",
    "All feature development must follow this workflow and include proper testing and documentation",
    "All deployments must follow this pipeline and include proper testing and monitoring",
    "All external integrations must include proper error handling and fallback mechanisms",
    "API response times must be under 500ms for simple operations",
    "Component relationships must be clearly defined",
    "All components must include proper error handling and monitoring",
    "All database schema changes must maintain data integrity and follow established patterns",
    "Backup and recovery procedures must be in place",
    "Data validation must be comprehensive",
    "All error handling must follow established patterns with proper logging and graceful degradation",
    "Integration points must be clearly defined",
    "All database operations must use proper session management and transaction handling",
    "All components must be designed for scalability and performance",
    "Background tasks must not block main application flow",
    "Security headers must be properly configured",
    "All configuration must use Pydantic models and environment variable support",
    "Error logging must be comprehensive",
    "System must handle failures gracefully",
    "Data flow must be traceable and well-documented",
    "System must handle concurrent requests efficiently",
    "All database operations must support both PostgreSQL and SQLite environments",
    "All code must follow maintainability principles and include proper documentation",
    "Technology choices must be consistent and justified",
    "All configuration must be loaded at module level and cached appropriately",
    "Health checks must be implemented",
    "All stock data processing must follow this pipeline pattern with proper error handling at each stage",
    "All frontend modules must follow this structure and React/TypeScript patterns",
    "All components must implement proper security measures and validation",
    "All architectural decisions must align with established patterns",
    "Technology choices must be justified and consistent",
    "All backend development must use these technologies and follow their best practices",
    "All components must follow established architectural patterns",
    "All components must follow this architectural pattern and maintain clear separation of concerns"
  ],
  "optimization": {
    "version": "1.0",
    "optimized_at": "2025-06-18T19:19:47.759052",
    "improvements": [
      "fixed_file_references",
      "extracted_ai_metadata",
      "structured_cross_references",
      "extracted_code_hints",
      "structured_validation_rules"
    ],
    "literal_strings_cleaned": true,
    "cleaned_at": "2025-06-18T19:30:00.000000"
  }
}