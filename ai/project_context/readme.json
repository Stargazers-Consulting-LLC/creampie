{
  "metadata": {
    "title": "Project Context",
    "description": "",
    "version": "3.1",
    "last_updated": "2025-06-18",
    "source": "project_context/readme.md",
    "cross_references": [
      "../guide_docs/core_principles.json",
      "../guide_docs/feature_template.json"
    ]
  },
  "sections": {
    "project_context": {
      "title": "Project Context",
      "description": "> This folder contains project-specific context, architecture information, and development patterns....",
      "content": "> This folder contains project-specific context, architecture information, and development patterns. Use this for understanding the project structure, common patterns, and development workflow."
    },
    "ai_metadata": {
      "title": "AI Metadata",
      "description": "**Template Version:** 2.1\n**AI Processing Level:** High\n**Required Context:** Project architecture, ...",
      "content": "**Template Version:** 2.1\n**AI Processing Level:** High\n**Required Context:** Project architecture, development patterns, system integration\n**Validation Required:** Yes\n**Code Generation:** Supported\n**Search Optimization:** Enhanced\n\n**Dependencies:**\n- `../guide_docs/core_principles.json.replace(\".json\", \".json\")` - Decision-making frameworks\n- `../guide_docs/feature_template.json.replace(\".json\", \".json\")` - Feature development patterns\n- `../features/summaries/` - Implementation details\n\n**Validation Rules:**\n- All architectural decisions must align with established patterns\n- Integration points must follow defined interfaces\n- Development workflow must be consistently applied\n- Patterns must be validated against current implementation\n\n**Keywords:** architecture, patterns, workflow, integration, system design, development process"
    },
    "purpose": {
      "title": "Purpose",
      "description": "Project context provides:\n- **System architecture** understanding and component relationships\n- **De...",
      "content": "Project context provides:\n- **System architecture** understanding and component relationships\n- **Development patterns** and conventions used in the project\n- **Workflow processes** for feature development and deployment\n- **Historical context** for architectural decisions\n- **Integration patterns** between different parts of the system"
    },
    "organization": {
      "title": "Organization",
      "description": "",
      "content": ""
    },
    "core_documentation": {
      "title": "Core Documentation",
      "description": "- **[architecture_overview.json](architecture_overview.json.replace(\".json\", \".json\"))** - High-leve...",
      "content": "- **[architecture_overview.json](architecture_overview.json.replace(\".json\", \".json\"))** - High-level system design and component relationships\n- **[common_patterns.json](common_patterns.json.replace(\".json\", \".json\"))** - Project-specific patterns and conventions\n- **[development_workflow.json](development_workflow.json.replace(\".json\", \".json\"))** - How features flow from idea to deployment"
    },
    "usage": {
      "title": "Usage",
      "description": "",
      "content": ""
    },
    "for_new_features": {
      "title": "For New Features",
      "description": "1. **Start with architecture_overview** - Understand how your feature fits into the system\n2. **Chec...",
      "content": "1. **Start with architecture_overview** - Understand how your feature fits into the system\n2. **Check common_patterns** - Follow established conventions\n3. **Follow development_workflow** - Use the established process"
    },
    "for_code_reviews": {
      "title": "For Code Reviews",
      "description": "1. **Reference common_patterns** - Ensure code follows project conventions\n2. **Check architecture_o...",
      "content": "1. **Reference common_patterns** - Ensure code follows project conventions\n2. **Check architecture_overview** - Verify integration points are correct\n3. **Consider development_workflow** - Ensure process is being followed"
    },
    "for_system_understanding": {
      "title": "For System Understanding",
      "description": "1. **Read architecture_overview** - Get the big picture\n2. **Study common_patterns** - Understand im...",
      "content": "1. **Read architecture_overview** - Get the big picture\n2. **Study common_patterns** - Understand implementation approaches\n3. **Review development_workflow** - Understand the development process"
    },
    "key_concepts": {
      "title": "Key Concepts",
      "description": "",
      "content": ""
    },
    "architecture_principles": {
      "title": "Architecture Principles",
      "description": "- **Modular Design** - Clear separation of concerns\n- **API-First** - Well-defined interfaces betwee...",
      "content": "- **Modular Design** - Clear separation of concerns\n- **API-First** - Well-defined interfaces between components\n- **Background Processing** - Asynchronous data processing\n- **Error Handling** - Graceful failure and recovery"
    },
    "development_patterns": {
      "title": "Development Patterns",
      "description": "- **Feature Isolation** - Keep features self-contained\n- **Test-Driven** - Comprehensive testing at ...",
      "content": "- **Feature Isolation** - Keep features self-contained\n- **Test-Driven** - Comprehensive testing at all levels\n- **Documentation-First** - Clear documentation for all components\n- **Incremental Development** - Small, focused changes"
    },
    "integration_patterns": {
      "title": "Integration Patterns",
      "description": "- **RESTful APIs** - Standard HTTP-based communication\n- **Background Tasks** - Asynchronous process...",
      "content": "- **RESTful APIs** - Standard HTTP-based communication\n- **Background Tasks** - Asynchronous processing\n- **Database Migrations** - Version-controlled schema changes\n- **Frontend-Backend Separation** - Clear API boundaries"
    },
    "maintenance": {
      "title": "Maintenance",
      "description": "- **Update architecture_overview** when system design changes\n- **Add new patterns** to common_patte...",
      "content": "- **Update architecture_overview** when system design changes\n- **Add new patterns** to common_patterns as they emerge\n- **Refine development_workflow** based on team feedback\n- **Keep documentation current** with actual implementation"
    },
    "related_documentation": {
      "title": "Related Documentation",
      "description": "- **[Technical Summaries](../features/summaries/)** - Detailed module analysis\n- **[Implementation P...",
      "content": "- **[Technical Summaries](../features/summaries/)** - Detailed module analysis\n- **[Implementation Plans](../features/plans/)** - Feature development plans\n- **[Style Guides](../guide_docs/)** - Language and domain_specific patterns"
    }
  },
  "implementation_guidelines": {
    "usage": {
      "title": "Usage",
      "content": ""
    }
  }
}
