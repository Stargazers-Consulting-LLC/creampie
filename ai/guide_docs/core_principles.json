{
  "metadata": {
    "title": "Core Development Principles",
    "description": "Fundamental decision-making frameworks with mandatory style guide compliance",
    "version": "3.1",
    "last_updated": "2025-01-27",
    "source": "guide_docs/core_principles.md",
    "cross_references": [
      "../project_context/architecture_overview.json",
      "../project_context/common_patterns.json",
      "../project_context/development_workflow.json",
      "language_specific/python_style_guide.json",
      "language_specific/fastapi_development_guide.json",
      "humans/guides/python_style_guide.md"
    ]
  },
  "sections": {
    "core_development_principles": {
      "title": "Core Development Principles",
      "description": "> This guide outlines the fundamental principles that guide all development decisions. Use these principles to ensure consistent, high-quality development practices across the project.",
      "content": "> This guide outlines the fundamental principles that guide all development decisions. Use these principles to ensure consistent, high-quality development practices across the project."
    },
    "ai_metadata": {
      "title": "AI Metadata",
      "description": "**Template Version:** 2.4\n**AI Processing Level:** High\n**Required Context:** Project architecture, user intent, current codebase state\n**Validation Required:** Yes\n**Code Generation:** Supported\n**Style Guide Compliance:** MANDATORY\n\n**Dependencies:**\n- `../project_context/architecture_overview.json` - System architecture\n- `../project_context/common_patterns.json` - Project patterns\n- `../project_context/development_workflow.json` - Development process\n- `language_specific/python_style_guide.json` - Python implementation patterns\n- `language_specific/fastapi_development_guide.json` - API development patterns\n- `humans/guides/python_style_guide.md` - Primary style guide reference\n\n**Validation Rules:**\n- All decision frameworks must be consistently applied\n- Context awareness must be maintained throughout interactions\n- Error handling must follow established project patterns\n- Code quality principles must align with project standards\n- Communication patterns must be constructive and educational\n- Python style guide patterns must be STRICTLY followed\n- Style guide compliance is MANDATORY for all code generation\n- Legal notices must be included in all Python modules\n- Import organization must follow established patterns\n- Type hints must be used for all functions"
    },
    "overview": {
      "title": "Overview",
      "description": "**Document Purpose:** Fundamental decision-making frameworks for AI development assistance with mandatory style guide compliance\n**Scope:** All development tasks, code reviews, and refactoring decisions\n**Target Users:** AI assistants providing development support\n**Last Updated:** Current\n**Style Guide Integration:** MANDATORY\n\n**AI Context:** This document serves as the primary decision-making framework for all AI development assistance. It provides consistent patterns for analyzing user requests, making decisions, and providing guidance that aligns with project standards and user needs. Style guide compliance is CRITICAL and must be enforced in all code generation and review activities.",
      "content": "**Document Purpose:** Fundamental decision-making frameworks for AI development assistance with mandatory style guide compliance\n**Scope:** All development tasks, code reviews, and refactoring decisions\n**Target Users:** AI assistants providing development support\n**Last Updated:** Current\n**Style Guide Integration:** MANDATORY\n\n**AI Context:** This document serves as the primary decision-making framework for all AI development assistance. It provides consistent patterns for analyzing user requests, making decisions, and providing guidance that aligns with project standards and user needs. Style guide compliance is CRITICAL and must be enforced in all code generation and review activities."
    },
    "1_decision_making_frameworks": {
      "title": "1. Decision-Making Frameworks",
      "description": "",
      "content": ""
    },
    "when_to_suggest_refactoring_vs_new_code": {
      "title": "When to Suggest Refactoring vs. New Code",
      "description": "- **Refactor when**: Code exists but has style violations, minor bugs, or can be improved\n- **New code when**: Feature doesn't exist, major architectural changes needed, or user explicitly requests new functionality\n- **Always consider**: User's current context and what they're trying to accomplish\n- **Style guide violations**: ALWAYS suggest refactoring to fix style guide violations\n\nThis framework will inform whether to suggest code changes or new implementations.\n\nDecisions must be justified with specific reasoning and align with project patterns.\n\nStyle guide compliance is MANDATORY for all code generation.",
      "content": "- **Refactor when**: Code exists but has style violations, minor bugs, or can be improved\n- **New code when**: Feature doesn't exist, major architectural changes needed, or user explicitly requests new functionality\n- **Always consider**: User's current context and what they're trying to accomplish\n- **Style guide violations**: ALWAYS suggest refactoring to fix style guide violations\n\nThis framework will inform whether to suggest code changes or new implementations.\n\nDecisions must be justified with specific reasoning and align with project patterns.\n\nStyle guide compliance is MANDATORY for all code generation."
    },
    "when_to_be_strict_vs_flexible": {
      "title": "When to Be Strict vs. Flexible",
      "description": "- **Strict about**: Application logic failures, security issues, data integrity, Python style guide violations, missing legal notices, import organization, type hints\n- **Flexible about**: Minor style preferences, personal coding choices, non-critical optimizations\n- **Always**: Explain the reasoning behind strict vs. flexible decisions\n- **Style guide**: ALWAYS be strict about style guide compliance\n\nThis philosophy will inform the tone and approach to error handling suggestions.\n\nError handling guidance must align with project security and data integrity requirements.\n\nStyle guide violations are CRITICAL and must be addressed immediately.",
      "content": "- **Strict about**: Application logic failures, security issues, data integrity, Python style guide violations, missing legal notices, import organization, type hints\n- **Flexible about**: Minor style preferences, personal coding choices, non-critical optimizations\n- **Always**: Explain the reasoning behind strict vs. flexible decisions\n- **Style guide**: ALWAYS be strict about style guide compliance\n\nThis philosophy will inform the tone and approach to error handling suggestions.\n\nError handling guidance must align with project security and data integrity requirements.\n\nStyle guide violations are CRITICAL and must be addressed immediately."
    },
    "priority_systems_for_code_issues": {
      "title": "Priority Systems for Code Issues",
      "description": "1. **Critical**: Python style guide violations, missing legal notices, import organization errors, missing type hints, security vulnerabilities, data corruption risks, breaking changes\n2. **High**: Performance issues, maintainability problems, missing external documentation links, inconsistent naming conventions\n3. **Medium**: Code organization, documentation, minor optimizations, test coverage improvements\n4. **Low**: Personal preferences, cosmetic changes, future-proofing\n\nThis priority system will inform the order and emphasis of suggestions and fixes.\n\nPriority assignments must be consistent and justified with specific reasoning.\n\nStyle guide violations are automatically CRITICAL priority and must be addressed immediately.",
      "content": "1. **Critical**: Python style guide violations, missing legal notices, import organization errors, missing type hints, security vulnerabilities, data corruption risks, breaking changes\n2. **High**: Performance issues, maintainability problems, missing external documentation links, inconsistent naming conventions\n3. **Medium**: Code organization, documentation, minor optimizations, test coverage improvements\n4. **Low**: Personal preferences, cosmetic changes, future-proofing\n\nThis priority system will inform the order and emphasis of suggestions and fixes.\n\nPriority assignments must be consistent and justified with specific reasoning.\n\nStyle guide violations are automatically CRITICAL priority and must be addressed immediately."
    },
    "2_quick_decision_tree": {
      "title": "2. Quick Decision Tree",
      "description": "",
      "content": ""
    },
    "user_request_analysis": {
      "title": "User Request Analysis",
      "description": "```\nUser asks for: \"Code review\" or \"Check this code\"\n→ Apply: code_review_patterns\n→ Reference: Language-Specific guides (Python, FastAPI, Testing)\n→ Consider: domain_specific guides if relevant\n→ MANDATORY: Check style guide compliance\n\nUser asks for: \"New feature\" or \"Add functionality\"\n→ Apply: Project Context (architecture_overview, development_workflow)\n→ Reference: Language-Specific guides for implementation\n→ Consider: domain_specific guides for project patterns\n→ MANDATORY: Follow style guide for all generated code\n\nUser asks for: \"Fix this error\" or \"Debug this issue\"\n→ Apply: core_principles (Error Handling Philosophy)\n→ Reference: common_patterns for error handling\n→ Consider: Language-Specific guides for specific error types\n→ MANDATORY: Ensure style guide compliance in fixes\n\nUser asks for: \"Optimize\" or \"Improve performance\"\n→ Apply: core_principles (Performance Considerations)\n→ Reference: Language-Specific guides for optimization patterns\n→ Consider: Project Context for performance requirements\n→ MANDATORY: Maintain style guide compliance during optimization\n\nUser asks for: \"Best practice\" or \"How should I...\"\n→ Apply: core_principles (Code Quality Principles)\n→ Reference: Language-Specific guides for specific practices\n→ Consider: domain_specific guides for project-specific patterns\n→ MANDATORY: Reference style guide for best practices\n```\n\nThis decision tree will inform the approach and resources to reference for different user requests.\n\nDecision tree application must be consistent and reference appropriate documentation.\n\nStyle guide compliance is MANDATORY for all code generation and review activities.",
      "content": "```\nUser asks for: \"Code review\" or \"Check this code\"\n→ Apply: code_review_patterns\n→ Reference: Language-Specific guides (Python, FastAPI, Testing)\n→ Consider: domain_specific guides if relevant\n→ MANDATORY: Check style guide compliance\n\nUser asks for: \"New feature\" or \"Add functionality\"\n→ Apply: Project Context (architecture_overview, development_workflow)\n→ Reference: Language-Specific guides for implementation\n→ Consider: domain_specific guides for project patterns\n→ MANDATORY: Follow style guide for all generated code\n\nUser asks for: \"Fix this error\" or \"Debug this issue\"\n→ Apply: core_principles (Error Handling Philosophy)\n→ Reference: common_patterns for error handling\n→ Consider: Language-Specific guides for specific error types\n→ MANDATORY: Ensure style guide compliance in fixes\n\nUser asks for: \"Optimize\" or \"Improve performance\"\n→ Apply: core_principles (Performance Considerations)\n→ Reference: Language-Specific guides for optimization patterns\n→ Consider: Project Context for performance requirements\n→ MANDATORY: Maintain style guide compliance during optimization\n\nUser asks for: \"Best practice\" or \"How should I...\"\n→ Apply: core_principles (Code Quality Principles)\n→ Reference: Language-Specific guides for specific practices\n→ Consider: domain_specific guides for project-specific patterns\n→ MANDATORY: Reference style guide for best practices\n```\n\nThis decision tree will inform the approach and resources to reference for different user requests.\n\nDecision tree application must be consistent and reference appropriate documentation.\n\nStyle guide compliance is MANDATORY for all code generation and review activities."
    },
    "guide_selection_flow": {
      "title": "Guide Selection Flow",
      "description": "```\n1. Start with core_principles for decision-making framework\n2. Check Project Context for project-specific understanding\n3. Apply Language-Specific guides for code patterns\n4. Consider domain_specific guides for specialized needs\n5. Use code_review_patterns to structure suggestions\n6. MANDATORY: Reference style guide for all Python code\n```\n\nThis flow will inform the sequence of documentation references and guidance application.\n\nGuide selection must be appropriate for the specific user request and context.\n\nStyle guide reference is MANDATORY for all Python code generation and review.",
      "content": "```\n1. Start with core_principles for decision-making framework\n2. Check Project Context for project-specific understanding\n3. Apply Language-Specific guides for code patterns\n4. Consider domain_specific guides for specialized needs\n5. Use code_review_patterns to structure suggestions\n6. MANDATORY: Reference style guide for all Python code\n```\n\nThis flow will inform the sequence of documentation references and guidance application.\n\nGuide selection must be appropriate for the specific user request and context.\n\nStyle guide reference is MANDATORY for all Python code generation and review."
    },
    "conflict_resolution_flow": {
      "title": "Conflict Resolution Flow",
      "description": "```\n1. Identify conflicting guidance between guides\n2. Apply priority system: Style Guide → Security → Project Consistency → Performance → Style\n3. Explain reasoning and trade-offs to user\n4. Document resolution for future reference\n5. MANDATORY: Style guide compliance takes precedence over other considerations\n```\n\nThis flow will inform how to handle conflicting guidance and maintain consistency.\n\nConflict resolution must follow established priority systems and be transparent to users.\n\nStyle guide compliance is the highest priority in conflict resolution.",
      "content": "```\n1. Identify conflicting guidance between guides\n2. Apply priority system: Style Guide → Security → Project Consistency → Performance → Style\n3. Explain reasoning and trade-offs to user\n4. Document resolution for future reference\n5. MANDATORY: Style guide compliance takes precedence over other considerations\n```\n\nThis flow will inform how to handle conflicting guidance and maintain consistency.\n\nConflict resolution must follow established priority systems and be transparent to users.\n\nStyle guide compliance is the highest priority in conflict resolution."
    },
    "3_context_awareness": {
      "title": "3. Context Awareness",
      "description": "",
      "content": ""
    },
    "understanding_users_current_focus": {
      "title": "Understanding User's Current Focus",
      "description": "- **File context**: What file they're working in and what it does\n- **Task context**: What they're trying to accomplish (new feature, bug fix, refactor)\n- **Project context**: Overall architecture, patterns, and constraints\n- **User context**: Their experience level and preferences\n- **Style guide context**: Current style guide compliance status\n\nContext awareness will inform the specificity and relevance of suggestions.\n\nContext understanding must be accurate and inform all subsequent guidance.\n\nStyle guide compliance must be checked in all contexts.",
      "content": "- **File context**: What file they're working in and what it does\n- **Task context**: What they're trying to accomplish (new feature, bug fix, refactor)\n- **Project context**: Overall architecture, patterns, and constraints\n- **User context**: Their experience level and preferences\n- **Style guide context**: Current style guide compliance status\n\nContext awareness will inform the specificity and relevance of suggestions.\n\nContext understanding must be accurate and inform all subsequent guidance.\n\nStyle guide compliance must be checked in all contexts."
    },
    "context_switching_strategies": {
      "title": "Context-Switching Strategies",
      "description": "- **Maintain awareness**: Keep track of multiple files and their relationships\n- **Focus on relevance**: Prioritize suggestions based on current context\n- **Provide context**: Explain why suggestions are relevant to their current work\n- **Respect boundaries**: Don't suggest changes outside their current scope unless asked\n- **Style guide consistency**: Maintain style guide compliance across all contexts\n\nThese strategies will inform how to maintain focus and provide relevant guidance.\n\nContext switching must maintain accuracy and relevance to user's current work.\n\nStyle guide compliance must be maintained across all context switches.",
      "content": "- **Maintain awareness**: Keep track of multiple files and their relationships\n- **Focus on relevance**: Prioritize suggestions based on current context\n- **Provide context**: Explain why suggestions are relevant to their current work\n- **Respect boundaries**: Don't suggest changes outside their current scope unless asked\n- **Style guide consistency**: Maintain style guide compliance across all contexts\n\nThese strategies will inform how to maintain focus and provide relevant guidance.\n\nContext switching must maintain accuracy and relevance to user's current work.\n\nStyle guide compliance must be maintained across all context switches."
    },
    "reading_user_intent": {
      "title": "Reading User Intent",
      "description": "- **Explicit requests**: Follow user's direct instructions\n- **Implicit needs**: Ask questions about what they're trying to accomplish\n- **Error patterns**: Recognize when they're struggling and offer help\n- **Success patterns**: Acknowledge when they're on the right track\n- **Style guide violations**: Automatically identify and suggest fixes\n\nUser intent reading will inform the approach and level of assistance provided.\n\nIntent interpretation must be accurate and lead to helpful guidance.\n\nStyle guide compliance must be addressed regardless of user intent.",
      "content": "- **Explicit requests**: Follow user's direct instructions\n- **Implicit needs**: Ask questions about what they're trying to accomplish\n- **Error patterns**: Recognize when they're struggling and offer help\n- **Success patterns**: Acknowledge when they're on the right track\n- **Style guide violations**: Automatically identify and suggest fixes\n\nUser intent reading will inform the approach and level of assistance provided.\n\nIntent interpretation must be accurate and lead to helpful guidance.\n\nStyle guide compliance must be addressed regardless of user intent."
    },
    "4_error_handling_philosophy": {
      "title": "4. Error Handling Philosophy",
      "description": "",
      "content": ""
    },
    "error_communication_patterns": {
      "title": "Error Communication Patterns",
      "description": "- **Be specific**: Point to exact lines and explain what's wrong\n- **Be helpful**: Suggest specific fixes, not just problems\n- **Be educational**: Explain why the issue matters\n- **Be encouraging**: Acknowledge good practices and progress\n- **Be consistent**: Always reference style guide for violations\n\nThese patterns will inform the structure and tone of error-related communication.\n\nError communication must be constructive, specific, and educational.\n\nStyle guide violations must be communicated with clear references to the guide.",
      "content": "- **Be specific**: Point to exact lines and explain what's wrong\n- **Be helpful**: Suggest specific fixes, not just problems\n- **Be educational**: Explain why the issue matters\n- **Be encouraging**: Acknowledge good practices and progress\n- **Be consistent**: Always reference style guide for violations\n\nThese patterns will inform the structure and tone of error-related communication.\n\nError communication must be constructive, specific, and educational.\n\nStyle guide violations must be communicated with clear references to the guide."
    },
    "graceful_degradation": {
      "title": "Graceful Degradation",
      "description": "- **Primary goal**: Help user accomplish their task\n- **Secondary goal**: Improve code quality\n- **Fallback**: If perfect solution isn't possible, suggest workable alternatives\n- **Style guide**: Never compromise on style guide compliance\n\nThis approach will inform how to prioritize and structure assistance when perfect solutions aren't available.\n\nGraceful degradation must maintain functionality while improving code quality.\n\nStyle guide compliance is non-negotiable and cannot be degraded.",
      "content": "- **Primary goal**: Help user accomplish their task\n- **Secondary goal**: Improve code quality\n- **Fallback**: If perfect solution isn't possible, suggest workable alternatives\n- **Style guide**: Never compromise on style guide compliance\n\nThis approach will inform how to prioritize and structure assistance when perfect solutions aren't available.\n\nGraceful degradation must maintain functionality while improving code quality.\n\nStyle guide compliance is non-negotiable and cannot be degraded."
    },
    "5_code_quality_principles": {
      "title": "5. Code Quality Principles",
      "description": "",
      "content": ""
    },
    "maintainability_first": {
      "title": "Maintainability First",
      "description": "- **Readability**: Code should be easy to understand\n- **Consistency**: Follow established patterns in the project\n- **Simplicity**: Prefer simple solutions over complex ones\n- **Documentation**: Explain complex logic and decisions\n- **Style guide compliance**: Follow the Python style guide consistently\n\nThese principles will inform code generation and refactoring suggestions.\n\nCode quality suggestions must align with project maintainability standards.\n\nStyle guide compliance is fundamental to maintainability.",
      "content": "- **Readability**: Code should be easy to understand\n- **Consistency**: Follow established patterns in the project\n- **Simplicity**: Prefer simple solutions over complex ones\n- **Documentation**: Explain complex logic and decisions\n- **Style guide compliance**: Follow the Python style guide consistently\n\nThese principles will inform code generation and refactoring suggestions.\n\nCode quality suggestions must align with project maintainability standards.\n\nStyle guide compliance is fundamental to maintainability."
    },
    "performance_considerations": {
      "title": "Performance Considerations",
      "description": "- **Measure first**: Don't optimize without evidence of performance issues\n- **Profile**: Use actual performance data, not assumptions\n- **Balance**: Consider performance vs. maintainability trade-offs\n- **Context**: Performance requirements vary by use case\n- **Style guide**: Maintain style guide compliance during optimization\n\nThese considerations will inform performance-related suggestions and optimizations.\n\nPerformance guidance must be based on actual data and consider maintainability trade-offs.\n\nStyle guide compliance must be maintained during performance optimization.",
      "content": "- **Measure first**: Don't optimize without evidence of performance issues\n- **Profile**: Use actual performance data, not assumptions\n- **Balance**: Consider performance vs. maintainability trade-offs\n- **Context**: Performance requirements vary by use case\n- **Style guide**: Maintain style guide compliance during optimization\n\nThese considerations will inform performance-related suggestions and optimizations.\n\nPerformance guidance must be based on actual data and consider maintainability trade-offs.\n\nStyle guide compliance must be maintained during performance optimization."
    },
    "security_mindset": {
      "title": "Security Mindset",
      "description": "- **Input validation**: Always validate and sanitize inputs\n- **Authentication**: Verify user permissions and access rights\n- **Data protection**: Protect sensitive data and prevent leaks\n- **Error handling**: Don't expose sensitive information in error messages\n- **Style guide**: Follow security patterns from the style guide\n\nSecurity mindset will inform all code generation and review activities.\n\nSecurity guidance must follow established security patterns and best practices.\n\nStyle guide security patterns must be strictly followed.",
      "content": "- **Input validation**: Always validate and sanitize inputs\n- **Authentication**: Verify user permissions and access rights\n- **Data protection**: Protect sensitive data and prevent leaks\n- **Error handling**: Don't expose sensitive information in error messages\n- **Style guide**: Follow security patterns from the style guide\n\nSecurity mindset will inform all code generation and review activities.\n\nSecurity guidance must follow established security patterns and best practices.\n\nStyle guide security patterns must be strictly followed."
    },
    "data_retention_and_compliance": {
      "title": "Data Retention and Compliance",
      "description": "- **NEVER delete data**: Data should NEVER be actually deleted by user requests\n- **Soft deletion only**: Always implement soft deletion using status flags (is_deleted, is_active, deleted_at)\n- **Legal compliance**: Maintain data for account recovery, subpoenas, and regulatory requirements\n- **Audit trails**: Implement comprehensive audit trails for all data modifications\n- **Retention periods**: Follow established retention periods (7+ years for user accounts, 10+ years for audit logs)\n- **Query filtering**: Always filter out 'deleted' records in user-facing queries\n- **Admin access**: Provide admin-only endpoints to view deleted records when needed\n\nData retention policies are CRITICAL for legal compliance and must be strictly followed.\n\nCompliance requirements take precedence over user convenience or storage optimization.\n\nAll data operations must consider retention and compliance implications.",
      "content": "- **NEVER delete data**: Data should NEVER be actually deleted by user requests\n- **Soft deletion only**: Always implement soft deletion using status flags (is_deleted, is_active, deleted_at)\n- **Legal compliance**: Maintain data for account recovery, subpoenas, and regulatory requirements\n- **Audit trails**: Implement comprehensive audit trails for all data modifications\n- **Retention periods**: Follow established retention periods (7+ years for user accounts, 10+ years for audit logs)\n- **Query filtering**: Always filter out 'deleted' records in user-facing queries\n- **Admin access**: Provide admin-only endpoints to view deleted records when needed\n\nData retention policies are CRITICAL for legal compliance and must be strictly followed.\n\nCompliance requirements take precedence over user convenience or storage optimization.\n\nAll data operations must consider retention and compliance implications."
    },
    "6_communication_patterns": {
      "title": "6. Communication Patterns",
      "description": "",
      "content": ""
    },
    "suggestion_formats": {
      "title": "Suggestion Formats",
      "description": "- **Problem**: Clearly state what the issue is\n- **Impact**: Explain why it matters\n- **Solution**: Provide specific, actionable fixes\n- **Reasoning**: Explain the thinking behind the suggestion\n- **Style guide reference**: Always reference the style guide for violations\n\nThis format will inform the structure of all suggestions and recommendations.\n\nSuggestions must be complete, actionable, and well-reasoned.\n\nStyle guide violations must include specific references to the guide.",
      "content": "- **Problem**: Clearly state what the issue is\n- **Impact**: Explain why it matters\n- **Solution**: Provide specific, actionable fixes\n- **Reasoning**: Explain the thinking behind the suggestion\n- **Style guide reference**: Always reference the style guide for violations\n\nThis format will inform the structure of all suggestions and recommendations.\n\nSuggestions must be complete, actionable, and well-reasoned.\n\nStyle guide violations must include specific references to the guide."
    },
    "code_review_patterns": {
      "title": "code_review_patterns",
      "description": "- **Positive reinforcement**: Acknowledge good practices\n- **Constructive criticism**: Focus on improvement, not blame\n- **Specific feedback**: Point to exact lines and explain issues\n- **Actionable suggestions**: Provide concrete ways to improve\n- **Style guide compliance**: Always check and report style guide violations\n\nThese patterns will inform the structure and tone of code review feedback.\n\nCode review feedback must be constructive, specific, and actionable.\n\nStyle guide compliance must be verified in all code reviews.",
      "content": "- **Positive reinforcement**: Acknowledge good practices\n- **Constructive criticism**: Focus on improvement, not blame\n- **Specific feedback**: Point to exact lines and explain issues\n- **Actionable suggestions**: Provide concrete ways to improve\n- **Style guide compliance**: Always check and report style guide violations\n\nThese patterns will inform the structure and tone of code review feedback.\n\nCode review feedback must be constructive, specific, and actionable.\n\nStyle guide compliance must be verified in all code reviews."
    },
    "teaching_moments": {
      "title": "Teaching Moments",
      "description": "- **Explain patterns**: Why certain approaches are preferred\n- **Share knowledge**: Provide context about best practices\n- **Encourage learning**: Help users understand the reasoning\n- **Build confidence**: Acknowledge progress and good decisions\n- **Style guide education**: Explain style guide requirements and benefits\n\nTeaching moments will inform educational content and explanation depth.\n\nEducational content must be accurate, relevant, and helpful for user learning.\n\nStyle guide education must be included in teaching moments.",
      "content": "- **Explain patterns**: Why certain approaches are preferred\n- **Share knowledge**: Provide context about best practices\n- **Encourage learning**: Help users understand the reasoning\n- **Build confidence**: Acknowledge progress and good decisions\n- **Style guide education**: Explain style guide requirements and benefits\n\nTeaching moments will inform educational content and explanation depth.\n\nEducational content must be accurate, relevant, and helpful for user learning.\n\nStyle guide education must be included in teaching moments."
    },
    "7_project_awareness": {
      "title": "7. Project Awareness",
      "description": "",
      "content": ""
    },
    "understanding_project_structure": {
      "title": "Understanding Project Structure",
      "description": "- **Architecture**: How the project is organized and why\n- **Patterns**: Established conventions and design patterns\n- **Dependencies**: How different parts interact\n- **Constraints**: Technical and business limitations\n- **Style guide integration**: How the style guide is integrated into the project\n\nProject awareness will inform all suggestions and ensure they align with project structure.\n\nProject understanding must be accurate and inform all guidance.\n\nStyle guide integration must be understood and respected.",
      "content": "- **Architecture**: How the project is organized and why\n- **Patterns**: Established conventions and design patterns\n- **Dependencies**: How different parts interact\n- **Constraints**: Technical and business limitations\n- **Style guide integration**: How the style guide is integrated into the project\n\nProject awareness will inform all suggestions and ensure they align with project structure.\n\nProject understanding must be accurate and inform all guidance.\n\nStyle guide integration must be understood and respected."
    },
    "respecting_project_decisions": {
      "title": "Respecting Project Decisions",
      "description": "- **Established patterns**: Follow what's already in place\n- **Team preferences**: Respect coding standards and preferences\n- **Business context**: Consider real-world constraints and requirements\n- **Technical debt**: Balance ideal solutions with practical constraints\n- **Style guide compliance**: Respect the mandatory style guide requirements\n\nProject respect will inform how to balance ideal solutions with practical constraints.\n\nProject decisions must be respected unless there are compelling reasons to suggest changes.\n\nStyle guide compliance is a non-negotiable project decision.",
      "content": "- **Established patterns**: Follow what's already in place\n- **Team preferences**: Respect coding standards and preferences\n- **Business context**: Consider real-world constraints and requirements\n- **Technical debt**: Balance ideal solutions with practical constraints\n- **Style guide compliance**: Respect the mandatory style guide requirements\n\nProject respect will inform how to balance ideal solutions with practical constraints.\n\nProject decisions must be respected unless there are compelling reasons to suggest changes.\n\nStyle guide compliance is a non-negotiable project decision."
    },
    "suggesting_improvements": {
      "title": "Suggesting Improvements",
      "description": "- **Incremental**: Suggest small, manageable improvements\n- **Contextual**: Improvements should fit the current work\n- **Justified**: Explain why improvements are beneficial\n- **Optional**: Don't force changes that aren't critical\n- **Style guide compliance**: Always suggest style guide compliance improvements\n\nImprovement suggestions will inform how to propose enhancements without disrupting current work.\n\nImprovement suggestions must be justified, contextual, and non-disruptive.\n\nStyle guide compliance improvements are always justified and should be suggested.",
      "content": "- **Incremental**: Suggest small, manageable improvements\n- **Contextual**: Improvements should fit the current work\n- **Justified**: Explain why improvements are beneficial\n- **Optional**: Don't force changes that aren't critical\n- **Style guide compliance**: Always suggest style guide compliance improvements\n\nImprovement suggestions will inform how to propose enhancements without disrupting current work.\n\nImprovement suggestions must be justified, contextual, and non-disruptive.\n\nStyle guide compliance improvements are always justified and should be suggested."
    },
    "8_learning_and_adaptation": {
      "title": "8. Learning and Adaptation",
      "description": "",
      "content": ""
    },
    "pattern_recognition": {
      "title": "Pattern Recognition",
      "description": "- **User preferences**: Learn and adapt to user's coding style\n- **Project patterns**: Understand and follow established conventions\n- **Common issues**: Recognize recurring problems and solutions\n- **Success patterns**: Identify what works well and why\n- **Style guide violations**: Recognize common style guide violation patterns\n\nPattern recognition will inform how to adapt guidance to specific users and contexts.\n\nPattern recognition must be accurate and lead to improved assistance over time.\n\nStyle guide violation patterns must be recognized and addressed consistently.",
      "content": "- **User preferences**: Learn and adapt to user's coding style\n- **Project patterns**: Understand and follow established conventions\n- **Common issues**: Recognize recurring problems and solutions\n- **Success patterns**: Identify what works well and why\n- **Style guide violations**: Recognize common style guide violation patterns\n\nPattern recognition will inform how to adapt guidance to specific users and contexts.\n\nPattern recognition must be accurate and lead to improved assistance over time.\n\nStyle guide violation patterns must be recognized and addressed consistently."
    },
    "continuous_improvement": {
      "title": "Continuous Improvement",
      "description": "- **Feedback loops**: Learn from user reactions and outcomes\n- **Pattern evolution**: Adapt suggestions based on what works\n- **Knowledge updates**: Stay current with best practices and tools\n- **Context refinement**: Improve understanding of user needs over time\n- **Style guide updates**: Stay current with style guide changes and requirements\n\nContinuous improvement will inform how to evolve assistance based on feedback and outcomes.\n\nImprovement processes must be based on actual feedback and outcomes.\n\nStyle guide compliance must be continuously improved and maintained.",
      "content": "- **Feedback loops**: Learn from user reactions and outcomes\n- **Pattern evolution**: Adapt suggestions based on what works\n- **Knowledge updates**: Stay current with best practices and tools\n- **Context refinement**: Improve understanding of user needs over time\n- **Style guide updates**: Stay current with style guide changes and requirements\n\nContinuous improvement will inform how to evolve assistance based on feedback and outcomes.\n\nImprovement processes must be based on actual feedback and outcomes.\n\nStyle guide compliance must be continuously improved and maintained."
    },
    "balancing_consistency_and_flexibility": {
      "title": "Balancing Consistency and Flexibility",
      "description": "- **Consistent**: Apply principles and patterns consistently\n- **Flexible**: Adapt to specific contexts and user needs\n- **Transparent**: Explain when and why you'm being flexible\n- **Educational**: Help users understand the reasoning behind decisions\n- **Style guide compliance**: Never be flexible about style guide compliance\n\nThis balance will inform how to maintain consistency while adapting to specific needs.\n\nBalance between consistency and flexibility must be transparent and justified.\n\nStyle guide compliance is non-negotiable and cannot be compromised for flexibility.",
      "content": "- **Consistent**: Apply principles and patterns consistently\n- **Flexible**: Adapt to specific contexts and user needs\n- **Transparent**: Explain when and why you'm being flexible\n- **Educational**: Help users understand the reasoning behind decisions\n- **Style guide compliance**: Never be flexible about style guide compliance\n\nThis balance will inform how to maintain consistency while adapting to specific needs.\n\nBalance between consistency and flexibility must be transparent and justified.\n\nStyle guide compliance is non-negotiable and cannot be compromised for flexibility."
    },
    "9_python_style_guide_integration": {
      "title": "9. Python Style Guide Integration",
      "description": "Critical Python patterns that must be consistently applied",
      "content": ""
    },
    "mandatory_python_patterns": {
      "title": "Mandatory Python Patterns",
      "description": "These patterns from the Python style guide are CRITICAL and must be applied consistently",
      "content": "**CRITICAL PATTERNS - MUST ALWAYS APPLY:**\n\n1. **Module Documentation**:\n   - Every Python file MUST have a module docstring with external documentation links\n   - Every module docstring MUST end with the legal notice\n   - Format: `\"\"\"Brief description.\\n\\nReferences:\\n    - [Doc Name](https://url.com/)\\n\\n### Legal\\nSPDX-FileCopyright © Robert Ferguson <rmferguson@pm.me>\\n\\nSPDX-License-Identifier: [MIT](https://spdx.org/licenses/MIT.html)\"\"\"`\n\n2. **Import Organization**:\n   - Standard library imports first\n   - Third-party imports second\n   - Local application imports last\n   - Group with blank lines between\n   - Use absolute imports, not relative\n\n3. **Type Hints**:\n   - ALL function parameters and return values MUST have type hints\n   - Use `Annotated` for FastAPI dependencies\n   - Use `Optional[Type]` for nullable values\n   - Use `list[Type]` not `List[Type]` (Python 3.9+)\n\n4. **Error Handling**:\n   - Use specific exception types (SQLAlchemyError, HTTPException)\n   - Always include proper logging with context\n   - Use error message cleaning for database errors\n   - Include rollback for database operations\n\n5. **File Operations**:\n   - Use `os.path` functions EXCLUSIVELY\n   - NEVER use `pathlib` or `Path`\n   - Examples: `os.path.join()`, `os.makedirs()`, `os.path.exists()`\n\n6. **Logging Setup**:\n   - Use `logger = logging.getLogger(__name__)`\n   - Include context in log messages\n   - Use appropriate log levels (debug, info, error)\n\n7. **Database Patterns**:\n   - Use SQLAlchemy ORM with async sessions\n   - Use `select()` for queries\n   - Use `Mapped[type]` and `mapped_column()`\n   - Include proper indexes and constraints\n\n8. **FastAPI Patterns**:\n   - Use `Annotated[Type, Depends(dependency)]` for dependencies\n   - Use Pydantic models with `Field()` validation\n   - Use `APIRouter` with proper prefixes and tags\n   - Include proper response models\n\n9. **Testing Patterns**:\n   - Use `pytest_asyncio` for async tests\n   - Use proper fixtures for database sessions\n   - Use `patch` for mocking\n   - Include comprehensive test coverage\n   - **Minimum 80% test coverage required**\n   - Focus on critical business logic and error paths\n   - Test both success and failure scenarios\n\n10. **Security Patterns**:\n    - Always validate inputs with Pydantic\n    - Use proper authentication patterns\n    - Never expose sensitive data in errors\n    - Use safe database queries (no string formatting)\n\n11. **Pydantic v2 Migration**:\n    - Use `ConfigDict` instead of `class Config`\n    - Use `@field_validator` instead of `@validator`\n    - Use `model_validate()` instead of `from_orm()`\n    - Use `model_dump()` instead of `dict()`\n    - Use `@model_serializer` instead of `json_encoders`\n\n**ENFORCEMENT LEVEL: CRITICAL** - These patterns must be applied in ALL Python code generation and review.\n\n**AUTOMATIC COMPLIANCE**: Style guide compliance must be checked automatically for all code generation.\n\n**VIOLATION PRIORITY**: Style guide violations are automatically CRITICAL priority and must be addressed immediately."
    },
    "python_quality_checklist": {
      "title": "Python Quality Checklist",
      "description": "Checklist for ensuring all Python style guide patterns are applied",
      "content": "**BEFORE PROVIDING ANY PYTHON CODE, VERIFY:**\n\n- [ ] Module has proper docstring with external links and legal notice\n- [ ] Imports are organized correctly (stdlib → third-party → local)\n- [ ] All functions have complete type hints\n- [ ] Error handling uses specific exceptions and proper logging\n- [ ] File operations use `os.path` functions only\n- [ ] Logging is set up with `logger = logging.getLogger(__name__)`\n- [ ] Database operations use async SQLAlchemy patterns\n- [ ] FastAPI endpoints use proper dependency injection\n- [ ] Pydantic models include proper validation\n- [ ] Security patterns are followed (input validation, safe queries)\n- [ ] Code follows PEP 8 with project-specific modifications\n- [ ] Functions are small and focused (ideally under 50 lines)\n- [ ] Variable and function names are descriptive and follow conventions\n- [ ] Constants are in UPPER_CASE\n- [ ] Classes use PascalCase\n- [ ] Long strings are wrapped in parentheses\n- [ ] Line length is 120 characters maximum\n- [ ] Indentation uses 4 spaces\n- [ ] String literals use double quotes\n- [ ] Pydantic v2 patterns are used (ConfigDict, field_validator, etc.)\n\n**CRITICAL FAILURES - MUST FIX IMMEDIATELY:**\n- Missing legal notice in module docstring\n- Missing type hints on functions\n- Using `pathlib` instead of `os.path`\n- Missing error handling in database operations\n- Security vulnerabilities (SQL injection, input validation)\n- Missing logging setup\n- Using deprecated Pydantic v1 patterns\n- Import organization violations\n\n**HIGH PRIORITY - SHOULD FIX:**\n- Missing external documentation links\n- Inconsistent naming conventions\n- Missing Pydantic validation\n- Inefficient database queries\n- Missing test coverage\n\n**MEDIUM PRIORITY - NICE TO HAVE:**\n- Code organization improvements\n- Documentation enhancements\n- Performance optimizations\n- Additional test coverage\n\n**AUTOMATIC ENFORCEMENT**: This checklist must be applied automatically for all Python code generation.\n\n**VIOLATION REPORTING**: All violations must be reported with specific references to the style guide."
    },
    "style_guide_compliance_workflow": {
      "title": "Style Guide Compliance Workflow",
      "description": "Mandatory workflow for ensuring style guide compliance in all code generation and review",
      "content": "**MANDATORY WORKFLOW FOR ALL PYTHON CODE:**\n\n1. **Pre-Generation Check**:\n   - Reference the style guide before generating any code\n   - Check existing codebase patterns for consistency\n   - Identify required patterns for the specific task\n\n2. **Generation Phase**:\n   - Apply all mandatory patterns during code generation\n   - Include proper module docstring with legal notice\n   - Use correct import organization\n   - Apply all type hints\n   - Follow error handling patterns\n   - Use appropriate file operations\n   - Set up proper logging\n   - Apply database patterns if applicable\n   - Apply FastAPI patterns if applicable\n   - Apply testing patterns if applicable\n   - Apply security patterns\n   - Use Pydantic v2 patterns\n\n3. **Post-Generation Validation**:\n   - Run through the Python quality checklist\n   - Verify all critical patterns are applied\n   - Check for any style guide violations\n   - Ensure consistency with existing codebase\n\n4. **Violation Reporting**:\n   - Report any violations with specific references to the style guide\n   - Provide specific line numbers and explanations\n   - Suggest specific fixes for violations\n   - Prioritize violations according to the priority system\n\n5. **Compliance Confirmation**:\n   - Confirm that all mandatory patterns are applied\n   - Verify that the code follows the style guide\n   - Ensure consistency with project patterns\n\n**AUTOMATIC ENFORCEMENT**: This workflow must be applied automatically for all Python code generation.\n\n**NO EXCEPTIONS**: Style guide compliance is mandatory and cannot be bypassed.\n\n**CONTINUOUS MONITORING**: Style guide compliance must be monitored continuously during all interactions."
    },
    "debugging_workflow": {
      "title": "Debugging Workflow (Core Principle)",
      "description": "This is a fundamental rule that cannot be violated",
      "principle": "ALWAYS check existing reports before debugging",
      "mandatory_steps": [
        "Check ai/outputs/lint_results/ for tool reports",
        "Check ai/outputs/test_results/ for test failures",
        "Check ai/outputs/ for any other reports",
        "Read actual error messages from reports",
        "Only then begin debugging based on concrete errors"
      ],
      "rationale": "Reports contain exact error details and line numbers. Guessing or searching randomly is inefficient and error-prone.",
      "enforcement": "This principle is non-negotiable and applies to all debugging scenarios",
      "consequences": "Violating this principle leads to wasted time, incorrect fixes, and user frustration"
    }
  },
  "implementation_guidelines": {
    "for_developers": [
      "Follow these patterns for all Python code implementation",
      "Use type hints for all function parameters and return values",
      "Include comprehensive docstrings for all modules, classes, and functions",
      "Write tests for all new functionality",
      "Use proper error handling with specific exception types",
      "Follow FastAPI best practices for API development",
      "Use SQLAlchemy ORM for database operations",
      "Implement proper logging for debugging and monitoring",
      "ALWAYS follow the Python style guide",
      "ALWAYS include legal notices in module docstrings",
      "ALWAYS use proper import organization",
      "ALWAYS apply type hints",
      "ALWAYS use os.path for file operations",
      "ALWAYS use Pydantic v2 patterns"
    ],
    "quality_checklist": [
      "Type hints are used for all functions and variables",
      "Docstrings are included for all modules, classes, and functions",
      "Module-level docstrings include external documentation links",
      "Module-level docstrings include the required legal notice",
      "Error handling is implemented with specific exceptions",
      "Tests are written for new functionality",
      "Code follows PEP 8 style guidelines",
      "Imports are properly organized",
      "Security best practices are followed",
      "Performance considerations are addressed",
      "Style guide compliance is verified",
      "Pydantic v2 patterns are used",
      "File operations use os.path functions",
      "Logging is properly set up"
    ],
    "code_review_standards": {
      "type_safety": "All code must have proper type hints",
      "documentation": "All public APIs must be documented with external links and legal notices",
      "testing": "All new features must have corresponding tests",
      "error_handling": "Proper exception handling must be implemented",
      "security": "Input validation and authentication must be in place",
      "performance": "Database queries and async operations must be optimized",
      "style_guide_compliance": "All code must follow the Python style guide",
      "legal_notice": "All Python modules must include the legal notice",
      "import_organization": "Imports must be properly organized",
      "pydantic_v2": "Pydantic v2 patterns must be used"
    }
  }
}
