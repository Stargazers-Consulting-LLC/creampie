{
  "metadata": {
    "title": "Core Development Principles",
    "description": "",
    "version": "2.3",
    "last_updated": "2025-06-20T20:25:42.643562",
    "source": "guide_docs/core_principles.md",
    "cross_references": [
      "../project_context/architecture_overview.json",
      "../project_context/common_patterns.json",
      "../project_context/development_workflow.json",
      "Language-Specific/python_style_guide.json",
      "Language-Specific/fastapi_development_guide.json"
    ]
  },
  "sections": {
    "core_development_principles": {
      "title": "Core Development Principles",
      "description": "> This guide outlines the fundamental principles that guide all development decisions. Use these principles to ensure consistent, high-quality development practices across the project.",
      "content": "> This guide outlines the fundamental principles that guide all development decisions. Use these principles to ensure consistent, high-quality development practices across the project."
    },
    "ai_metadata": {
      "title": "AI Metadata",
      "description": "**Template Version:** 2.2\n**AI Processing Level:** High\n**Required Context:** Project architecture, user intent, current codebase state\n**Validation Required:** Yes\n**Code Generation:** Supported\n\n**Dependencies:**\n- `../project_context/architecture_overview.json` - System architecture\n- `../project_context/common_patterns.json` - Project patterns\n- `../project_context/development_workflow.json` - Development process\n- `Language-Specific/python_style_guide.json` - Python implementation patterns\n- `Language-Specific/fastapi_development_guide.json` - API development patterns\n\n**Validation Rules:**\n- All decision frameworks must be consistently applied\n- Context awareness must be maintained throughout interactions\n- Error handling must follow established project patterns\n- Code quality principles must align with project standards\n- Communication patterns must be constructive and educational\n- Python style guide patterns must be strictly followed"
    },
    "overview": {
      "title": "Overview",
      "description": "**Document Purpose:** Fundamental decision-making frameworks for AI development assistance\n**Scope:** All development tasks, code reviews, and refactoring decisions\n**Target Users:** AI assistants providing development support\n**Last Updated:** Current\n\n**AI Context:** This document serves as the primary decision-making framework for all AI development assistance. It provides consistent patterns for analyzing user requests, making decisions, and providing guidance that aligns with project standards and user needs.",
      "content": "**Document Purpose:** Fundamental decision-making frameworks for AI development assistance\n**Scope:** All development tasks, code reviews, and refactoring decisions\n**Target Users:** AI assistants providing development support\n**Last Updated:** Current\n\n**AI Context:** This document serves as the primary decision-making framework for all AI development assistance. It provides consistent patterns for analyzing user requests, making decisions, and providing guidance that aligns with project standards and user needs."
    },
    "1_decision_making_frameworks": {
      "title": "1. Decision-Making Frameworks",
      "description": "",
      "content": ""
    },
    "when_to_suggest_refactoring_vs_new_code": {
      "title": "When to Suggest Refactoring vs. New Code",
      "description": "- **Refactor when**: Code exists but has style violations, minor bugs, or can be improved\n- **New code when**: Feature doesn't exist, major architectural changes needed, or user explicitly requests new functionality\n- **Always consider**: User's current context and what they're trying to accomplish\n\nThis framework will inform whether to suggest code changes or new implementations.\n\nDecisions must be justified with specific reasoning and align with project patterns.",
      "content": "- **Refactor when**: Code exists but has style violations, minor bugs, or can be improved\n- **New code when**: Feature doesn't exist, major architectural changes needed, or user explicitly requests new functionality\n- **Always consider**: User's current context and what they're trying to accomplish\n\nThis framework will inform whether to suggest code changes or new implementations.\n\nDecisions must be justified with specific reasoning and align with project patterns."
    },
    "when_to_be_strict_vs_flexible": {
      "title": "When to Be Strict vs. Flexible",
      "description": "- **Strict about**: Application logic failures, security issues, data integrity, Python style guide violations\n- **Flexible about**: Style violations, minor inefficiencies, personal preferences\n- **Always**: Explain the reasoning behind strict vs. flexible decisions\n\nThis philosophy will inform the tone and approach to error handling suggestions.\n\nError handling guidance must align with project security and data integrity requirements.",
      "content": "- **Strict about**: Application logic failures, security issues, data integrity, Python style guide violations\n- **Flexible about**: Style violations, minor inefficiencies, personal preferences\n- **Always**: Explain the reasoning behind strict vs. flexible decisions\n\nThis philosophy will inform the tone and approach to error handling suggestions.\n\nError handling guidance must align with project security and data integrity requirements."
    },
    "priority_systems_for_code_issues": {
      "title": "Priority Systems for Code Issues",
      "description": "1. **Critical**: Security vulnerabilities, data corruption risks, breaking changes, missing legal notices\n2. **High**: Style guide violations, performance issues, maintainability problems, missing type hints\n3. **Medium**: Code organization, documentation, minor optimizations\n4. **Low**: Personal preferences, cosmetic changes, future-proofing\n\nThis priority system will inform the order and emphasis of suggestions and fixes.\n\nPriority assignments must be consistent and justified with specific reasoning.",
      "content": "1. **Critical**: Security vulnerabilities, data corruption risks, breaking changes, missing legal notices\n2. **High**: Style guide violations, performance issues, maintainability problems, missing type hints\n3. **Medium**: Code organization, documentation, minor optimizations\n4. **Low**: Personal preferences, cosmetic changes, future-proofing\n\nThis priority system will inform the order and emphasis of suggestions and fixes.\n\nPriority assignments must be consistent and justified with specific reasoning."
    },
    "2_quick_decision_tree": {
      "title": "2. Quick Decision Tree",
      "description": "",
      "content": ""
    },
    "user_request_analysis": {
      "title": "User Request Analysis",
      "description": "```\nUser asks for: \"Code review\" or \"Check this code\"\n→ Apply: code_review_patterns\n→ Reference: Language-Specific guides (Python, FastAPI, Testing)\n→ Consider: domain_specific guides if relevant\n\nUser asks for: \"New feature\" or \"Add functionality\"\n→ Apply: Project Context (architecture_overview, development_workflow)\n→ Reference: Language-Specific guides for implementation\n→ Consider: domain_specific guides for project patterns\n\nUser asks for: \"Fix this error\" or \"Debug this issue\"\n→ Apply: core_principles (Error Handling Philosophy)\n→ Reference: common_patterns for error handling\n→ Consider: Language-Specific guides for specific error types\n\nUser asks for: \"Optimize\" or \"Improve performance\"\n→ Apply: core_principles (Performance Considerations)\n→ Reference: Language-Specific guides for optimization patterns\n→ Consider: Project Context for performance requirements\n\nUser asks for: \"Best practice\" or \"How should I...\"\n→ Apply: core_principles (Code Quality Principles)\n→ Reference: Language-Specific guides for specific practices\n→ Consider: domain_specific guides for project-specific patterns\n```\n\nThis decision tree will inform the approach and resources to reference for different user requests.\n\nDecision tree application must be consistent and reference appropriate documentation.",
      "content": "```\nUser asks for: \"Code review\" or \"Check this code\"\n→ Apply: code_review_patterns\n→ Reference: Language-Specific guides (Python, FastAPI, Testing)\n→ Consider: domain_specific guides if relevant\n\nUser asks for: \"New feature\" or \"Add functionality\"\n→ Apply: Project Context (architecture_overview, development_workflow)\n→ Reference: Language-Specific guides for implementation\n→ Consider: domain_specific guides for project patterns\n\nUser asks for: \"Fix this error\" or \"Debug this issue\"\n→ Apply: core_principles (Error Handling Philosophy)\n→ Reference: common_patterns for error handling\n→ Consider: Language-Specific guides for specific error types\n\nUser asks for: \"Optimize\" or \"Improve performance\"\n→ Apply: core_principles (Performance Considerations)\n→ Reference: Language-Specific guides for optimization patterns\n→ Consider: Project Context for performance requirements\n\nUser asks for: \"Best practice\" or \"How should I...\"\n→ Apply: core_principles (Code Quality Principles)\n→ Reference: Language-Specific guides for specific practices\n→ Consider: domain_specific guides for project-specific patterns\n```\n\nThis decision tree will inform the approach and resources to reference for different user requests.\n\nDecision tree application must be consistent and reference appropriate documentation."
    },
    "guide_selection_flow": {
      "title": "Guide Selection Flow",
      "description": "```\n1. Start with core_principles for decision-making framework\n2. Check Project Context for project-specific understanding\n3. Apply Language-Specific guides for code patterns\n4. Consider domain_specific guides for specialized needs\n5. Use code_review_patterns to structure suggestions\n```\n\nThis flow will inform the sequence of documentation references and guidance application.\n\nGuide selection must be appropriate for the specific user request and context.",
      "content": "```\n1. Start with core_principles for decision-making framework\n2. Check Project Context for project-specific understanding\n3. Apply Language-Specific guides for code patterns\n4. Consider domain_specific guides for specialized needs\n5. Use code_review_patterns to structure suggestions\n```\n\nThis flow will inform the sequence of documentation references and guidance application.\n\nGuide selection must be appropriate for the specific user request and context."
    },
    "conflict_resolution_flow": {
      "title": "Conflict Resolution Flow",
      "description": "```\n1. Identify conflicting guidance between guides\n2. Apply priority system: Security → Project Consistency → Performance → Style\n3. Explain reasoning and trade-offs to user\n4. Document resolution for future reference\n```\n\nThis flow will inform how to handle conflicting guidance and maintain consistency.\n\nConflict resolution must follow established priority systems and be transparent to users.",
      "content": "```\n1. Identify conflicting guidance between guides\n2. Apply priority system: Security → Project Consistency → Performance → Style\n3. Explain reasoning and trade-offs to user\n4. Document resolution for future reference\n```\n\nThis flow will inform how to handle conflicting guidance and maintain consistency.\n\nConflict resolution must follow established priority systems and be transparent to users."
    },
    "3_context_awareness": {
      "title": "3. Context Awareness",
      "description": "",
      "content": ""
    },
    "understanding_users_current_focus": {
      "title": "Understanding User's Current Focus",
      "description": "- **File context**: What file they're working in and what it does\n- **Task context**: What they're trying to accomplish (new feature, bug fix, refactor)\n- **Project context**: Overall architecture, patterns, and constraints\n- **User context**: Their experience level and preferences\n\nContext awareness will inform the specificity and relevance of suggestions.\n\nContext understanding must be accurate and inform all subsequent guidance.",
      "content": "- **File context**: What file they're working in and what it does\n- **Task context**: What they're trying to accomplish (new feature, bug fix, refactor)\n- **Project context**: Overall architecture, patterns, and constraints\n- **User context**: Their experience level and preferences\n\nContext awareness will inform the specificity and relevance of suggestions.\n\nContext understanding must be accurate and inform all subsequent guidance."
    },
    "context_switching_strategies": {
      "title": "Context-Switching Strategies",
      "description": "- **Maintain awareness**: Keep track of multiple files and their relationships\n- **Focus on relevance**: Prioritize suggestions based on current context\n- **Provide context**: Explain why suggestions are relevant to their current work\n- **Respect boundaries**: Don't suggest changes outside their current scope unless asked\n\nThese strategies will inform how to maintain focus and provide relevant guidance.\n\nContext switching must maintain accuracy and relevance to user's current work.",
      "content": "- **Maintain awareness**: Keep track of multiple files and their relationships\n- **Focus on relevance**: Prioritize suggestions based on current context\n- **Provide context**: Explain why suggestions are relevant to their current work\n- **Respect boundaries**: Don't suggest changes outside their current scope unless asked\n\nThese strategies will inform how to maintain focus and provide relevant guidance.\n\nContext switching must maintain accuracy and relevance to user's current work."
    },
    "reading_user_intent": {
      "title": "Reading User Intent",
      "description": "- **Explicit requests**: Follow user's direct instructions\n- **Implicit needs**: Ask questions about what they're trying to accomplish\n- **Error patterns**: Recognize when they're struggling and offer help\n- **Success patterns**: Acknowledge when they're on the right track\n\nUser intent reading will inform the approach and level of assistance provided.\n\nIntent interpretation must be accurate and lead to helpful guidance.",
      "content": "- **Explicit requests**: Follow user's direct instructions\n- **Implicit needs**: Ask questions about what they're trying to accomplish\n- **Error patterns**: Recognize when they're struggling and offer help\n- **Success patterns**: Acknowledge when they're on the right track\n\nUser intent reading will inform the approach and level of assistance provided.\n\nIntent interpretation must be accurate and lead to helpful guidance."
    },
    "4_error_handling_philosophy": {
      "title": "4. Error Handling Philosophy",
      "description": "",
      "content": ""
    },
    "error_communication_patterns": {
      "title": "Error Communication Patterns",
      "description": "- **Be specific**: Point to exact lines and explain what's wrong\n- **Be helpful**: Suggest specific fixes, not just problems\n- **Be educational**: Explain why the issue matters\n- **Be encouraging**: Acknowledge good practices and progress\n\nThese patterns will inform the structure and tone of error-related communication.\n\nError communication must be constructive, specific, and educational.",
      "content": "- **Be specific**: Point to exact lines and explain what's wrong\n- **Be helpful**: Suggest specific fixes, not just problems\n- **Be educational**: Explain why the issue matters\n- **Be encouraging**: Acknowledge good practices and progress\n\nThese patterns will inform the structure and tone of error-related communication.\n\nError communication must be constructive, specific, and educational."
    },
    "graceful_degradation": {
      "title": "Graceful Degradation",
      "description": "- **Primary goal**: Help user accomplish their task\n- **Secondary goal**: Improve code quality\n- **Fallback**: If perfect solution isn't possible, suggest workable alternatives\n\nThis approach will inform how to prioritize and structure assistance when perfect solutions aren't available.\n\nGraceful degradation must maintain functionality while improving code quality.",
      "content": "- **Primary goal**: Help user accomplish their task\n- **Secondary goal**: Improve code quality\n- **Fallback**: If perfect solution isn't possible, suggest workable alternatives\n\nThis approach will inform how to prioritize and structure assistance when perfect solutions aren't available.\n\nGraceful degradation must maintain functionality while improving code quality."
    },
    "5_code_quality_principles": {
      "title": "5. Code Quality Principles",
      "description": "",
      "content": ""
    },
    "maintainability_first": {
      "title": "Maintainability First",
      "description": "- **Readability**: Code should be easy to understand\n- **Consistency**: Follow established patterns in the project\n- **Simplicity**: Prefer simple solutions over complex ones\n- **Documentation**: Explain complex logic and decisions\n\nThese principles will inform code generation and refactoring suggestions.\n\nCode quality suggestions must align with project maintainability standards.",
      "content": "- **Readability**: Code should be easy to understand\n- **Consistency**: Follow established patterns in the project\n- **Simplicity**: Prefer simple solutions over complex ones\n- **Documentation**: Explain complex logic and decisions\n\nThese principles will inform code generation and refactoring suggestions.\n\nCode quality suggestions must align with project maintainability standards."
    },
    "performance_considerations": {
      "title": "Performance Considerations",
      "description": "- **Measure first**: Don't optimize without evidence of performance issues\n- **Profile**: Use actual performance data, not assumptions\n- **Balance**: Consider performance vs. maintainability trade-offs\n- **Context**: Performance requirements vary by use case\n\nThese considerations will inform performance-related suggestions and optimizations.\n\nPerformance guidance must be based on actual data and consider maintainability trade-offs.",
      "content": "- **Measure first**: Don't optimize without evidence of performance issues\n- **Profile**: Use actual performance data, not assumptions\n- **Balance**: Consider performance vs. maintainability trade-offs\n- **Context**: Performance requirements vary by use case\n\nThese considerations will inform performance-related suggestions and optimizations.\n\nPerformance guidance must be based on actual data and consider maintainability trade-offs."
    },
    "security_mindset": {
      "title": "Security Mindset",
      "description": "- **Input validation**: Always validate and sanitize inputs\n- **Authentication**: Verify user permissions and access rights\n- **Data protection**: Protect sensitive data and prevent leaks\n- **Error handling**: Don't expose sensitive information in error messages\n\nSecurity mindset will inform all code generation and review activities.\n\nSecurity guidance must follow established security patterns and best practices.",
      "content": "- **Input validation**: Always validate and sanitize inputs\n- **Authentication**: Verify user permissions and access rights\n- **Data protection**: Protect sensitive data and prevent leaks\n- **Error handling**: Don't expose sensitive information in error messages\n\nSecurity mindset will inform all code generation and review activities.\n\nSecurity guidance must follow established security patterns and best practices."
    },
    "6_communication_patterns": {
      "title": "6. Communication Patterns",
      "description": "",
      "content": ""
    },
    "suggestion_formats": {
      "title": "Suggestion Formats",
      "description": "- **Problem**: Clearly state what the issue is\n- **Impact**: Explain why it matters\n- **Solution**: Provide specific, actionable fixes\n- **Reasoning**: Explain the thinking behind the suggestion\n\nThis format will inform the structure of all suggestions and recommendations.\n\nSuggestions must be complete, actionable, and well-reasoned.",
      "content": "- **Problem**: Clearly state what the issue is\n- **Impact**: Explain why it matters\n- **Solution**: Provide specific, actionable fixes\n- **Reasoning**: Explain the thinking behind the suggestion\n\nThis format will inform the structure of all suggestions and recommendations.\n\nSuggestions must be complete, actionable, and well-reasoned."
    },
    "code_review_patterns": {
      "title": "code_review_patterns",
      "description": "- **Positive reinforcement**: Acknowledge good practices\n- **Constructive criticism**: Focus on improvement, not blame\n- **Specific feedback**: Point to exact lines and explain issues\n- **Actionable suggestions**: Provide concrete ways to improve\n\nThese patterns will inform the structure and tone of code review feedback.\n\nCode review feedback must be constructive, specific, and actionable.",
      "content": "- **Positive reinforcement**: Acknowledge good practices\n- **Constructive criticism**: Focus on improvement, not blame\n- **Specific feedback**: Point to exact lines and explain issues\n- **Actionable suggestions**: Provide concrete ways to improve\n\nThese patterns will inform the structure and tone of code review feedback.\n\nCode review feedback must be constructive, specific, and actionable."
    },
    "teaching_moments": {
      "title": "Teaching Moments",
      "description": "- **Explain patterns**: Why certain approaches are preferred\n- **Share knowledge**: Provide context about best practices\n- **Encourage learning**: Help users understand the reasoning\n- **Build confidence**: Acknowledge progress and good decisions\n\nTeaching moments will inform educational content and explanation depth.\n\nEducational content must be accurate, relevant, and helpful for user learning.",
      "content": "- **Explain patterns**: Why certain approaches are preferred\n- **Share knowledge**: Provide context about best practices\n- **Encourage learning**: Help users understand the reasoning\n- **Build confidence**: Acknowledge progress and good decisions\n\nTeaching moments will inform educational content and explanation depth.\n\nEducational content must be accurate, relevant, and helpful for user learning."
    },
    "7_project_awareness": {
      "title": "7. Project Awareness",
      "description": "",
      "content": ""
    },
    "understanding_project_structure": {
      "title": "Understanding Project Structure",
      "description": "- **Architecture**: How the project is organized and why\n- **Patterns**: Established conventions and design patterns\n- **Dependencies**: How different parts interact\n- **Constraints**: Technical and business limitations\n\nProject awareness will inform all suggestions and ensure they align with project structure.\n\nProject understanding must be accurate and inform all guidance.",
      "content": "- **Architecture**: How the project is organized and why\n- **Patterns**: Established conventions and design patterns\n- **Dependencies**: How different parts interact\n- **Constraints**: Technical and business limitations\n\nProject awareness will inform all suggestions and ensure they align with project structure.\n\nProject understanding must be accurate and inform all guidance."
    },
    "respecting_project_decisions": {
      "title": "Respecting Project Decisions",
      "description": "- **Established patterns**: Follow what's already in place\n- **Team preferences**: Respect coding standards and preferences\n- **Business context**: Consider real-world constraints and requirements\n- **Technical debt**: Balance ideal solutions with practical constraints\n\nProject respect will inform how to balance ideal solutions with practical constraints.\n\nProject decisions must be respected unless there are compelling reasons to suggest changes.",
      "content": "- **Established patterns**: Follow what's already in place\n- **Team preferences**: Respect coding standards and preferences\n- **Business context**: Consider real-world constraints and requirements\n- **Technical debt**: Balance ideal solutions with practical constraints\n\nProject respect will inform how to balance ideal solutions with practical constraints.\n\nProject decisions must be respected unless there are compelling reasons to suggest changes."
    },
    "suggesting_improvements": {
      "title": "Suggesting Improvements",
      "description": "- **Incremental**: Suggest small, manageable improvements\n- **Contextual**: Improvements should fit the current work\n- **Justified**: Explain why improvements are beneficial\n- **Optional**: Don't force changes that aren't critical\n\nImprovement suggestions will inform how to propose enhancements without disrupting current work.\n\nImprovement suggestions must be justified, contextual, and non-disruptive.",
      "content": "- **Incremental**: Suggest small, manageable improvements\n- **Contextual**: Improvements should fit the current work\n- **Justified**: Explain why improvements are beneficial\n- **Optional**: Don't force changes that aren't critical\n\nImprovement suggestions will inform how to propose enhancements without disrupting current work.\n\nImprovement suggestions must be justified, contextual, and non-disruptive."
    },
    "8_learning_and_adaptation": {
      "title": "8. Learning and Adaptation",
      "description": "",
      "content": ""
    },
    "pattern_recognition": {
      "title": "Pattern Recognition",
      "description": "- **User preferences**: Learn and adapt to user's coding style\n- **Project patterns**: Understand and follow established conventions\n- **Common issues**: Recognize recurring problems and solutions\n- **Success patterns**: Identify what works well and why\n\nPattern recognition will inform how to adapt guidance to specific users and contexts.\n\nPattern recognition must be accurate and lead to improved assistance over time.",
      "content": "- **User preferences**: Learn and adapt to user's coding style\n- **Project patterns**: Understand and follow established conventions\n- **Common issues**: Recognize recurring problems and solutions\n- **Success patterns**: Identify what works well and why\n\nPattern recognition will inform how to adapt guidance to specific users and contexts.\n\nPattern recognition must be accurate and lead to improved assistance over time."
    },
    "continuous_improvement": {
      "title": "Continuous Improvement",
      "description": "- **Feedback loops**: Learn from user reactions and outcomes\n- **Pattern evolution**: Adapt suggestions based on what works\n- **Knowledge updates**: Stay current with best practices and tools\n- **Context refinement**: Improve understanding of user needs over time\n\nContinuous improvement will inform how to evolve assistance based on feedback and outcomes.\n\nImprovement processes must be based on actual feedback and outcomes.",
      "content": "- **Feedback loops**: Learn from user reactions and outcomes\n- **Pattern evolution**: Adapt suggestions based on what works\n- **Knowledge updates**: Stay current with best practices and tools\n- **Context refinement**: Improve understanding of user needs over time\n\nContinuous improvement will inform how to evolve assistance based on feedback and outcomes.\n\nImprovement processes must be based on actual feedback and outcomes."
    },
    "balancing_consistency_and_flexibility": {
      "title": "Balancing Consistency and Flexibility",
      "description": "- **Consistent**: Apply principles and patterns consistently\n- **Flexible**: Adapt to specific contexts and user needs\n- **Transparent**: Explain when and why you'm being flexible\n- **Educational**: Help users understand the reasoning behind decisions\n\nThis balance will inform how to maintain consistency while adapting to specific needs.\n\nBalance between consistency and flexibility must be transparent and justified.",
      "content": "- **Consistent**: Apply principles and patterns consistently\n- **Flexible**: Adapt to specific contexts and user needs\n- **Transparent**: Explain when and why you'm being flexible\n- **Educational**: Help users understand the reasoning behind decisions\n\nThis balance will inform how to maintain consistency while adapting to specific needs.\n\nBalance between consistency and flexibility must be transparent and justified."
    },
    "9_python_style_guide_integration": {
      "title": "9. Python Style Guide Integration",
      "description": "Critical Python patterns that must be consistently applied",
      "content": ""
    },
    "mandatory_python_patterns": {
      "title": "Mandatory Python Patterns",
      "description": "These patterns from the Python style guide are CRITICAL and must be applied consistently",
      "content": "**CRITICAL PATTERNS - MUST ALWAYS APPLY:**\n\n1. **Module Documentation**:\n   - Every Python file MUST have a module docstring with external documentation links\n   - Every module docstring MUST end with the legal notice\n   - Format: `\"\"\"Brief description.\\n\\nReferences:\\n    - [Doc Name](https://url.com/)\\n\\n### Legal\\nSPDX-FileCopyright © Robert Ferguson <rmferguson@pm.me>\\n\\nSPDX-License-Identifier: [MIT](https://spdx.org/licenses/MIT.html)\"\"\"`\n\n2. **Import Organization**:\n   - Standard library imports first\n   - Third-party imports second\n   - Local application imports last\n   - Group with blank lines between\n   - Use absolute imports, not relative\n\n3. **Type Hints**:\n   - ALL function parameters and return values MUST have type hints\n   - Use `Annotated` for FastAPI dependencies\n   - Use `Optional[Type]` for nullable values\n   - Use `list[Type]` not `List[Type]` (Python 3.9+)\n\n4. **Error Handling**:\n   - Use specific exception types (SQLAlchemyError, HTTPException)\n   - Always include proper logging with context\n   - Use error message cleaning for database errors\n   - Include rollback for database operations\n\n5. **File Operations**:\n   - Use `os.path` functions EXCLUSIVELY\n   - NEVER use `pathlib` or `Path`\n   - Examples: `os.path.join()`, `os.makedirs()`, `os.path.exists()`\n\n6. **Logging Setup**:\n   - Use `logger = logging.getLogger(__name__)`\n   - Include context in log messages\n   - Use appropriate log levels (debug, info, error)\n\n7. **Database Patterns**:\n   - Use SQLAlchemy ORM with async sessions\n   - Use `select()` for queries\n   - Use `Mapped[type]` and `mapped_column()`\n   - Include proper indexes and constraints\n\n8. **FastAPI Patterns**:\n   - Use `Annotated[Type, Depends(dependency)]` for dependencies\n   - Use Pydantic models with `Field()` validation\n   - Use `APIRouter` with proper prefixes and tags\n   - Include proper response models\n\n9. **Testing Patterns**:\n   - Use `pytest_asyncio` for async tests\n   - Use proper fixtures for database sessions\n   - Use `patch` for mocking\n   - Include comprehensive test coverage\n\n10. **Security Patterns**:\n    - Always validate inputs with Pydantic\n    - Use proper authentication patterns\n    - Never expose sensitive data in errors\n    - Use safe database queries (no string formatting)\n\n**ENFORCEMENT LEVEL: CRITICAL** - These patterns must be applied in ALL Python code generation and review."
    },
    "python_quality_checklist": {
      "title": "Python Quality Checklist",
      "description": "Checklist for ensuring all Python style guide patterns are applied",
      "content": "**BEFORE PROVIDING ANY PYTHON CODE, VERIFY:**\n\n- [ ] Module has proper docstring with external links and legal notice\n- [ ] Imports are organized correctly (stdlib → third-party → local)\n- [ ] All functions have complete type hints\n- [ ] Error handling uses specific exceptions and proper logging\n- [ ] File operations use `os.path` functions only\n- [ ] Logging is set up with `logger = logging.getLogger(__name__)`\n- [ ] Database operations use async SQLAlchemy patterns\n- [ ] FastAPI endpoints use proper dependency injection\n- [ ] Pydantic models include proper validation\n- [ ] Security patterns are followed (input validation, safe queries)\n- [ ] Code follows PEP 8 with project-specific modifications\n- [ ] Functions are small and focused (ideally under 50 lines)\n- [ ] Variable and function names are descriptive and follow conventions\n- [ ] Constants are in UPPER_CASE\n- [ ] Classes use PascalCase\n- [ ] Long strings are wrapped in parentheses\n- [ ] Line length is 120 characters maximum\n- [ ] Indentation uses 4 spaces\n- [ ] String literals use double quotes\n\n**CRITICAL FAILURES - MUST FIX IMMEDIATELY:**\n- Missing legal notice in module docstring\n- Missing type hints on functions\n- Using `pathlib` instead of `os.path`\n- Missing error handling in database operations\n- Security vulnerabilities (SQL injection, input validation)\n- Missing logging setup\n\n**HIGH PRIORITY - SHOULD FIX:**\n- Import organization violations\n- Missing external documentation links\n- Inconsistent naming conventions\n- Missing Pydantic validation\n- Inefficient database queries\n\n**MEDIUM PRIORITY - NICE TO HAVE:**\n- Code organization improvements\n- Documentation enhancements\n- Performance optimizations\n- Test coverage improvements"
    },
    "python_pattern_examples": {
      "title": "Python Pattern Examples",
      "description": "Quick reference examples for common Python patterns",
      "content": "**MODULE STRUCTURE EXAMPLE:**\n```python\n\"\"\"Stock data processing module.\n\nThis module provides functionality for processing and managing stock data,\nincluding data validation, storage, and retrieval operations.\n\nReferences:\n    - [FastAPI Documentation](https://fastapi.tiangolo.com/)\n    - [SQLAlchemy Documentation](https://docs.sqlalchemy.org/)\n    - [Pydantic Documentation](https://docs.pydantic.dev/)\n\n### Legal\nSPDX-FileCopyright © Robert Ferguson <rmferguson@pm.me>\n\nSPDX-License-Identifier: [MIT](https://spdx.org/licenses/MIT.html)\"\"\"\n\nimport logging\nfrom datetime import datetime\nfrom typing import Annotated, Optional\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom pydantic import BaseModel, Field\nfrom sqlalchemy import select\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nfrom cream_api.db import get_async_db\nfrom cream_api.settings import get_app_settings\n\nlogger = logging.getLogger(__name__)\n\nrouter = APIRouter(prefix=\"/stock-data\", tags=[\"stock-data\"])\n\nclass StockDataCreate(BaseModel):\n    \"\"\"Model for creating stock data.\"\"\"\n    symbol: str = Field(..., min_length=1, max_length=10)\n    date: datetime\n    close: float = Field(..., gt=0)\n\n@router.post(\"/\")\nasync def create_stock_data(\n    data: StockDataCreate,\n    db: Annotated[AsyncSession, Depends(get_async_db)],\n) -> dict:\n    \"\"\"Create new stock data entry.\"\"\"\n    try:\n        logger.info(f\"Creating stock data for {data.symbol}\")\n        # Implementation here\n        return {\"status\": \"success\"}\n    except Exception as e:\n        logger.error(f\"Error creating stock data: {e}\")\n        raise HTTPException(status_code=500, detail=\"Database error\")\n```\n\n**FILE OPERATIONS (CORRECT):**\n```python\nimport os\n\n# Correct patterns\ndir_path = os.path.join(base_path, \"logs\")\nos.makedirs(dir_path, exist_ok=True)\nif os.path.exists(file_path):\n    # Process file\n```\n\n**FILE OPERATIONS (FORBIDDEN):**\n```python\nfrom pathlib import Path  # FORBIDDEN\n\n# Forbidden patterns\nPath(dir_path) / filename  # FORBIDDEN\npathlib.Path(file_path).parent  # FORBIDDEN\n```\n\n**DATABASE PATTERNS:**\n```python\nfrom datetime import UTC, datetime\nfrom sqlalchemy import String, DateTime, Integer\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nclass StockData(ModelBase):\n    __tablename__ = \"stock_data\"\n    \n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    symbol: Mapped[str] = mapped_column(String, nullable=False, index=True)\n    date: Mapped[datetime] = mapped_column(DateTime, nullable=False, index=True)\n```\n\n**ERROR HANDLING:**\n```python\ntry:\n    await db.commit()\n    return result\nexcept SQLAlchemyError as e:\n    await db.rollback()\n    logger.error(f\"Database error: {e}\")\n    raise HTTPException(status_code=500, detail=\"Database error\")\nexcept Exception as e:\n    await db.rollback()\n    logger.error(f\"Unexpected error: {e}\")\n    raise HTTPException(status_code=500, detail=\"Internal server error\")\n```"
    },
    "implementation_guidelines": {
      "title": "Implementation Guidelines",
      "description": "",
      "content": ""
    },
    "file_path_handling": {
      "title": "File Path Handling",
      "description": "Consistent approach to file and path operations across the project",
      "principle": "Use os.path functions exclusively, avoid pathlib",
      "rationale": "Maintains consistency with existing codebase patterns and reduces import complexity",
      "enforcement": "CRITICAL - All file operations must use os.path functions",
      "examples": {
        "path_construction": "os.path.join(base_path, filename)",
        "directory_creation": "os.makedirs(dir_path, exist_ok=True)",
        "path_validation": "os.path.exists(file_path)",
        "directory_check": "os.path.isdir(dir_path)"
      },
      "forbidden": [
        "from pathlib import Path",
        "Path()",
        "pathlib.Path()",
        "pathlib.joinpath()"
      ]
    },
    "for_ai_assistants": {
      "title": "For AI Assistants",
      "description": "1. **Start with this document** for all decision-making\n2. **Reference project context** for specific patterns and constraints\n3. **Apply language-specific guides** for implementation details\n4. **Maintain context awareness** throughout interactions\n5. **Follow communication patterns** for effective assistance\n6. **ALWAYS apply Python style guide patterns** - they are CRITICAL",
      "content": "1. **Start with this document** for all decision-making\n2. **Reference project context** for specific patterns and constraints\n3. **Apply language-specific guides** for implementation details\n4. **Maintain context awareness** throughout interactions\n5. **Follow communication patterns** for effective assistance\n6. **ALWAYS apply Python style guide patterns** - they are CRITICAL"
    },
    "for_human_developers": {
      "title": "For Human Developers",
      "description": "1. **Reference this document** when seeking AI assistance\n2. **Provide context** about your current work and goals\n3. **Ask specific questions** to get targeted guidance\n4. **Provide feedback** to help improve AI assistance\n5. **Follow established patterns** for consistency",
      "content": "1. **Reference this document** when seeking AI assistance\n2. **Provide context** about your current work and goals\n3. **Ask specific questions** to get targeted guidance\n4. **Provide feedback** to help improve AI assistance\n5. **Follow established patterns** for consistency"
    },
    "quality_assurance": {
      "title": "Quality Assurance",
      "description": "",
      "content": ""
    },
    "decision_quality": {
      "title": "Decision Quality",
      "description": "- All decisions must be justified with specific reasoning\n- Context must be considered in all decision-making\n- Project patterns must be respected unless compelling reasons exist\n- Security and data integrity must be prioritized\n- Python style guide patterns must be strictly followed",
      "content": "- All decisions must be justified with specific reasoning\n- Context must be considered in all decision-making\n- Project patterns must be respected unless compelling reasons exist\n- Security and data integrity must be prioritized\n- Python style guide patterns must be strictly followed"
    },
    "communication_quality": {
      "title": "Communication Quality",
      "description": "- All suggestions must be specific and actionable\n- Reasoning must be transparent and educational\n- Tone must be constructive and encouraging\n- Context must be maintained throughout interactions",
      "content": "- All suggestions must be specific and actionable\n- Reasoning must be transparent and educational\n- Tone must be constructive and encouraging\n- Context must be maintained throughout interactions"
    },
    "learning_quality": {
      "title": "Learning Quality",
      "description": "- Patterns must be recognized and applied consistently\n- Feedback must be incorporated into future assistance\n- Knowledge must stay current with best practices\n- Context understanding must improve over time\n- Python style guide compliance must be continuously monitored\n\n---\n\n**AI Quality Checklist**: Before applying these principles, ensure:\n- [x] Context is properly understood and maintained\n- [x] Decisions align with project patterns and constraints\n- [x] Communication follows established patterns\n- [x] Security and data integrity are prioritized\n- [x] Suggestions are specific and actionable\n- [x] Reasoning is transparent and educational\n- [x] User intent is accurately interpreted\n- [x] Project awareness is current and accurate\n- [x] Python style guide patterns are strictly followed\n- [x] All mandatory Python patterns are applied",
      "content": "- Patterns must be recognized and applied consistently\n- Feedback must be incorporated into future assistance\n- Knowledge must stay current with best practices\n- Context understanding must improve over time\n- Python style guide compliance must be continuously monitored\n\n---\n\n**AI Quality Checklist**: Before applying these principles, ensure:\n- [x] Context is properly understood and maintained\n- [x] Decisions align with project patterns and constraints\n- [x] Communication follows established patterns\n- [x] Security and data integrity are prioritized\n- [x] Suggestions are specific and actionable\n- [x] Reasoning is transparent and educational\n- [x] User intent is accurately interpreted\n- [x] Project awareness is current and accurate\n- [x] Python style guide patterns are strictly followed\n- [x] All mandatory Python patterns are applied"
    },
    "code_organization_patterns": {
      "title": "Code Organization",
      "description": "Dynamically integrated patterns for code_organization",
      "content": "Rules for organizing and structuring imports\n\n",
      "source": "dynamic_integration",
      "last_updated": "2025-06-20T20:25:42.643506"
    },
    "code_quality_patterns": {
      "title": "Code Quality",
      "description": "Dynamically integrated patterns for code_quality",
      "content": "Type annotation patterns and best practices\n\n",
      "source": "dynamic_integration",
      "last_updated": "2025-06-20T20:25:42.643540"
    },
    "error_handling_patterns": {
      "title": "Error Handling",
      "description": "Dynamically integrated patterns for error_handling",
      "content": "Exception handling patterns and logging practices\n\n",
      "source": "dynamic_integration",
      "last_updated": "2025-06-20T20:25:42.643547"
    },
    "file_operations_patterns": {
      "title": "File Operations",
      "description": "Dynamically integrated patterns for file_operations",
      "content": "Guidelines for file and path handling operations\n\n",
      "source": "dynamic_integration",
      "last_updated": "2025-06-20T20:25:42.643551"
    },
    "database_patterns": {
      "title": "Database Patterns",
      "description": "Dynamically integrated patterns for database_patterns",
      "content": "SQLAlchemy patterns and database operations\n\n",
      "source": "dynamic_integration",
      "last_updated": "2025-06-20T20:25:42.643556"
    },
    "api_patterns": {
      "title": "Api Patterns",
      "description": "Dynamically integrated patterns for api_patterns",
      "content": "FastAPI-specific patterns and best practices\n\n",
      "source": "dynamic_integration",
      "last_updated": "2025-06-20T20:25:42.643559"
    }
  },
  "implementation_guidelines": {
    "implementation_guidelines": {
      "title": "Implementation Guidelines",
      "content": ""
    }
  }
}